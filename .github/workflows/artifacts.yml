name: Build Artifacts
on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag'
        required: true
        type: string
      release_version:
        description: 'Release version number (e.g. v0.3.7-alpha)'
        required: true
        type: string
      info_version:
        description: 'Informational version number (e.g. 0.3.7-alpha)'
        required: true
        type: string
    secrets:
      apple_developer_certificate_p12_base64:
        required: true
      apple_developer_certificate_password:
        required: true
      ac_username:
        required: true
      ac_password:
        required: true
      gh_token:
        required: true
jobs:
  build_and_upload_mac:
    name: Mac Build & Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            kind: macOS
            target: osx-x64
          - os: macos-14
            kind: macOS
            target: osx-arm64
    steps:
      - name: Get the sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.203

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Install dependencies
        run: dotnet restore -r "${{ matrix.target}}"

      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.apple_developer_certificate_p12_base64 }}
          p12-password: ${{ secrets.apple_developer_certificate_password }}

      - name: Calculate Release Name
        shell: bash
        run: |
          release_name="ErsatzTV-${{ inputs.release_version }}-${{ matrix.target }}"
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          sed -i '' '/Scanner/d' ErsatzTV/ErsatzTV.csproj
          dotnet publish ErsatzTV.Scanner/ErsatzTV.Scanner.csproj --framework net9.0 --runtime "${{ matrix.target }}" -c Release -o publish -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=false -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
          dotnet publish ErsatzTV/ErsatzTV.csproj --framework net9.0 --runtime "${{ matrix.target }}" -c Release -o publish -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=false -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true

      - name: Bundle
        shell: bash
        run: |
          brew install coreutils
          plutil -replace CFBundleShortVersionString -string "${{ inputs.info_version }}" ErsatzTV-macOS/ErsatzTV-macOS/Info.plist
          plutil -replace CFBundleVersion -string "${{ inputs.info_version }}" ErsatzTV-macOS/ErsatzTV-macOS/Info.plist
          scripts/macOS/bundle.sh

      - name: Sign
        shell: bash
        run: scripts/macOS/sign.sh

      - name: Create DMG
        shell: bash
        run: |
          brew install create-dmg
          create-dmg \
            --volname "ErsatzTV" \
            --volicon "artwork/ErsatzTV.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "ErsatzTV.app" 200 190 \
            --hide-extension "ErsatzTV.app" \
            --app-drop-link 600 185 \
            --skip-jenkins \
            --no-internet-enable \
            "ErsatzTV.dmg" \
            "ErsatzTV.app/"

      - name: Notarize
        shell: bash
        run: |
          xcrun notarytool submit ErsatzTV.dmg --apple-id "${{ secrets.ac_username }}" --password "${{ secrets.ac_password }}" --team-id 32MB98Q32R --wait
          xcrun stapler staple ErsatzTV.dmg

      - name: Cleanup
        shell: bash
        run: |
          mv ErsatzTV.dmg "${{ env.RELEASE_NAME }}.dmg"
          rm -r publish
          rm -r ErsatzTV.app

      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        if: ${{ inputs.release_tag == 'develop' }}
        with:
          token: ${{ secrets.gh_token }}
          tag: ${{ inputs.release_tag }}
          fail-if-no-assets: false
          assets: "*${{ matrix.target }}.dmg"

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          tag_name: ${{ inputs.release_tag }}
          files: "${{ env.RELEASE_NAME }}.dmg"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

  build_and_upload_linux:
    name: Build & Upload Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            kind: linux
            target: linux-x64
          - os: ubuntu-latest
            kind: linux
            target: linux-musl-x64
          - os: ubuntu-latest
            kind: linux
            target: linux-arm
          - os: ubuntu-24.04-arm
            kind: linux
            target: linux-arm64
    steps:
      - name: Get the sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.203

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Install dependencies
        run: dotnet restore -r "${{ matrix.target }}"

      - name: Build
        shell: bash
        run: |
          # Define some variables for things we need
          release_name="ErsatzTV-${{ inputs.release_version }}-${{ matrix.target }}"
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV

          # Build everything
          sed -i '/Scanner/d' ErsatzTV/ErsatzTV.csproj
          dotnet publish ErsatzTV.Scanner/ErsatzTV.Scanner.csproj --framework net9.0 --runtime "${{ matrix.target }}" -c Release -o "scanner" -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=true -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
          dotnet publish ErsatzTV/ErsatzTV.csproj --framework net9.0 --runtime "${{ matrix.target }}" -c Release -o "main" -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-${{ matrix.target }}" -p:EnableCompressionInSingleFile=true -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
          mkdir "$release_name"
          mv scanner/* "$release_name/"
          mv main/* "$release_name/"
          tar czvf "${release_name}.tar.gz" "$release_name"

          # Delete output directory
          rm -r "$release_name"

      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        if: ${{ inputs.release_tag == 'develop' }}
        with:
          token: ${{ secrets.gh_token }}
          tag: ${{ inputs.release_tag }}
          fail-if-no-assets: false
          assets: "*${{ matrix.target }}.tar.gz"

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          tag_name: ${{ inputs.release_tag }}
          files: "${{ env.RELEASE_NAME }}.tar.gz"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

  build_dotnet_windows:
    name: Build dotnet for Windows
    runs-on: ubuntu-latest
    steps:
      - name: Get the sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.203

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Install dependencies
        run: dotnet restore -r "win-x64"

      - name: Build dotnet projects
        shell: bash
        run: |
          sed -i '/Scanner/d' ErsatzTV/ErsatzTV.csproj
          dotnet publish ErsatzTV.Scanner/ErsatzTV.Scanner.csproj --framework net9.0 --runtime "win-x64" -c Release -o "scanner" -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-win-x64" -p:EnableCompressionInSingleFile=true -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
          dotnet publish ErsatzTV/ErsatzTV.csproj --framework net9.0 --runtime "win-x64" -c Release -o "main" -p:RestoreEnablePackagePruning=true -p:InformationalVersion="${{ inputs.release_version }}-win-x64" -p:EnableCompressionInSingleFile=true -p:DebugType=Embedded -p:PublishSingleFile=true --self-contained true
          mkdir "$release_name"
          mv scanner/* "$release_name/"
          mv main/* "$release_name/"

      - name: Upload .NET Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-windows-build
          path: |
            scanner/
            main/
          retention-days: 1

  build_rust_windows:
    name: Build rust for Windows
    runs-on: windows-latest
    steps:
      - name: Get the sources
        uses: actions/checkout@v4

      - name: Build Windows Launcher
        shell: bash
        run: cargo build --manifest-path=ErsatzTV-Windows/Cargo.toml --release --all-features

      - name: Upload Rust Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rust-windows-build
          path: ErsatzTV-Windows/target/release/ersatztv_windows.exe
          retention-days: 1

  package_and_upload_windows:
    name: Package & Upload Windows
    runs-on: ubuntu-latest
    needs: [build_dotnet_windows, build_rust_windows]
    steps:
      - name: Download dotnet artifacts
        uses: actions/download-artifact@v4
        with:
          name: dotnet-windows-build
          path: dotnet-build

      - name: Download rust artifacts
        uses: actions/download-artifact@v4
        with:
          name: rust-windows-build
          path: rust-build

      - name: Download ffmpeg
        uses: suisei-cn/actions-download-file@v1.3.0
        id: downloadffmpeg
        with:
          url: "https://github.com/ErsatzTV/ErsatzTV-ffmpeg/releases/download/7.1.1/ffmpeg-n7.1.1-56-gc2184b65d2-win64-gpl-7.1.zip"
          target: ffmpeg/

      - name: Package artifacts
        shell: bash
        run: |
          release_name="ErsatzTV-${{ inputs.release_version }}-win-x64"
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV
          mkdir "$release_name"
          
          mv dotnet-build/* "$release_name/"
          mv rust-build/ersatztv_windows.exe "$release_name/ErsatzTV-Windows.exe"
          7z e "ffmpeg/${{ steps.downloadffmpeg.outputs.filename }}" -o"$release_name" '*.exe' -r
          rm -f "$release_name/ffplay.exe"
          
          7z a -tzip "${release_name}.zip" "./${release_name}/*"

      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        if: ${{ inputs.release_tag == 'develop' }}
        with:
          token: ${{ secrets.gh_token }}
          tag: ${{ inputs.release_tag }}
          fail-if-no-assets: false
          assets: "*win-x64.zip"

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: false
          tag_name: ${{ inputs.release_tag }}
          files: "${{ env.RELEASE_NAME }}.zip"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}
