name: Build
on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  calculate_version:
    name: Calculate version information
    runs-on: ubuntu-latest
    steps:
      - name: Extract Git Tag
        shell: bash
        run: |
          tag=$(git describe --tags --abbrev=0)
          tag2="${tag:1}"
          short=$(git rev-parse --short HEAD)
          final="${tag2/alpha/$short}"
          echo "GIT_TAG=${final}" >> $GITHUB_ENV
  build_and_upload:
    name: Build & Upload Develop Artifacts
    needs: build_and_test
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[no build]')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            kind: linux
            target: linux-x64
          - os: ubuntu-latest
            kind: linux
            target: linux-arm
          - os: windows-latest
            kind: windows
            target: win-x64
          - os: macos-latest
            kind: macOS
            target: osx-x64
          - os: macos-latest
            kind: macOS
            target: osx-arm64
    steps:
      - name: Get the sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.x

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Install dependencies
        run: dotnet restore -r "${{ matrix.target}}"
        
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        if: matrix.kind == 'macOS'
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}        

      - name: Build
        shell: bash
        run: |
          # Define some variables for things we need
          tag=$(git describe --tags --abbrev=0)
          tag2="${tag:1}"
          short=$(git rev-parse --short HEAD)
          final="${tag2/alpha/$short}"
          release_name="ErsatzTV-$final-${{ matrix.target }}"
          echo "RELEASE_NAME=${release_name}" >> $GITHUB_ENV
                  
          # Build everything
          if [ "${{ matrix.kind }}" == "macOS" ]; then
            brew tap mitchellh/gon
            brew install mitchellh/gon/gon
            dotnet msbuild ErsatzTV/ErsatzTV.csproj -t:BundleApp -p:RuntimeIdentifier="${{ matrix.target }}" -p:CFBundleVersion="${tag2}" -p:Configuration=Release -p:CFBundleShortVersionString="${tag2}" -p:InformationalVersion="$final-${{ matrix.target }}" -p:PublishDir=$(pwd)/release
            cp scripts/macOS/launcher.sh release/ErsatzTV.app/Contents/MacOS/
            scripts/macOS/sign.sh
            gon -log-level=debug -log-json ./gon.json
            mv release/ErsatzTV.dmg "${release_name}.dmg"
            rm -r release
          else
            dotnet publish ErsatzTV/ErsatzTV.csproj --framework net6.0 --runtime "${{ matrix.target }}" -c Release -o "$release_name" /property:InformationalVersion="$final-${{ matrix.target }}" /property:EnableCompressionInSingleFile=true /property:DebugType=Embedded /property:PublishSingleFile=true --self-contained true
  
            # Pack files
            if [ "${{ matrix.target }}" == "win-x64" ]; then
              7z a -tzip "${release_name}.zip" "./${release_name}/*"
            else
              tar czvf "${release_name}.tar.gz" "$release_name"
            fi

            # Delete output directory
            rm -r "$release_name"
          fi
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}

      - name: Delete old release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: develop
          fail-if-no-assets: false
          assets: |
            *${{ matrix.target }}.zip
            *${{ matrix.target }}.tar.gz
            *${{ matrix.target }}.dmg
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: develop
          files: |
            ${{ env.RELEASE_NAME }}.zip
            ${{ env.RELEASE_NAME }}.tar.gz
            ${{ env.RELEASE_NAME }}.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_and_push:
    uses: jasongdove/ersatztv/.github/workflows/docker.yml@main
    with:
      base_version: develop
      info_version: ${{ env.GIT_TAG }}
      tag_version: ${{ github.sha }}
