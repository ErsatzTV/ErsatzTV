name: Publish
on:
  release:
    types: [ published ]
jobs:
  release:
    name: Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            kind: linux
            target: linux-x64
          - os: windows-latest
            kind: windows
            target: win-x64
          - os: macos-latest
            kind: maxOS
            target: osx-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Get the sources
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Clean
        run: dotnet clean --configuration Release && dotnet nuget locals all --clear

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        shell: bash
        run: |
          # Define some variables for things we need
          tag=$(git describe --tags --abbrev=0)
          release_name="ErsatzTV-$tag-${{ matrix.target }}"
          #release_name_cli="ErsatzTV.CommandLine-$tag-${{ matrix.target }}"

          # Build everything
          dotnet publish ErsatzTV/ErsatzTV.csproj --framework net5.0 --runtime "${{ matrix.target }}" -c Release -o "$release_name" /property:InformationalVersion="${tag:1}-${{ matrix.target }}"
          #dotnet publish ErsatzTV.CommandLine/ErsatzTV.CommandLine.csproj --framework net5.0 --runtime "${{ matrix.target }}" -c Release -o "$release_name_cli" /property:InformationalVersion="${tag:1}-${{ matrix.target }}"

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            7z a -tzip "${release_name}.zip" "./${release_name}/*"
            #7z a -tzip "${release_name_cli}.zip" "./${release_name_cli}/*"
          else
            tar czvf "${release_name}.tar.gz" "$release_name"
            #tar czvf "${release_name_cli}.tar.gz" "$release_name_cli"
          fi

          # Delete output directory
          rm -r "$release_name"
          #rm -r "$release_name_cli"

      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: |
            ErsatzTV*.zip
            ErsatzTV*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build_and_push:
    name: Build & Publish to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Extract Git Tag
        shell: bash
        run: |
          tag=$(git describe --tags --abbrev=0)
          echo "GIT_TAG=${tag:1}" >> $GITHUB_ENV
          echo "DOCKER_TAG=${tag/-prealpha/}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2.1.4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push base
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          build-args: |
            INFO_VERSION=${{ env.GIT_TAG }}-docker
          tags: |
            jasongdove/ersatztv:latest
            jasongdove/ersatztv:${{ env.DOCKER_TAG }}
            jasongdove/ersatztv:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Build and push nvidia
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/nvidia/Dockerfile
          push: true
          build-args: |
            INFO_VERSION=${{ env.GIT_TAG }}-docker-nvidia
          tags: |
            jasongdove/ersatztv:latest-nvidia
            jasongdove/ersatztv:${{ env.DOCKER_TAG }}-nvidia
            jasongdove/ersatztv:${{ github.sha }}-nvidia
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Build and push vaapi
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/vaapi/Dockerfile
          push: true
          build-args: |
            INFO_VERSION=${{ env.GIT_TAG }}-docker-vaapi
          tags: |
            jasongdove/ersatztv:latest-vaapi
            jasongdove/ersatztv:${{ env.DOCKER_TAG }}-vaapi
            jasongdove/ersatztv:${{ github.sha }}-vaapi
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
