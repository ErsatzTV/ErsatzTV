@page "/playouts/block/{Id:int}"
@using ErsatzTV.Application.Channels
@using ErsatzTV.Application.Scheduling
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IEntityLocker EntityLocker;
@inject ILogger<BlockPlayoutEditor> Logger

<MudForm Style="max-height: 100%">
    <MudPaper Square="true" Style="display: flex; height: 64px; min-height: 64px; width: 100%; z-index: 100; align-items: center">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-6" OnClick="@(_ => SaveDefaultDeco())" StartIcon="@Icons.Material.Filled.Save">
            Save Default Deco
        </MudButton>
    </MudPaper>
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">@_channelName - Block Playout</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Playout Templates</MudText>
                </div>
                <MudButton Disabled="@EntityLocker.IsPlayoutLocked(Id)" Variant="Variant.Filled" Color="Color.Primary" Href="@($"playouts/{Id}/templates")" StartIcon="@Icons.Material.Filled.Edit">
                    Edit Templates
                </MudButton>
            </MudStack>
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">Default Deco</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Enable Default Deco</MudText>
                </div>
                <MudCheckBox @bind-Value="_enableDefaultDeco" Color="Color.Primary" Dense="true"/>
            </MudStack>
            @if (_enableDefaultDeco)
            {
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Deco Group</MudText>
                    </div>
                    <MudSelect T="DecoGroupViewModel"
                               Value="@_selectedDefaultDecoGroup"
                               ValueChanged="@(vm => UpdateDefaultDecoTemplateGroupItems(vm))">
                        @foreach (DecoGroupViewModel decoGroup in _decoGroups)
                        {
                            <MudSelectItem Value="@decoGroup">@decoGroup.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Deco</MudText>
                    </div>
                    <MudSelect @bind-Value="_defaultDeco" For="@(() => _defaultDeco)">
                        @foreach (DecoViewModel deco in _decos)
                        {
                            <MudSelectItem Value="@deco">@deco.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            }
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">Maintenance</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Playout Items and History</MudText>
                </div>
                <MudButton Disabled="@EntityLocker.IsPlayoutLocked(Id)" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(_ => EraseItems(eraseHistory: false))" StartIcon="@Icons.Material.Filled.Delete">
                    Erase Items
                </MudButton>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Disabled="@EntityLocker.IsPlayoutLocked(Id)" Variant="Variant.Filled" Color="Color.Error" OnClick="@(_ => EraseItems(eraseHistory: true))" StartIcon="@Icons.Material.Filled.Delete">
                    Erase Items and History
                </MudButton>
            </MudStack>
        </MudContainer>
    </div>
</MudForm>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int Id { get; set; }

    private readonly List<DecoGroupViewModel> _decoGroups = [];
    private readonly List<DecoViewModel> _decos = [];

    private string _channelName;
    private bool _enableDefaultDeco;
    private DecoGroupViewModel _selectedDefaultDecoGroup;
    private DecoViewModel _defaultDeco;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        Option<string> maybeName = await Mediator.Send(new GetChannelNameByPlayoutId(Id), _cts.Token);
        if (maybeName.IsNone)
        {
            NavigationManager.NavigateTo("playouts");
            return;
        }

        foreach (string name in maybeName)
        {
            _channelName = name;
        }

        _decoGroups.Clear();
        _decoGroups.AddRange(await Mediator.Send(new GetAllDecoGroups(), _cts.Token));

        Option<DecoViewModel> maybeDefaultDeco = await Mediator.Send(new GetDecoByPlayoutId(Id), _cts.Token);
        foreach (DecoViewModel defaultDeco in maybeDefaultDeco)
        {
            _enableDefaultDeco = true;
            _selectedDefaultDecoGroup = _decoGroups.SingleOrDefault(dg => dg.Id == defaultDeco.DecoGroupId);
            await UpdateDefaultDecoTemplateGroupItems(_selectedDefaultDecoGroup);
            _defaultDeco = defaultDeco;
        }
    }

    private async Task UpdateDefaultDecoTemplateGroupItems(DecoGroupViewModel decoGroup)
    {
        _selectedDefaultDecoGroup = decoGroup;

        _decos.Clear();
        _decos.AddRange(await Mediator.Send(new GetDecosByDecoGroupId(_selectedDefaultDecoGroup.Id), _cts.Token));
    }

    private async Task EraseItems(bool eraseHistory)
    {
        IRequest request = eraseHistory ? new ErasePlayoutHistory(Id) : new ErasePlayoutItems(Id);
        await Mediator.Send(request, _cts.Token);

        string message = eraseHistory ? "Erased playout items and history" : "Erased playout items";
        Snackbar.Add(message, Severity.Info);
    }

    private async Task SaveDefaultDeco()
    {
        int? decoId = _enableDefaultDeco ? _defaultDeco?.Id : null;
        Option<BaseError> result = await Mediator.Send(new UpdateDefaultDeco(Id, decoId), _cts.Token);
        result.Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving default deco: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving default deco: {Error}", error.Value);
            },
            () =>
            {
                Snackbar.Add($"Saved default deco for playout {_channelName}", Severity.Success);
            });
    }

}