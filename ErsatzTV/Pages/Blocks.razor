@page "/blocks"
@using ErsatzTV.Application.Scheduling
@implements IDisposable
@inject ILogger<Blocks> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService Dialog

<MudForm Style="max-height: 100%">
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">Block Groups</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Block Group Name</MudText>
                </div>
                <MudTextField @bind-Value="_blockGroupName" For="@(() => _blockGroupName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddBlockGroup())" StartIcon="@Icons.Material.Filled.Add">
                    Add Block Group
                </MudButton>
            </MudStack>
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">Blocks</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Block Group</MudText>
                </div>
                <MudSelect @bind-Value="_selectedBlockGroup">
                    @foreach (BlockGroupViewModel blockGroup in _blockGroups)
                    {
                        <MudSelectItem Value="@blockGroup">@blockGroup.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Block Name</MudText>
                </div>
                <MudTextField @bind-Value="_blockName" For="@(() => _blockName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddBlock())" StartIcon="@Icons.Material.Filled.Add">
                    Add Block
                </MudButton>
            </MudStack>
            <MudTable Hover="true"
                      Dense="true"
                      Class="mt-8"
                      Items="@_blocks"
                      GroupBy="@_groupDefinition"
                      GroupHeaderStyle="background-color:var(--mud-palette-appbarbackground)"
                      RowStyle="background-color:var(--mud-palette-background-gray)"
                      Filter="new Func<BlockViewModel,bool>(FilterBlocks)">
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col style="width: 60px;"/>
                        <col/>
                        <col style="width: 120px;"/>
                    </MudHidden>
                </ColGroup>
                <ToolBarContent>
                    <MudTextField T="string"
                                  ValueChanged="@(s => OnSearch(s))"
                                  Placeholder="Search for blocks"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.FilterList"
                                  Clearable="true">
                    </MudTextField>
                </ToolBarContent>
                <GroupHeaderTemplate>
                    <MudTd Class="mud-table-cell-custom-group">
                        @($"{context.Key}")
                    </MudTd>
                    <MudTd>
                        <div style="align-items: center; display: flex;">
                            <div style="width: 48px;"></div>
                            <MudTooltip Text="Delete Block Group">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               OnClick="@(_ => DeleteBlockGroup(context.Items?.FirstOrDefault()))">
                                </MudIconButton>
                            </MudTooltip>
                        </div>
                    </MudTd>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        <div class="d-flex">
                            @if (context.Id >= 0)
                            {
                                <MudTooltip Text="Edit Block">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Href="@($"blocks/{context.Id}")">
                                    </MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Delete Block">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   OnClick="@(_ => DeleteBlock(context))">
                                    </MudIconButton>
                                </MudTooltip>
                            }
                            else
                            {
                                <div style="height: 48px; width: 48px"></div>
                            }
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    </div>
</MudForm>

@code {
    private CancellationTokenSource _cts;
    private readonly List<BlockViewModel> _blocks = [];
    private List<BlockGroupViewModel> _blockGroups = [];
    private BlockGroupViewModel _selectedBlockGroup;
    private string _blockGroupName;
    private string _blockName;
    private string _searchString;

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            _blockGroups = await Mediator.Send(new GetAllBlockGroups(), token);

            _blocks.Clear();
            _blocks.AddRange(await Mediator.Send(new GetAllBlocks(), token));
        }
        catch (OperationCanceledException)
        {
            // do nothing
        }
    }

    private readonly TableGroupDefinition<BlockViewModel> _groupDefinition = new()
    {
        GroupName = "Group",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.GroupName
    };

    private async Task AddBlockGroup()
    {
        if (!string.IsNullOrWhiteSpace(_blockGroupName))
        {
            Either<BaseError, BlockGroupViewModel> result = await Mediator.Send(new CreateBlockGroup(_blockGroupName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding block group: {Error}", error.Value);
            }

            foreach (BlockGroupViewModel blockGroup in result.RightToSeq())
            {
                _blockGroupName = null;
                _blockGroups = await Mediator.Send(new GetAllBlockGroups(), _cts.Token);
                _selectedBlockGroup = _blockGroups.Find(bg => bg.Id == blockGroup.Id);

                _blocks.Clear();
                _blocks.AddRange(await Mediator.Send(new GetAllBlocks(), _cts.Token));

                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task AddBlock()
    {
        if (_selectedBlockGroup is not null && !string.IsNullOrWhiteSpace(_blockName))
        {
            Either<BaseError, BlockViewModel> result = await Mediator.Send(new CreateBlock(_selectedBlockGroup.Id, _blockName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding block: {Error}", error.Value);
            }

            if (result.IsRight)
            {
                _blocks.Clear();
                _blocks.AddRange(await Mediator.Send(new GetAllBlocks(), _cts.Token));

                _blockName = null;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private void OnSearch(string query)
    {
        _searchString = query;
    }

    private bool FilterBlocks(BlockViewModel block) => FilterBlocks(block, _searchString);

    private bool FilterBlocks(BlockViewModel block, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (block.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    private async Task DeleteBlockGroup(BlockViewModel block)
    {
        if (block is null)
        {
            return;
        }

        var parameters = new DialogParameters { { "EntityType", "block group" }, { "EntityName", block.GroupName } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Block Group", parameters, options);
        DialogResult result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await Mediator.Send(new DeleteBlockGroup(block.GroupId), _cts.Token);
            if (_selectedBlockGroup?.Id == block.GroupId)
            {
                _selectedBlockGroup = null;
            }

            _blockGroups = await Mediator.Send(new GetAllBlockGroups(), _cts.Token);
            _blocks.Clear();
            _blocks.AddRange(await Mediator.Send(new GetAllBlocks(), _cts.Token));

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeleteBlock(BlockViewModel block)
    {
        var parameters = new DialogParameters { { "EntityType", "block" }, { "EntityName", block.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Block", parameters, options);
        DialogResult result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await Mediator.Send(new DeleteBlock(block.Id), _cts.Token);
            _blocks.Clear();
            _blocks.AddRange(await Mediator.Send(new GetAllBlocks(), _cts.Token));

            await InvokeAsync(StateHasChanged);
        }
    }
}
