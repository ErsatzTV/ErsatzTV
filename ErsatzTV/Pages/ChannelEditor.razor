@page "/channels/{Id:int?}"
@page "/channels/add"
@using static Prelude
@using ErsatzTV.Application.FFmpegProfiles
@using ErsatzTV.Application.Filler
@using ErsatzTV.Application.Images
@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.Templates
@using ErsatzTV.Application.Watermarks
@using ErsatzTV.Application.Channels
@using ErsatzTV.Core.Domain.Filler
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<ChannelEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <div style="max-width: 400px;">
        <EditForm EditContext="_editContext" OnSubmit="@HandleSubmitAsync">
            <FluentValidationValidator/>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">@(IsEdit ? "Edit Channel" : "Add Channel")</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Number" @bind-Value="_model.Number" For="@(() => _model.Number)" Immediate="true"/>
                    <MudTextField Class="mt-3" Label="Name" @bind-Value="_model.Name" For="@(() => _model.Name)"/>
                    <MudTextField Class="mt-3" Label="Group" @bind-Value="_model.Group" For="@(() => _model.Group)"/>
                    <MudTextField Class="mt-3" Label="Categories" @bind-Value="_model.Categories" For="@(() => _model.Categories)" Placeholder="Comma-separated list of categories"/>
                    <MudSelect Class="mt-3" Label="Streaming Mode" @bind-Value="_model.StreamingMode" For="@(() => _model.StreamingMode)">
                        <MudSelectItem Value="@(StreamingMode.TransportStreamHybrid)">MPEG-TS</MudSelectItem>
                        <MudSelectItem Value="@(StreamingMode.TransportStream)">MPEG-TS (Legacy)</MudSelectItem>
                        <MudSelectItem Value="@(StreamingMode.HttpLiveStreamingDirect)">HLS Direct</MudSelectItem>
                        <MudSelectItem Value="@(StreamingMode.HttpLiveStreamingSegmenter)">HLS Segmenter</MudSelectItem>
                        <MudSelectItem Value="@(StreamingMode.HttpLiveStreamingSegmenterV2)">HLS Segmenter V2</MudSelectItem>
                    </MudSelect>
                    <MudSelect Class="mt-3" Label="FFmpeg Profile" @bind-Value="_model.FFmpegProfileId" For="@(() => _model.FFmpegProfileId)"
                               Disabled="@(_model.StreamingMode == StreamingMode.HttpLiveStreamingDirect)">
                        @foreach (FFmpegProfileViewModel profile in _ffmpegProfiles)
                        {
                            <MudSelectItem Value="@profile.Id">@profile.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Class="mt-3"
                               Label="Preferred Audio Language"
                               @bind-Value="_model.PreferredAudioLanguageCode"
                               For="@(() => _model.PreferredAudioLanguageCode)"
                               Clearable="true">
                        <MudSelectItem Value="@((string)null)">(none)</MudSelectItem>
                        @foreach (LanguageCodeViewModel culture in _availableCultures)
                        {
                            <MudSelectItem Value="@culture.ThreeLetterISOLanguageName">@culture.EnglishName</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTextField Label="Preferred Audio Title" @bind-Value="_model.PreferredAudioTitle" For="@(() => _model.PreferredAudioTitle)"/>
                    <MudSelect Class="mt-3"
                               Label="Preferred Subtitle Language"
                               @bind-Value="_model.PreferredSubtitleLanguageCode"
                               For="@(() => _model.PreferredSubtitleLanguageCode)"
                               Clearable="true">
                        <MudSelectItem Value="@((string)null)">(none)</MudSelectItem>
                        @foreach (LanguageCodeViewModel culture in _availableCultures)
                        {
                            <MudSelectItem Value="@culture.ThreeLetterISOLanguageName">@culture.EnglishName</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Class="mt-3" Label="Subtitle Mode" @bind-Value="_model.SubtitleMode" For="@(() => _model.SubtitleMode)">
                        <MudSelectItem Value="@(ChannelSubtitleMode.None)">None</MudSelectItem>
                        <MudSelectItem Value="@(ChannelSubtitleMode.Forced)">Forced</MudSelectItem>
                        <MudSelectItem Value="@(ChannelSubtitleMode.Default)">Default</MudSelectItem>
                        <MudSelectItem Value="@(ChannelSubtitleMode.Any)">Any</MudSelectItem>
                    </MudSelect>
                    <MudSelect Class="mt-3" Label="Music Video Credits Mode" @bind-Value="_model.MusicVideoCreditsMode" For="@(() => _model.MusicVideoCreditsMode)">
                        <MudSelectItem Value="@(ChannelMusicVideoCreditsMode.None)">None</MudSelectItem>
                        <MudSelectItem Value="@(ChannelMusicVideoCreditsMode.GenerateSubtitles)">Generate Subtitles</MudSelectItem>
                    </MudSelect>
                    <MudSelect Class="mt-3"
                               Label="Music Video Credits Template"
                               @bind-Value="_model.MusicVideoCreditsTemplate"
                               For="@(() => _model.MusicVideoCreditsTemplate)"
                               Disabled="@(_model.MusicVideoCreditsMode != ChannelMusicVideoCreditsMode.GenerateSubtitles)">
                        <MudSelectItem T="string" Value="@((string)null)">(none)</MudSelectItem>
                        @foreach (string template in _musicVideoCreditsTemplates)
                        {
                            <MudSelectItem T="string" Value="@template">@template</MudSelectItem>
                        }
                    </MudSelect>
                    <MudGrid Class="mt-3" Style="align-items: center" Justify="Justify.Center">
                        <MudItem xs="6">
                            <InputFile id="fileInput" OnChange="UploadLogo" hidden/>
                            @if (!string.IsNullOrWhiteSpace(_model.Logo))
                            {
                                <MudElement HtmlTag="img" src="@($"iptv/logos/{_model.Logo}")" Style="max-height: 50px"/>
                            }
                        </MudItem>
                        <MudItem xs="6">
                            <MudButton Class="ml-auto" HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="fileInput">
                                Upload Logo
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudSelect Class="mt-3" Label="Watermark" @bind-Value="_model.WatermarkId" For="@(() => _model.WatermarkId)"
                               Disabled="@(_model.StreamingMode == StreamingMode.HttpLiveStreamingDirect)"
                               Clearable="true">
                        <MudSelectItem T="int?" Value="@((int?)null)">(none)</MudSelectItem>
                        @foreach (WatermarkViewModel watermark in _watermarks)
                        {
                            <MudSelectItem T="int?" Value="@watermark.Id">@watermark.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect Class="mt-3"
                               Label="Fallback Filler"
                               @bind-Value="_model.FallbackFillerId"
                               For="@(() => _model.FallbackFillerId)"
                               Clearable="true">
                        <MudSelectItem T="int?" Value="@((int?)null)">(none)</MudSelectItem>
                        @foreach (FillerPresetViewModel fillerPreset in _fillerPresets)
                        {
                            <MudSelectItem T="int?" Value="@fillerPreset.Id">@fillerPreset.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        @(IsEdit ? "Save Changes" : "Add Channel")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int? Id { get; set; }

    private readonly ChannelEditViewModel _model = new();
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;

    private List<FFmpegProfileViewModel> _ffmpegProfiles = new();
    private List<LanguageCodeViewModel> _availableCultures = new();
    private List<WatermarkViewModel> _watermarks = new();
    private List<FillerPresetViewModel> _fillerPresets = new();
    private List<string> _musicVideoCreditsTemplates = new();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadFFmpegProfiles(_cts.Token);
        _availableCultures = await Mediator.Send(new GetAllLanguageCodes(), _cts.Token);
        await LoadWatermarks(_cts.Token);
        await LoadFillerPresets(_cts.Token);
        await LoadMusicVideoCreditsTemplates(_cts.Token);

        if (Id.HasValue)
        {
            Option<ChannelViewModel> maybeChannel = await Mediator.Send(new GetChannelById(Id.Value), _cts.Token);
            maybeChannel.Match(
                channelViewModel =>
                {
                    _model.Id = channelViewModel.Id;
                    _model.Name = channelViewModel.Name;
                    _model.Group = channelViewModel.Group;
                    _model.Categories = channelViewModel.Categories;
                    _model.Number = channelViewModel.Number;
                    _model.FFmpegProfileId = channelViewModel.FFmpegProfileId;
                    _model.Logo = channelViewModel.Logo;
                    _model.StreamingMode = channelViewModel.StreamingMode;
                    _model.PreferredAudioLanguageCode = channelViewModel.PreferredAudioLanguageCode;
                    _model.PreferredAudioTitle = channelViewModel.PreferredAudioTitle;
                    _model.WatermarkId = channelViewModel.WatermarkId;
                    _model.FallbackFillerId = channelViewModel.FallbackFillerId;
                    _model.PreferredSubtitleLanguageCode = channelViewModel.PreferredSubtitleLanguageCode;
                    _model.SubtitleMode = channelViewModel.SubtitleMode;
                    _model.MusicVideoCreditsMode = channelViewModel.MusicVideoCreditsMode;
                    _model.MusicVideoCreditsTemplate = channelViewModel.MusicVideoCreditsTemplate;
                },
                () => NavigationManager.NavigateTo("404"));
        }
        else
        {
            FFmpegSettingsViewModel ffmpegSettings = await Mediator.Send(new GetFFmpegSettings(), _cts.Token);

            // TODO: command for new channel
            IEnumerable<int> channelNumbers = await Mediator.Send(new GetAllChannels(), _cts.Token)
                .Map(list => list.Map(c => int.TryParse(c.Number.Split(".").Head(), out int result) ? result : 0));
            int maxNumber = Optional(channelNumbers).Flatten().DefaultIfEmpty(0).Max();
            _model.Number = (maxNumber + 1).ToString();
            _model.Name = "New Channel";
            _model.Group = "ErsatzTV";
            _model.FFmpegProfileId = ffmpegSettings.DefaultFFmpegProfileId;
            _model.StreamingMode = StreamingMode.TransportStreamHybrid;
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private bool IsEdit => Id.HasValue;

    private async Task LoadFFmpegProfiles(CancellationToken cancellationToken) =>
        _ffmpegProfiles = await Mediator.Send(new GetAllFFmpegProfiles(), cancellationToken);

    private async Task LoadWatermarks(CancellationToken cancellationToken) =>
        _watermarks = await Mediator.Send(new GetAllWatermarks(), cancellationToken);

    private async Task LoadFillerPresets(CancellationToken cancellationToken) =>
        _fillerPresets = await Mediator.Send(new GetAllFillerPresets(), cancellationToken)
            .Map(list => list.Filter(vm => vm.FillerKind == FillerKind.Fallback).ToList());

    private async Task LoadMusicVideoCreditsTemplates(CancellationToken cancellationToken) =>
        _musicVideoCreditsTemplates = await Mediator.Send(new GetMusicVideoCreditTemplates(), cancellationToken);

    private async Task HandleSubmitAsync()
    {
        _messageStore.Clear();
        if (_editContext.Validate())
        {
            Seq<BaseError> errorMessage = IsEdit ? (await Mediator.Send(_model.ToUpdate(), _cts.Token)).LeftToSeq() : (await Mediator.Send(_model.ToCreate(), _cts.Token)).LeftToSeq();

            errorMessage.HeadOrNone().Match(
                error =>
                {
                    Snackbar.Add(error.Value, Severity.Error);
                    Logger.LogError("Unexpected error saving channel: {Error}", error.Value);
                },
                () => NavigationManager.NavigateTo("/channels"));
        }
    }

    private async Task UploadLogo(InputFileChangeEventArgs e)
    {
        try
        {
            Either<BaseError, string> maybeCacheFileName =
                await Mediator.Send(new SaveArtworkToDisk(e.File.OpenReadStream(10 * 1024 * 1024), ArtworkKind.Logo), _cts.Token);
            maybeCacheFileName.Match(
                relativeFileName =>
                {
                    _model.Logo = relativeFileName;
                    StateHasChanged();
                },
                error =>
                {
                    Snackbar.Add($"Unexpected error saving channel logo: {error.Value}", Severity.Error);
                    Logger.LogError("Unexpected error saving channel logo: {Error}", error.Value);
                });
        }
        catch (IOException)
        {
            Snackbar.Add("Channel logo exceeds maximum allowed file size of 10 MB", Severity.Error);
            Logger.LogError("Channel logo exceeds maximum allowed file size of 10 MB");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Unexpected error saving channel logo: {ex.Message}", Severity.Error);
            Logger.LogError("Unexpected error saving channel logo: {Error}", ex.Message);
        }
    }

}