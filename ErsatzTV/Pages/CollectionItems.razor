@page "/media/collections/{Id:int}"
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections.Commands
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject ILogger<CollectionItems> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<div class="mb-6" style="display: flex; flex-direction: row;">
    <MudText GutterBottom="true" Typo="Typo.h2">@_data.Name</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                   Link="@($"/media/collections/{Id}/edit")"
                   Style="margin-bottom: auto; margin-top: auto;"/>
</div>

@if (_data.MovieCards.Any())
{
    <MudText GutterBottom="true" Typo="Typo.h4">Movies</MudText>

    <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
        @foreach (MovieCardViewModel card in _data.MovieCards)
        {
            <MediaCard Data="@card"
                       Link="@($"/media/movies/{card.MovieId}")"
                       DeleteClicked="@RemoveMovieFromCollection"/>
        }
    </MudContainer>
}

@if (_data.ShowCards.Any())
{
    <MudText GutterBottom="true" Typo="Typo.h4">Television Shows</MudText>

    <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
        @foreach (TelevisionShowCardViewModel card in _data.ShowCards)
        {
            <MediaCard Data="@card"
                       Link="@($"/media/tv/shows/{card.TelevisionShowId}")"
                       DeleteClicked="@RemoveShowFromCollection"/>
        }
    </MudContainer>
}

@if (_data.SeasonCards.Any())
{
    <MudText GutterBottom="true" Typo="Typo.h4">Television Seasons</MudText>

    <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
        @foreach (TelevisionSeasonCardViewModel card in _data.SeasonCards)
        {
            <MediaCard Data="@card"
                       Link="@($"/media/tv/seasons/{card.TelevisionSeasonId}")"
                       Title="@card.ShowTitle"
                       Subtitle="@card.Title"
                       DeleteClicked="@RemoveSeasonFromCollection"/>
        }
    </MudContainer>
}

@if (_data.EpisodeCards.Any())
{
    <MudText GutterBottom="true" Typo="Typo.h4">Television Episodes</MudText>

    <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
        @foreach (TelevisionEpisodeCardViewModel card in _data.EpisodeCards.OrderBy(e => e.Aired))
        {
            <MediaCard Data="@card"
                       Link="@($"/media/tv/episodes/{card.EpisodeId}")"
                       Title="@card.ShowTitle"
                       Subtitle="@card.Title"
                       ContainerClass="media-card-episode-container mx-2"
                       CardClass="media-card-episode"
                       DeleteClicked="@RemoveEpisodeFromCollection"
                       ArtworkKind="@ArtworkKind.Thumbnail"/>
        }
    </MudContainer>
}

@code {

    [Parameter]
    public int Id { get; set; }

    private CollectionCardResultsViewModel _data;

    protected override async Task OnParametersSetAsync() => await RefreshData();

    private async Task RefreshData()
    {
        Either<BaseError, CollectionCardResultsViewModel> maybeResult =
            await Mediator.Send(new GetCollectionCards(Id));

        maybeResult.Match(
            result => _data = result,
            error => NavigationManager.NavigateTo("404"));
    }

    private async Task RemoveMovieFromCollection(MediaCardViewModel vm)
    {
        if (vm is MovieCardViewModel movie)
        {
            var request = new RemoveItemsFromCollection(Id)
            {
                MediaItemIds = new List<int> { movie.MovieId }
            };

            await RemoveItemsWithConfirmation("movie", $"{movie.Title} ({movie.Subtitle})", request);
        }
    }

    private async Task RemoveShowFromCollection(MediaCardViewModel vm)
    {
        if (vm is TelevisionShowCardViewModel show)
        {
            var request = new RemoveItemsFromCollection(Id)
            {
                MediaItemIds = new List<int> { show.TelevisionShowId }
            };

            await RemoveItemsWithConfirmation("show", $"{show.Title} ({show.Subtitle})", request);
        }
    }

    private async Task RemoveSeasonFromCollection(MediaCardViewModel vm)
    {
        if (vm is TelevisionSeasonCardViewModel season)
        {
            var request = new RemoveItemsFromCollection(Id)
            {
                MediaItemIds = new List<int> { season.TelevisionSeasonId }
            };

            await RemoveItemsWithConfirmation("season", $"{season.ShowTitle} - {season.Title}", request);
        }
    }

    private async Task RemoveEpisodeFromCollection(MediaCardViewModel vm)
    {
        if (vm is TelevisionEpisodeCardViewModel episode)
        {
            var request = new RemoveItemsFromCollection(Id)
            {
                MediaItemIds = new List<int> { episode.EpisodeId }
            };

            await RemoveItemsWithConfirmation("episode", $"{episode.ShowTitle} - {episode.Title}", request);
        }
    }

    private async Task RemoveItemsWithConfirmation(
        string entityType,
        string entityName,
        RemoveItemsFromCollection request)
    {
        var parameters = new DialogParameters { { "EntityType", entityType }, { "EntityName", entityName } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<RemoveFromCollectionDialog>("Remove From Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Mediator.Send(request);
            await RefreshData();
        }
    }

}