@page "/media/collections"
@using ErsatzTV.Application.Configuration
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Extensions
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="media/collections/add">
            Add Collection
        </MudButton>
        <MudButton Class="ml-3" Variant="Variant.Filled" Color="Color.Primary" Href="media/multi-collections/add">
            Add Multi Collection
        </MudButton>
    </div>
    <MudTable Class="mt-4"
              Hover="true"
              @bind-RowsPerPage="@_collectionsRowsPerPage"
              ServerData="@(new Func<TableState, CancellationToken, Task<TableData<MediaCollectionViewModel>>>(ServerReloadCollections))"
              Dense="true"
              @ref="_collectionsTable">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Collections</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Href="@($"media/collections/{context.Id}")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteMediaCollection(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
    <MudTable Class="mt-4"
              Hover="true"
              @bind-RowsPerPage="@_multiCollectionsRowsPerPage"
              ServerData="@(new Func<TableState, CancellationToken, Task<TableData<MultiCollectionViewModel>>>(ServerReloadMultiCollections))"
              Dense="true"
              @ref="_multiCollectionsTable">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Multi Collections</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Href="@($"media/multi-collections/{context.Id}/edit")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteMultiCollection(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
    <MudTable Class="mt-4"
              Hover="true"
              @bind-RowsPerPage="@_smartCollectionsRowsPerPage"
              ServerData="@(new Func<TableState, CancellationToken, Task<TableData<SmartCollectionViewModel>>>(ServerReloadSmartCollections))"
              Dense="true"
              @ref="_smartCollectionsTable">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Smart Collections</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Href="@context.Query.GetRelativeSearchQuery()">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Collection">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteSmartCollection(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    private MudTable<MediaCollectionViewModel> _collectionsTable;
    private MudTable<MultiCollectionViewModel> _multiCollectionsTable;
    private MudTable<SmartCollectionViewModel> _smartCollectionsTable;

    private int _collectionsRowsPerPage = 10;
    private int _multiCollectionsRowsPerPage = 10;
    private int _smartCollectionsRowsPerPage = 10;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _collectionsRowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.CollectionsPageSize), _cts.Token)
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));

        _multiCollectionsRowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.MultiCollectionsPageSize), _cts.Token)
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));

        _smartCollectionsRowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.SmartCollectionsPageSize), _cts.Token)
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
    }

    private async Task DeleteMediaCollection(MediaCollectionViewModel collection)
    {
        var parameters = new DialogParameters { { "EntityType", "collection" }, { "EntityName", collection.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteCollection(collection.Id), _cts.Token);
            if (_collectionsTable != null)
            {
                await _collectionsTable.ReloadServerData();
            }
        }
    }

    private async Task DeleteMultiCollection(MultiCollectionViewModel collection)
    {
        var parameters = new DialogParameters { { "EntityType", "multi collection" }, { "EntityName", collection.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Multi Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteMultiCollection(collection.Id), _cts.Token);
            if (_multiCollectionsTable != null)
            {
                await _multiCollectionsTable.ReloadServerData();
            }
        }
    }

    private async Task DeleteSmartCollection(SmartCollectionViewModel collection)
    {
        var parameters = new DialogParameters { { "EntityType", "smart collection" }, { "EntityName", collection.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Smart Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteSmartCollection(collection.Id), _cts.Token);
            if (_smartCollectionsTable != null)
            {
                await _smartCollectionsTable.ReloadServerData();
            }
        }
    }

    private async Task<TableData<MediaCollectionViewModel>> ServerReloadCollections(TableState state, CancellationToken cancellationToken)
    {
        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.CollectionsPageSize, state.PageSize.ToString()), _cts.Token);

        PagedMediaCollectionsViewModel data = await Mediator.Send(new GetPagedCollections(state.Page, state.PageSize), _cts.Token);
        return new TableData<MediaCollectionViewModel> { TotalItems = data.TotalCount, Items = data.Page };
    }

    private async Task<TableData<MultiCollectionViewModel>> ServerReloadMultiCollections(TableState state, CancellationToken cancellationToken)
    {
        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.MultiCollectionsPageSize, state.PageSize.ToString()), _cts.Token);

        PagedMultiCollectionsViewModel data = await Mediator.Send(new GetPagedMultiCollections(state.Page, state.PageSize), _cts.Token);
        return new TableData<MultiCollectionViewModel> { TotalItems = data.TotalCount, Items = data.Page };
    }

    private async Task<TableData<SmartCollectionViewModel>> ServerReloadSmartCollections(TableState state, CancellationToken cancellationToken)
    {
        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.SmartCollectionsPageSize, state.PageSize.ToString()), _cts.Token);

        PagedSmartCollectionsViewModel data = await Mediator.Send(new GetPagedSmartCollections(state.Page, state.PageSize), _cts.Token);
        return new TableData<SmartCollectionViewModel> { TotalItems = data.TotalCount, Items = data.Page };
    }

}