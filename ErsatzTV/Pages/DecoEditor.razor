@page "/decos/{Id:int}"
@using ErsatzTV.Application.Artists
@using ErsatzTV.Application.Graphics
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.Scheduling
@using ErsatzTV.Application.Television
@using ErsatzTV.Application.Watermarks
@using ErsatzTV.Core.Domain.Scheduling
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<DecoEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudForm Style="max-height: 100%">
<MudPaper Square="true" Style="display: flex; height: 64px; min-height: 64px; width: 100%; z-index: 100; align-items: center">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => SaveChanges())" Class="ml-6" StartIcon="@Icons.Material.Filled.Save">
        Save Changes
    </MudButton>
</MudPaper>
<div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
<MudText Typo="Typo.h5" Class="mb-2">Deco</MudText>
<MudDivider Class="mb-6"/>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Deco Group Name</MudText>
    </div>
    <MudTextField @bind-Value="_deco.GroupName" Disabled="true"/>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Deco Name</MudText>
    </div>
    <MudTextField @bind-Value="_deco.Name" For="@(() => _deco.Name)"/>
</MudStack>
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Watermark</MudText>
<MudDivider Class="mb-6"/>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Watermark Mode</MudText>
    </div>
    <MudSelect @bind-Value="_deco.WatermarkMode" For="@(() => _deco.WatermarkMode)">
        <MudSelectItem Value="DecoMode.Inherit">Inherit</MudSelectItem>
        <MudSelectItem Value="DecoMode.Disable">Disable</MudSelectItem>
        <MudSelectItem Value="DecoMode.Override">Replace</MudSelectItem>
        <MudSelectItem Value="DecoMode.Merge">Merge</MudSelectItem>
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Watermark</MudText>
    </div>
    <MudSelect T="WatermarkViewModel"
               @bind-SelectedValues="_deco.Watermarks"
               Disabled="@(_deco.WatermarkMode is not (DecoMode.Override or DecoMode.Merge))"
               ToStringFunc="@(wm => wm?.Name)"
               Clearable="true"
               MultiSelection="true">
        @foreach (WatermarkViewModel watermark in _watermarks)
        {
            <MudSelectItem Value="@watermark">@watermark.Name</MudSelectItem>
        }
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Use Watermark During Filler</MudText>
    </div>
    <MudCheckBox T="bool"
                 Disabled="@(_deco.WatermarkMode != DecoMode.Override)"
                 @bind-Value="_deco.UseWatermarkDuringFiller"
                 Dense="true"/>
</MudStack>
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Graphics Elements</MudText>
<MudDivider Class="mb-6"/>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Graphics Elements Mode</MudText>
    </div>
    <MudSelect @bind-Value="_deco.GraphicsElementsMode" For="@(() => _deco.GraphicsElementsMode)">
        <MudSelectItem Value="DecoMode.Inherit">Inherit</MudSelectItem>
        <MudSelectItem Value="DecoMode.Disable">Disable</MudSelectItem>
        <MudSelectItem Value="DecoMode.Override">Replace</MudSelectItem>
        <MudSelectItem Value="DecoMode.Merge">Merge</MudSelectItem>
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Graphics Elements</MudText>
    </div>
    <MudSelect T="GraphicsElementViewModel"
               @bind-SelectedValues="_deco.GraphicsElements"
               Disabled="@(_deco.GraphicsElementsMode is not (DecoMode.Override or DecoMode.Merge))"
               ToStringFunc="@(ge => ge?.Name)"
               Clearable="true"
               MultiSelection="true">
        @foreach (GraphicsElementViewModel graphicsElement in _graphicsElements)
        {
            <MudSelectItem Value="@graphicsElement">@graphicsElement.Name</MudSelectItem>
        }
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Use Graphics Elements During Filler</MudText>
    </div>
    <MudCheckBox T="bool"
                 Disabled="@(_deco.GraphicsElementsMode != DecoMode.Override)"
                 @bind-Value="_deco.UseGraphicsElementsDuringFiller"
                 Dense="true"/>
</MudStack>
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Break Content</MudText>
<MudDivider Class="mb-6"/>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Break Content Mode</MudText>
    </div>
    <MudSelect @bind-Value="_deco.BreakContentMode" For="@(() => _deco.BreakContentMode)">
        <MudSelectItem Value="DecoMode.Inherit">Inherit</MudSelectItem>
        <MudSelectItem Value="DecoMode.Disable">Disable</MudSelectItem>
        <MudSelectItem Value="DecoMode.Override">Override</MudSelectItem>
    </MudSelect>
</MudStack>
@if (_deco.BreakContentMode is DecoMode.Merge or DecoMode.Override)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex"></div>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddBreakContent())" StartIcon="@Icons.Material.Filled.Add">
            Add Break Content
        </MudButton>
    </MudStack>
    <MudText Typo="Typo.h5" Class="mt-10 mb-2">Break Content Items</MudText>
    <MudDivider Class="mb-6"/>
    <MudTable Class="mt-6" Hover="true" Items="_deco.BreakContent.OrderBy(i => i.Index)" Dense="true" @bind-SelectedItem="_selectedBreakContent" RowClassFunc="@SelectedRowClassFunc">
        <ColGroup>
            <MudHidden Breakpoint="Breakpoint.Xs">
                <col/>
                <col/>
                <col/>
                <col style="width: 60px;"/>
            </MudHidden>
        </ColGroup>
        <HeaderContent>
            <MudTh>Type</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Placement</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Type">@context.CollectionType.ToString()</MudTd>
            <MudTd DataLabel="Name">@context.CollectionName</MudTd>
            <MudTd DataLabel="Placement">
                @(context.Placement switch {
                    DecoBreakPlacement.BlockStart => "Block Start",
                    DecoBreakPlacement.BlockFinish => "Block Finish",
                    DecoBreakPlacement.BetweenBlockItems => "Between Block Items",
                    DecoBreakPlacement.ChapterMarkers => "At Chapter Markers",
                    _ => string.Empty
                })
            </MudTd>
            <MudTd>
                <div class="d-flex">
                    @* <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" *@
                    @*                OnClick="@(_ => CopyItem(context))"> *@
                    @* </MudIconButton> *@
                    @* <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" *@
                    @*                OnClick="@(_ => MoveItemUp(context))" *@
                    @*                Disabled="@(_block.Items.All(x => x.Index >= context.Index))"> *@
                    @* </MudIconButton> *@
                    @* <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" *@
                    @*                OnClick="@(_ => MoveItemDown(context))" *@
                    @*                Disabled="@(_block.Items.All(x => x.Index <= context.Index))"> *@
                    @* </MudIconButton> *@
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   OnClick="@(_ => RemoveBreakContent(context))">
                    </MudIconButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Default Filler</MudText>
<MudDivider Class="mb-6"/>
<MudText Typo="Typo.body2" Class="mb-6">After all blocks have been scheduled, a second pass will be made to fill unscheduled time using random items from this collection.</MudText>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Default Filler Mode</MudText>
    </div>
    <MudSelect @bind-Value="_deco.DefaultFillerMode" For="@(() => _deco.DefaultFillerMode)">
        <MudSelectItem Value="DecoMode.Inherit">Inherit</MudSelectItem>
        <MudSelectItem Value="DecoMode.Disable">Disable</MudSelectItem>
        <MudSelectItem Value="DecoMode.Override">Override</MudSelectItem>
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Default Filler Collection Type</MudText>
    </div>
    <MudSelect Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
               @bind-Value="_deco.DefaultFillerCollectionType"
               For="@(() => _deco.DefaultFillerCollectionType)">
        <MudSelectItem Value="CollectionType.Collection">Collection</MudSelectItem>
        <MudSelectItem Value="CollectionType.TelevisionShow">Television Show</MudSelectItem>
        <MudSelectItem Value="CollectionType.TelevisionSeason">Television Season</MudSelectItem>
        <MudSelectItem Value="CollectionType.Artist">Artist</MudSelectItem>
        <MudSelectItem Value="CollectionType.MultiCollection">Multi Collection</MudSelectItem>
        <MudSelectItem Value="CollectionType.SmartCollection">Smart Collection</MudSelectItem>
    </MudSelect>
</MudStack>
@if (_deco.DefaultFillerCollectionType == CollectionType.Collection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Collection</MudText>
        </div>
        <MudSelect T="MediaCollectionViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerCollection">
            @foreach (MediaCollectionViewModel collection in _mediaCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DefaultFillerCollectionType == CollectionType.MultiCollection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Multi Collection</MudText>
        </div>
        <MudSelect T="MultiCollectionViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerMultiCollection">
            @foreach (MultiCollectionViewModel collection in _multiCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DefaultFillerCollectionType == CollectionType.SmartCollection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Smart Collection</MudText>
        </div>
        <MudSelect T="SmartCollectionViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerSmartCollection">
            @foreach (SmartCollectionViewModel collection in _smartCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DefaultFillerCollectionType == CollectionType.TelevisionShow)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Television Show</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerMediaItem">
            @foreach (NamedMediaItemViewModel show in _televisionShows)
            {
                <MudSelectItem Value="@show">@show.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DefaultFillerCollectionType == CollectionType.TelevisionSeason)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Television Season</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerMediaItem">
            @foreach (NamedMediaItemViewModel season in _televisionSeasons)
            {
                <MudSelectItem Value="@season">@season.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DefaultFillerCollectionType == CollectionType.Artist)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Artist</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                   @bind-value="_deco.DefaultFillerMediaItem">
            @foreach (NamedMediaItemViewModel artist in _artists)
            {
                <MudSelectItem Value="@artist">@artist.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Trim To Fit</MudText>
    </div>
    <MudCheckBox T="bool"
                 Disabled="@(_deco.DefaultFillerMode != DecoMode.Override)"
                 @bind-Value="_deco.DefaultFillerTrimToFit"
                 Color="Color.Primary"
                 Dense="true"/>
</MudStack>
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Dead Air Fallback</MudText>
<MudDivider Class="mb-6"/>
<MudText Typo="Typo.body2">When no playout item is found for the current time, *one* item will be randomly selected from this collection and looped and trimmed to exactly fit until the start of the next playout item.</MudText>
<MudText Typo="Typo.body2" Class="mb-6 mt-3">This replaces the "Channel is Offline" image that would otherwise display.</MudText>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Dead Air Fallback Mode</MudText>
    </div>
    <MudSelect @bind-Value="_deco.DeadAirFallbackMode" For="@(() => _deco.DeadAirFallbackMode)">
        <MudSelectItem Value="DecoMode.Inherit">Inherit</MudSelectItem>
        <MudSelectItem Value="DecoMode.Disable">Disable</MudSelectItem>
        <MudSelectItem Value="DecoMode.Override">Override</MudSelectItem>
    </MudSelect>
</MudStack>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Dead Air Fallback Collection Type</MudText>
    </div>
    <MudSelect Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
               @bind-Value="_deco.DeadAirFallbackCollectionType"
               For="@(() => _deco.DeadAirFallbackCollectionType)">
        <MudSelectItem Value="CollectionType.Collection">Collection</MudSelectItem>
        <MudSelectItem Value="CollectionType.TelevisionShow">Television Show</MudSelectItem>
        <MudSelectItem Value="CollectionType.TelevisionSeason">Television Season</MudSelectItem>
        <MudSelectItem Value="CollectionType.Artist">Artist</MudSelectItem>
        <MudSelectItem Value="CollectionType.MultiCollection">Multi Collection</MudSelectItem>
        <MudSelectItem Value="CollectionType.SmartCollection">Smart Collection</MudSelectItem>
    </MudSelect>
</MudStack>
@if (_deco.DeadAirFallbackCollectionType == CollectionType.Collection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Collection</MudText>
        </div>
        <MudSelect T="MediaCollectionViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackCollection">
            @foreach (MediaCollectionViewModel collection in _mediaCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DeadAirFallbackCollectionType == CollectionType.MultiCollection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Multi Collection</MudText>
        </div>
        <MudSelect T="MultiCollectionViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackMultiCollection">
            @foreach (MultiCollectionViewModel collection in _multiCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DeadAirFallbackCollectionType == CollectionType.SmartCollection)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Smart Collection</MudText>
        </div>
        <MudSelect T="SmartCollectionViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackSmartCollection">
            @foreach (SmartCollectionViewModel collection in _smartCollections)
            {
                <MudSelectItem Value="@collection">@collection.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DeadAirFallbackCollectionType == CollectionType.TelevisionShow)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Television Show</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackMediaItem">
            @foreach (NamedMediaItemViewModel show in _televisionShows)
            {
                <MudSelectItem Value="@show">@show.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DeadAirFallbackCollectionType == CollectionType.TelevisionSeason)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Television Season</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackMediaItem">
            @foreach (NamedMediaItemViewModel season in _televisionSeasons)
            {
                <MudSelectItem Value="@season">@season.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
@if (_deco.DeadAirFallbackCollectionType == CollectionType.Artist)
{
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Artist</MudText>
        </div>
        <MudSelect T="NamedMediaItemViewModel"
                   Disabled="@(_deco.DeadAirFallbackMode != DecoMode.Override)"
                   @bind-value="_deco.DeadAirFallbackMediaItem">
            @foreach (NamedMediaItemViewModel artist in _artists)
            {
                <MudSelectItem Value="@artist">@artist.Name</MudSelectItem>
            }
        </MudSelect>
    </MudStack>
}
</MudContainer>
</div>
</MudForm>

@code {
    private CancellationTokenSource _cts;

    [Parameter]
    public int Id { get; set; }

    private DecoEditViewModel _deco = new();

    private List<WatermarkViewModel> _watermarks = [];
    private List<GraphicsElementViewModel> _graphicsElements = [];

    private List<MediaCollectionViewModel> _mediaCollections = [];
    private List<MultiCollectionViewModel> _multiCollections = [];
    private List<SmartCollectionViewModel> _smartCollections = [];
    private List<NamedMediaItemViewModel> _televisionShows = [];
    private List<NamedMediaItemViewModel> _televisionSeasons = [];
    private List<NamedMediaItemViewModel> _artists = [];

    private DecoBreakContentEditViewModel _selectedBreakContent;


    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            _watermarks = await Mediator.Send(new GetAllWatermarks(), token);
            _graphicsElements = await Mediator.Send(new GetAllGraphicsElements(), token);

            _mediaCollections = await Mediator.Send(new GetAllCollections(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
            _multiCollections = await Mediator.Send(new GetAllMultiCollections(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
            _smartCollections = await Mediator.Send(new GetAllSmartCollections(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
            _televisionShows = await Mediator.Send(new GetAllTelevisionShows(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
            _televisionSeasons = await Mediator.Send(new GetAllTelevisionSeasons(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
            _artists = await Mediator.Send(new GetAllArtists(), token)
                .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());

            Option<DecoViewModel> maybeDeco = await Mediator.Send(new GetDecoById(Id), token);
            if (maybeDeco.IsNone)
            {
                NavigationManager.NavigateTo("decos");
                return;
            }

            foreach (DecoViewModel deco in maybeDeco)
            {
                _deco = new DecoEditViewModel
                {
                    Name = deco.Name,
                    DecoGroupId = deco.DecoGroupId,
                    GroupName = deco.DecoGroupName,
                    WatermarkMode = deco.WatermarkMode,
                    Watermarks = deco.Watermarks,
                    UseWatermarkDuringFiller = deco.UseWatermarkDuringFiller,

                    GraphicsElementsMode = deco.GraphicsElementsMode,
                    GraphicsElements = deco.GraphicsElements,
                    UseGraphicsElementsDuringFiller = deco.UseGraphicsElementsDuringFiller,

                    BreakContentMode = deco.BreakContentMode,

                    DefaultFillerMode = deco.DefaultFillerMode,
                    DefaultFillerCollectionType = deco.DefaultFillerCollectionType,
                    DefaultFillerCollection = deco.DefaultFillerCollectionId.HasValue
                        ? _mediaCollections.Find(c => c.Id == deco.DefaultFillerCollectionId!.Value)
                        : null,
                    DefaultFillerMediaItem = deco.DefaultFillerMediaItemId.HasValue
                        ? _televisionShows.Append(_televisionSeasons).Append(_artists).ToList()
                            .Find(vm => vm.MediaItemId == deco.DefaultFillerMediaItemId!.Value)
                        : null,
                    DefaultFillerMultiCollection = deco.DefaultFillerMultiCollectionId.HasValue
                        ? _multiCollections.Find(c => c.Id == deco.DefaultFillerMultiCollectionId!.Value)
                        : null,
                    DefaultFillerSmartCollection = deco.DefaultFillerSmartCollectionId.HasValue
                        ? _smartCollections.Find(c => c.Id == deco.DefaultFillerSmartCollectionId!.Value)
                        : null,
                    DefaultFillerTrimToFit = deco.DefaultFillerTrimToFit,

                    DeadAirFallbackMode = deco.DeadAirFallbackMode,
                    DeadAirFallbackCollectionType = deco.DeadAirFallbackCollectionType,
                    DeadAirFallbackCollection = deco.DeadAirFallbackCollectionId.HasValue
                        ? _mediaCollections.Find(c => c.Id == deco.DeadAirFallbackCollectionId!.Value)
                        : null,
                    DeadAirFallbackMediaItem = deco.DeadAirFallbackMediaItemId.HasValue
                        ? _televisionShows.Append(_televisionSeasons).Append(_artists).ToList()
                            .Find(vm => vm.MediaItemId == deco.DeadAirFallbackMediaItemId!.Value)
                        : null,
                    DeadAirFallbackMultiCollection = deco.DeadAirFallbackMultiCollectionId.HasValue
                        ? _multiCollections.Find(c => c.Id == deco.DeadAirFallbackMultiCollectionId!.Value)
                        : null,
                    DeadAirFallbackSmartCollection = deco.DeadAirFallbackSmartCollectionId.HasValue
                        ? _smartCollections.Find(c => c.Id == deco.DeadAirFallbackSmartCollectionId!.Value)
                        : null
                };
            }
        }
        catch (OperationCanceledException)
        {
            // do nothing
        }
    }

    private async Task SaveChanges()
    {
        var request = new UpdateDeco(
            Id,
            _deco.DecoGroupId,
            _deco.Name,
            _deco.WatermarkMode,
            _deco.Watermarks.Map(wm => wm.Id).ToList(),
            _deco.UseWatermarkDuringFiller,
            _deco.GraphicsElementsMode,
            _deco.GraphicsElements.Map(ge => ge.Id).ToList(),
            _deco.UseGraphicsElementsDuringFiller,
            _deco.BreakContentMode,
            _deco.DefaultFillerMode,
            _deco.DefaultFillerCollectionType,
            _deco.DefaultFillerCollection?.Id,
            _deco.DefaultFillerMediaItem?.MediaItemId,
            _deco.DefaultFillerMultiCollection?.Id,
            _deco.DefaultFillerSmartCollection?.Id,
            _deco.DefaultFillerTrimToFit,
            _deco.DeadAirFallbackMode,
            _deco.DeadAirFallbackCollectionType,
            _deco.DeadAirFallbackCollection?.Id,
            _deco.DeadAirFallbackMediaItem?.MediaItemId,
            _deco.DeadAirFallbackMultiCollection?.Id,
            _deco.DeadAirFallbackSmartCollection?.Id);

        Seq<BaseError> errorMessages = await Mediator
            .Send(request, _cts.Token)
            .Map(e => e.LeftToSeq());

        errorMessages.HeadOrNone().Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving deco: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving deco: {Error}", error.Value);
            },
            () => NavigationManager.NavigateTo("decos"));
    }

    private void AddBreakContent()
    {
        var item = new DecoBreakContentEditViewModel
        {
            Index = _deco.BreakContent.Map(i => i.Index).DefaultIfEmpty().Max() + 1,
            CollectionType = CollectionType.Collection,
            Collection = null,
            Placement = DecoBreakPlacement.BlockStart
        };

        _deco.BreakContent.Add(item);
    }

    private void RemoveBreakContent(DecoBreakContentEditViewModel item)
    {
        _deco.BreakContent.Remove(item);
    }

    private string SelectedRowClassFunc(DecoBreakContentEditViewModel element, int rowNumber) => _selectedBreakContent != null && _selectedBreakContent == element ? "selected" : string.Empty;
}
