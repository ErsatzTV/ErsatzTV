@page "/decos"
@using ErsatzTV.Application.Scheduling
@using ErsatzTV.Application.Tree
@implements IDisposable
@inject ILogger<Decos> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService Dialog

<MudForm Style="max-height: 100%">
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">Deco Groups</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Deco Group Name</MudText>
                </div>
                <MudTextField @bind-Value="_decoGroupName" For="@(() => _decoGroupName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddDecoGroup())" StartIcon="@Icons.Material.Filled.Add">
                    Add Deco Group
                </MudButton>
            </MudStack>
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">Decos</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Deco Group</MudText>
                </div>
                <MudSelect @bind-Value="_selectedDecoGroup">
                    @foreach (DecoGroupViewModel decoGroup in _decoGroups)
                    {
                        <MudSelectItem Value="@decoGroup">@decoGroup.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Deco Name</MudText>
                </div>
                <MudTextField @bind-Value="_decoName" For="@(() => _decoName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddDeco())" StartIcon="@Icons.Material.Filled.Add">
                    Add Deco
                </MudButton>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudTreeView T="DecoTreeItemViewModel" Items="@_treeItems" Hover="true" Style="width: 100%">
                    <ItemTemplate Context="item">
                        <MudTreeViewItem T="DecoTreeItemViewModel" Items="@item.Value!.TreeItems" Icon="@item.Value.Icon" Value="@item.Value">
                            <BodyContent>
                                <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                    <MudGrid Justify="Justify.FlexStart">
                                        <MudItem xs="5">
                                            <MudText>@item.Value.Text</MudText>
                                        </MudItem>
                                    </MudGrid>
                                    <div style="justify-self: end;">
                                        @foreach (int decoId in Optional(item.Value.DecoId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" Href="@($"decos/{decoId}")"/>
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" OnClick="@(_ => DeleteItem(item.Value))"/>
                                    </div>
                                </div>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </MudStack>
        </MudContainer>
    </div>
</MudForm>

@code {
    private readonly CancellationTokenSource _cts = new();
    private readonly List<TreeItemData<DecoTreeItemViewModel>> _treeItems = [];
    private List<DecoGroupViewModel> _decoGroups = [];
    private DecoGroupViewModel _selectedDecoGroup;
    private string _decoGroupName;
    private string _decoName;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadDecoTree();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadDecoTree()
    {
        _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);

        _treeItems.Clear();
        TreeViewModel tree = await Mediator.Send(new GetDecoTree(), _cts.Token);
        foreach (TreeGroupViewModel group in tree.Groups)
        {
            _treeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(group) });
        }
    }

    private async Task AddDecoGroup()
    {
        if (!string.IsNullOrWhiteSpace(_decoGroupName))
        {
            Either<BaseError, DecoGroupViewModel> result = await Mediator.Send(new CreateDecoGroup(_decoGroupName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding deco group: {Error}", error.Value);
            }

            foreach (DecoGroupViewModel decoGroup in result.RightToSeq())
            {
                _treeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(decoGroup) });
                _treeItems.Sort((x, y) => string.Compare(x.Value?.Text, y.Value?.Text, StringComparison.CurrentCulture));
                _decoGroupName = null;

                _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task AddDeco()
    {
        if (_selectedDecoGroup is not null && !string.IsNullOrWhiteSpace(_decoName))
        {
            Either<BaseError, DecoViewModel> result = await Mediator.Send(new CreateDeco(_selectedDecoGroup.Id, _decoName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding deco: {Error}", error.Value);
            }

            foreach (DecoViewModel deco in result.RightToSeq())
            {
                foreach (DecoTreeItemViewModel item in _treeItems.Map(i => i.Value).Where(item => item.DecoGroupId == _selectedDecoGroup.Id))
                {
                    item.TreeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(deco) });
                    item.TreeItems.Sort((x, y) => string.Compare(x.Value?.Text, y.Value?.Text, StringComparison.CurrentCulture));
                }

                _decoName = null;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task DeleteItem(DecoTreeItemViewModel treeItem)
    {
        foreach (int decoGroupId in Optional(treeItem.DecoGroupId))
        {
            var parameters = new DialogParameters { { "EntityType", "deco group" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Deco Group", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteDecoGroup(decoGroupId), _cts.Token);
                _treeItems.RemoveAll(i => i.Value?.DecoGroupId == decoGroupId);
                if (_selectedDecoGroup?.Id == decoGroupId)
                {
                    _selectedDecoGroup = null;
                }

                _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }

        foreach (int decoId in Optional(treeItem.DecoId))
        {
            var parameters = new DialogParameters { { "EntityType", "deco" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Deco", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteDeco(decoId), _cts.Token);
                foreach (DecoTreeItemViewModel parent in _treeItems.Map(i => i.Value))
                {
                    parent.TreeItems.RemoveAll(i => i.Value == treeItem);
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

}