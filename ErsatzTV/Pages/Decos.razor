@page "/decos"
@using ErsatzTV.Application.Scheduling
@implements IDisposable
@inject ILogger<Decos> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService Dialog

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudText Typo="Typo.h4" Class="mb-4">Decos</MudText>
    <MudGrid>
        <MudItem xs="4">
            <div style="max-width: 400px;" class="mr-4">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Class="mt-3 mx-3" Label="Deco Group Name" @bind-Value="_decoGroupName" For="@(() => _decoGroupName)"/>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddDecoGroup())" Class="ml-4 mb-4">
                            Add Deco Group
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </div>
        </MudItem>
        <MudItem xs="4">
            <div style="max-width: 400px;" class="mb-6">
                <MudCard>
                    <MudCardContent>
                        <div class="mx-4">
                            <MudSelect Label="Deco Group" @bind-Value="_selectedDecoGroup" Class="mt-3">
                                @foreach (DecoGroupViewModel decoGroup in _decoGroups)
                                {
                                    <MudSelectItem Value="@decoGroup">@decoGroup.Name</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField Class="mt-3" Label="Deco Name" @bind-Value="_decoName" For="@(() => _decoName)"/>
                        </div>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddDeco())" Class="ml-4 mb-4">
                            Add Deco
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </div>
        </MudItem>
        <MudItem xs="8">
            <MudCard>
                <MudTreeView T="DecoTreeItemViewModel" ServerData="LoadServerData" Items="@TreeItems" Hover="true" ExpandOnClick="true">
                    <ItemTemplate Context="item">
                        <MudTreeViewItem T="DecoTreeItemViewModel" Items="@item.Value!.TreeItems" Icon="@item.Value.Icon" CanExpand="@item.Value.CanExpand" Value="@item.Value">
                            <BodyContent>
                                <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                    <MudGrid Justify="Justify.FlexStart">
                                        <MudItem xs="5">
                                            <MudText>@item.Value.Text</MudText>
                                        </MudItem>
                                        @if (!string.IsNullOrWhiteSpace(item.Value.EndText))
                                        {
                                            <MudItem xs="6">
                                                <MudText>@item.Value.EndText</MudText>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                    <div style="justify-self: end;">
                                        @foreach (int decoId in Optional(item.Value.DecoId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" Href="@($"decos/{decoId}")"/>
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" OnClick="@(_ => DeleteItem(item.Value))"/>
                                    </div>
                                </div>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();
    private List<TreeItemData<DecoTreeItemViewModel>> TreeItems { get; set; } = [];
    private List<DecoGroupViewModel> _decoGroups = [];
    private DecoGroupViewModel _selectedDecoGroup;
    private string _decoGroupName;
    private string _decoName;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadDecoGroups();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadDecoGroups()
    {
        _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);
        TreeItems = _decoGroups.Map(g => new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(g) }).ToList();
    }

    private async Task AddDecoGroup()
    {
        if (!string.IsNullOrWhiteSpace(_decoGroupName))
        {
            Either<BaseError, DecoGroupViewModel> result = await Mediator.Send(new CreateDecoGroup(_decoGroupName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding deco group: {Error}", error.Value);
            }

            foreach (DecoGroupViewModel decoGroup in result.RightToSeq())
            {
                TreeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(decoGroup) });
                _decoGroupName = null;

                _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task AddDeco()
    {
        if (_selectedDecoGroup is not null && !string.IsNullOrWhiteSpace(_decoName))
        {
            Either<BaseError, DecoViewModel> result = await Mediator.Send(new CreateDeco(_selectedDecoGroup.Id, _decoName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding deco: {Error}", error.Value);
            }

            foreach (DecoViewModel deco in result.RightToSeq())
            {
                foreach (DecoTreeItemViewModel item in TreeItems.Where(item => item.Value!.DecoGroupId == _selectedDecoGroup.Id).Map(i => i.Value))
                {
                    item.TreeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(deco) });
                }

                _decoName = null;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task<IReadOnlyCollection<TreeItemData<DecoTreeItemViewModel>>> LoadServerData(DecoTreeItemViewModel parentNode)
    {
        foreach (int decoGroupId in Optional(parentNode.DecoGroupId))
        {
            List<DecoViewModel> result = await Mediator.Send(new GetDecosByDecoGroupId(decoGroupId), _cts.Token);
            foreach (DecoViewModel deco in result)
            {
                parentNode.TreeItems.Add(new TreeItemData<DecoTreeItemViewModel> { Value = new DecoTreeItemViewModel(deco) });
            }
        }

        return parentNode.TreeItems;
    }

    private async Task DeleteItem(DecoTreeItemViewModel treeItem)
    {
        foreach (int decoGroupId in Optional(treeItem.DecoGroupId))
        {
            var parameters = new DialogParameters { { "EntityType", "deco group" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Deco Group", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteDecoGroup(decoGroupId), _cts.Token);
                TreeItems.RemoveAll(i => i.Value?.DecoGroupId == decoGroupId);

                _decoGroups = await Mediator.Send(new GetAllDecoGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }

        foreach (int decoId in Optional(treeItem.DecoId))
        {
            var parameters = new DialogParameters { { "EntityType", "deco" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Deco", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteDeco(decoId), _cts.Token);
                foreach (DecoTreeItemViewModel parent in TreeItems.Map(i => i.Value))
                {
                    parent.TreeItems.RemoveAll(ti => ti.Value == treeItem);
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

}