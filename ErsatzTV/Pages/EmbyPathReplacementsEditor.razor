@page "/media/sources/emby/{Id:int}/paths"
@using ErsatzTV.Application.Emby
@using ErsatzTV.Application.MediaSources
@implements IDisposable
@inject IMediator Mediator

<RemoteMediaSourcePathReplacementsEditor
    Id="@Id"
    Name="Emby"
    GetMediaSourceById="GetMediaSourceById"
    GetUpdatePathReplacementsRequest="GetUpdatePathReplacementsRequest"
    GetPathReplacementsBySourceId="GetPathReplacementsBySourceId"/>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int Id { get; set; }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    private Task<Option<RemoteMediaSourceViewModel>> GetMediaSourceById(int id) =>
        Mediator.Send(new GetEmbyMediaSourceById(Id), _cts.Token)
            .MapT(vm => new RemoteMediaSourceViewModel(vm.Id, vm.Name, vm.Address));

    private Task<List<RemoteMediaSourcePathReplacementEditViewModel>> GetPathReplacementsBySourceId(int mediaSourceId) =>
        Mediator.Send(new GetEmbyPathReplacementsBySourceId(Id), _cts.Token)
            .Map(list => list.Map(ProjectToEditViewModel).ToList());

    private RemoteMediaSourcePathReplacementEditViewModel ProjectToEditViewModel(EmbyPathReplacementViewModel item) =>
        new() { Id = item.Id, RemotePath = item.EmbyPath, LocalPath = item.LocalPath };

    private IRequest<Either<BaseError, Unit>> GetUpdatePathReplacementsRequest(List<RemoteMediaSourcePathReplacementEditViewModel> pathReplacements)
    {
        var items = pathReplacements
            .Map(item => new EmbyPathReplacementItem(item.Id, item.RemotePath, item.LocalPath))
            .ToList();

        return new UpdateEmbyPathReplacements(Id, items);
    }

}