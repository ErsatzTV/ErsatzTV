@page "/ffmpeg"
@using ErsatzTV.Application.FFmpegProfiles
@using ErsatzTV.Application.FFmpegProfiles.Commands
@using ErsatzTV.Application.FFmpegProfiles.Queries
@using Unit = LanguageExt.Unit
@inject IDialogService Dialog
@inject IMediator Mediator
@inject ILogger<FFmpeg> Logger
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">FFmpeg Settings</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudForm @bind-IsValid="@_success">
                <MudTextField T="string" Label="FFmpeg Path" @bind-Value="_ffmpegSettings.FFmpegPath" Validation="@(new Func<string, string>(ValidatePathExists))" Required="true" RequiredError="FFmpeg path is required!"/>
                <MudElement HtmlTag="div" Class="mt-3">
                    <MudTextField T="string" Label="FFprobe Path" @bind-Value="_ffmpegSettings.FFprobePath" Validation="@(new Func<string, string>(ValidatePathExists))" Required="true" RequiredError="FFprobe path is required!"/>
                </MudElement>
                <MudElement HtmlTag="div" Class="mt-3">
                    <MudSelect Label="Default Profile" @bind-Value="_ffmpegSettings.DefaultFFmpegProfileId" For="@(() => _ffmpegSettings.DefaultFFmpegProfileId)">
                        @foreach (FFmpegProfileViewModel profile in _ffmpegProfiles)
                        {
                            <MudSelectItem Value="@profile.Id">@profile.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudElement>
                <MudElement HtmlTag="div" Class="mt-3">
                    <MudSwitch T="bool"
                               Label="Save troubleshooting reports to disk"
                               Color="Color.Primary"
                               @bind-Checked="@_ffmpegSettings.SaveReports" />
                </MudElement>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" OnClick="@(_ => SaveSettings())">Save Settings</MudButton>
        </MudCardActions>
    </MudCard>

    <MudTable Hover="true" Items="_ffmpegProfiles" Class="mt-8">
        <ToolBarContent>
            <MudText Typo="Typo.h6">FFmpeg Profiles</MudText>
            <MudToolBarSpacer></MudToolBarSpacer>
            <MudText Color="Color.Tertiary">Colored settings will be normalized</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Transcode</MudTh>
            <MudTh>Resolution</MudTh>
            <MudTh>Video Codec</MudTh>
            <MudTh>Audio Codec</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Transcode">
                @(context.Transcode ? "Yes" : "No")
            </MudTd>
            <MudTd DataLabel="Resolution">
                <MudText Color="@(context.Transcode && context.NormalizeResolution ? Color.Tertiary : Color.Inherit)">
                    @context.Resolution.Name
                </MudText>
            </MudTd>
            <MudTd DataLabel="Video Codec">
                <MudText Color="@(context.Transcode && context.NormalizeVideoCodec ? Color.Tertiary : Color.Inherit)">
                    @context.VideoCodec
                </MudText>
            </MudTd>
            <MudTd DataLabel="Audio Codec">
                <MudText Color="@(context.Transcode && context.NormalizeAudioCodec ? Color.Tertiary : Color.Inherit)">
                    @context.AudioCodec
                </MudText>
            </MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Channel">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Link="@($"/ffmpeg/{context.Id}")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Channel">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteProfileAsync(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/ffmpeg/add" Class="mt-4">
        Add Profile
    </MudButton>
</MudContainer>

@code {

    private bool _success;
    private FFmpegSettingsViewModel _ffmpegSettings;

    private List<FFmpegProfileViewModel> _ffmpegProfiles;

    protected override async Task OnParametersSetAsync()
    {
        _ffmpegSettings = await Mediator.Send(new GetFFmpegSettings());
        _success = File.Exists(_ffmpegSettings.FFmpegPath) && File.Exists(_ffmpegSettings.FFprobePath);
        await LoadFFmpegProfilesAsync();
    }

    private async Task SaveSettings()
    {
        Either<BaseError, Unit> result = await Mediator.Send(new UpdateFFmpegSettings(_ffmpegSettings));
        result.Match(
            Left: error =>
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error saving FFmpeg settings: {Error}", error.Value);
            },
            Right: _ => Snackbar.Add("Successfully saved FFmpeg settings", Severity.Success));
    }

    private static string ValidatePathExists(string path) => !File.Exists(path) ? "Path does not exist" : null;

    private async Task LoadFFmpegProfilesAsync() =>
        _ffmpegProfiles = await Mediator.Send(new GetAllFFmpegProfiles());

    private async Task DeleteProfileAsync(FFmpegProfileViewModel ffmpegProfile)
    {
        var parameters = new DialogParameters { { "EntityType", "ffmpeg profile" }, { "EntityName", ffmpegProfile.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<DeleteDialog>("Delete FFmpeg Profile", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Mediator.Send(new DeleteFFmpegProfile(ffmpegProfile.Id));
            await LoadFFmpegProfilesAsync();
        }
    }

}