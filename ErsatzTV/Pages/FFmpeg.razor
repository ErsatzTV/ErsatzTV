@page "/ffmpeg"
@using ErsatzTV.Application.FFmpegProfiles
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true" Items="_ffmpegProfiles">
        <ToolBarContent>
            <MudText Typo="Typo.h6">FFmpeg Profiles</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col/>
            <col style="width: 180px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Resolution</MudTh>
            <MudTh>Video Format</MudTh>
            <MudTh>Audio Format</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Resolution">@context.Resolution.Name</MudTd>
            <MudTd DataLabel="Video Format">
                @if (context.HardwareAcceleration != HardwareAccelerationKind.None)
                {
                    @($"{context.VideoFormat.ToString().ToLowerInvariant()} / {context.HardwareAcceleration.ToString().ToLowerInvariant()}")
                }
                else
                {
                    @context.VideoFormat.ToString().ToLowerInvariant()
                }
            </MudTd>
            <MudTd DataLabel="Audio Format">@context.AudioFormat.ToString().ToLowerInvariant()</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Profile">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Href="@($"ffmpeg/{context.Id}")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Copy Profile">
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                       OnClick="@(_ => CopyProfileAsync(context))">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Profile">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteProfileAsync(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="ffmpeg/add" Class="mt-4">
        Add Profile
    </MudButton>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    private List<FFmpegProfileViewModel> _ffmpegProfiles = new();

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync() => await LoadFFmpegProfilesAsync(_cts.Token);

    private async Task LoadFFmpegProfilesAsync(CancellationToken cancellationToken) =>
        _ffmpegProfiles = await Mediator.Send(new GetAllFFmpegProfiles(), cancellationToken);

    private async Task DeleteProfileAsync(FFmpegProfileViewModel ffmpegProfile)
    {
        var parameters = new DialogParameters { { "EntityType", "ffmpeg profile" }, { "EntityName", ffmpegProfile.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete FFmpeg Profile", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteFFmpegProfile(ffmpegProfile.Id), _cts.Token);
            await LoadFFmpegProfilesAsync(_cts.Token);
        }
    }

    private async Task CopyProfileAsync(FFmpegProfileViewModel ffmpegProfile)
    {
        var parameters = new DialogParameters { { "FFmpegProfileId", ffmpegProfile.Id } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<CopyFFmpegProfileDialog>("Copy FFmpeg Profile", parameters, options);
        DialogResult dialogResult = await dialog.Result;
        if (!dialogResult.Canceled && dialogResult.Data is FFmpegProfileViewModel data)
        {
            NavigationManager.NavigateTo($"ffmpeg/{data.Id}");
        }
    }

}