@page "/media/sources/local/add"
@using ErsatzTV.Application.MediaSources.Commands
@using ErsatzTV.Application.MediaSources
@inject NavigationManager NavigationManager
@inject ILogger<LocalMediaSourceEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IEntityLocker Locker
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<div style="max-width: 400px;">
    <MudText Typo="Typo.h4" Class="mb-4">Add Local Media Source</MudText>

    <EditForm EditContext="_editContext" OnSubmit="@HandleSubmitAsync">
        <FluentValidator/>
        <MudCard>
            <MudCardContent>
                <MudSelect Class="mt-3" Label="Media Type" @bind-Value="_model.MediaType" For="@(() => _model.MediaType)">
                    @foreach (MediaType mediaType in new[] { MediaType.TvShow, MediaType.Movie })
                    {
                        <MudSelectItem Value="@mediaType">@mediaType</MudSelectItem>
                    }
                </MudSelect>
                @* TODO: replace this with a folder picker *@
                <MudTextField Label="Folder" @bind-Value="_model.Folder" For="@(() => _model.Folder)"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Add Local Media Source
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private readonly LocalMediaSourceEditViewModel _model = new();
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;

    private LocalMediaSource _mediaSource;

    protected override Task OnParametersSetAsync()
    {
        _mediaSource = new LocalMediaSource
        {
            MediaType = MediaType.TvShow
        };

        _model.MediaType = _mediaSource.MediaType;
        _model.Folder = _mediaSource.Folder;

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private async Task HandleSubmitAsync()
    {
        _messageStore.Clear();
        if (_editContext.Validate())
        {
            var command = new CreateLocalMediaSource(
                Convert.ToBase64String(Guid.NewGuid().ToByteArray())
                    .TrimEnd('=')
                    .Replace("/", "_")
                    .Replace("+", "-"),
                _model.MediaType,
                _model.Folder);
            Either<BaseError, MediaSourceViewModel> result = await Mediator.Send(command);
            await result.Match(
                Left: error =>
                {
                    Snackbar.Add(error.Value, Severity.Error);
                    Logger.LogError("Unexpected error saving simple media collection: {Error}", error.Value);
                    return Task.CompletedTask;
                },
                Right: async vm =>
                {
                    if (Locker.LockMediaSource(vm.Id))
                    {
                        await Channel.WriteAsync(new ForceScanLocalMediaSource(vm.Id));
                        NavigationManager.NavigateTo("/media/sources");
                    }
                });
        }
    }



}