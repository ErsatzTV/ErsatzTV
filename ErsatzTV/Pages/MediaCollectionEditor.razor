@page "/media/collections/{Id:int}/edit"
@page "/media/collections/add"
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using ErsatzTV.Application.MediaCollections.Queries
@inject NavigationManager NavigationManager
@inject ILogger<MediaCollectionEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<div style="max-width: 400px;">
    <MudText Typo="Typo.h4" Class="mb-4">@(IsEdit ? "Edit Media Collection" : "Add Media Collection")</MudText>

    <EditForm EditContext="_editContext" OnSubmit="@HandleSubmitAsync">
        <FluentValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Class="mt-3" Label="Name" @bind-Value="_model.Name" For="@(() => _model.Name)"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @(IsEdit ? "Save Changes" : "Add Media Collection")
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code {

    [Parameter]
    public int Id { get; set; }

    private readonly SimpleMediaCollectionEditViewModel _model = new();
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;

    protected override async Task OnParametersSetAsync()
    {
        if (IsEdit)
        {
            Option<MediaCollectionViewModel> maybeCollection = await Mediator.Send(new GetSimpleMediaCollectionById(Id));
            maybeCollection.IfSome(collection =>
            {
                _model.Id = collection.Id;
                _model.Name = collection.Name;
            });
        }
        else
        {
            _model.Name = "New Collection";
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private bool IsEdit => Id != 0;

    private async Task HandleSubmitAsync()
    {
        _messageStore.Clear();
        if (_editContext.Validate())
        {
            Seq<BaseError> errorMessage = IsEdit ?
                (await Mediator.Send(new UpdateSimpleMediaCollection(Id, _model.Name))).LeftToSeq() :
                (await Mediator.Send(new CreateSimpleMediaCollection(_model.Name))).LeftToSeq();

            errorMessage.HeadOrNone().Match(
                error =>
                {
                    Snackbar.Add(error.Value, Severity.Error);
                    Logger.LogError("Error saving simple media collection: {Error}", error.Value);
                },
                () => NavigationManager.NavigateTo(_model.Id > 0 ? $"/media/collections/{_model.Id}" : "/media/collections"));
        }
    }

}