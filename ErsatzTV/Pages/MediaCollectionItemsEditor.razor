@page "/media/collections/{Id:int}/items"
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using ErsatzTV.Application.MediaCollections.Queries
@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.MediaItems.Queries
@using Unit = LanguageExt.Unit
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject ILogger<MediaCollectionItemsEditor> Logger
@inject ISnackbar Snackbar

<MudTable Hover="true" Items="_collectionItems">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@_mediaCollection.Name Media Items</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Source</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Duration</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Source">@context.Source</MudTd>
        <MudTd DataLabel="Type">@context.MediaType</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
    </RowTemplate>
    <PagerContent>
        @if (_collectionItems.Any())
        {
            <MudTablePager/>
        }
    </PagerContent>
</MudTable>

<MudTable @ref="_table" Hover="true" ServerData="@(new Func<TableState, Task<TableData<MediaItemSearchResultViewModel>>>(ServerReload))" Class="mt-8">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Media Items</MudText>
        <MudToolBarSpacer/>
        <MudTextField T="string" ValueChanged="@OnSearch" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Source</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Title</MudTh>
        <MudTh>Duration</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Source">@context.Source</MudTd>
        <MudTd DataLabel="Type">@context.MediaType</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Duration">@context.Duration</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(AddResultsAsync)" Class="mt-4">
    Add Results
</MudButton>

@code {

    [Parameter]
    public int Id { get; set; }

    private MediaCollectionViewModel _mediaCollection;
    private IEnumerable<MediaItemSearchResultViewModel> _collectionItems;

    protected override async Task OnParametersSetAsync() => await LoadMediaCollectionAsync();

    private List<int> _mediaItemIds;
    private IEnumerable<MediaItemSearchResultViewModel> _pagedData;
    private MudTable<MediaItemSearchResultViewModel> _table;

    private int _totalItems;
    private string _searchString;

    private async Task<TableData<MediaItemSearchResultViewModel>> ServerReload(TableState state)
    {
        List<MediaItemSearchResultViewModel> data = await Mediator.Send(new SearchAllMediaItems(_searchString));

        _mediaItemIds = data.Map(c => c.Id).ToList();
        _totalItems = data.Count;

        _pagedData = data.OrderBy(c => c.Id).Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<MediaItemSearchResultViewModel> { TotalItems = _totalItems, Items = _pagedData };
    }

    private async Task OnSearch(string text)
    {
        _searchString = text;
        await _table.ReloadServerData();
    }

    private async Task AddResultsAsync()
    {
        Either<BaseError, Unit> result = await Mediator.Send(new AddItemsToSimpleMediaCollection(Id, _mediaItemIds));
        await result.Match(
            async _ => await LoadMediaCollectionAsync(),
            error =>
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Error adding items to media collection: {Error}", error.Value);
                return Task.CompletedTask;
            });
    }

    private async Task LoadMediaCollectionAsync()
    {
        Option<Tuple<MediaCollectionViewModel, List<MediaItemSearchResultViewModel>>> maybeResult =
            await Mediator.Send(new GetSimpleMediaCollectionWithItemsById(Id));
        maybeResult.Match(
            result => (_mediaCollection, _collectionItems) = result,
            () => NavigationManager.NavigateTo("404"));
    }

}