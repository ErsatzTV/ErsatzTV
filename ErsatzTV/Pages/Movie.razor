@page "/media/movies/{MovieId:int}"
@using ErsatzTV.Application.Movies
@using ErsatzTV.Application.Movies.Queries
@using System.Globalization
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@inject IMediator Mediator
@inject IDialogService Dialog
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Style="padding: 0" Class="fanart-container">
    <div class="fanart-tint"></div>
    @if (!string.IsNullOrWhiteSpace(_movie.FanArt))
    {
        <img src="@($"/artwork/fanart/{_movie.FanArt}")" alt="fan art"/>
    }
</MudContainer>
<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 200px">
    <div style="display: flex; flex-direction: row;" class="mb-6">
        @if (!string.IsNullOrWhiteSpace(_movie.Poster))
        {
            <img class="mud-elevation-2 mr-6"
                 style="border-radius: 4px; flex-shrink: 0; max-height: 440px;"
                 src="@($"/artwork/posters/{_movie.Poster}")" alt="movie poster"/>
        }
        <div style="display: flex; flex-direction: column; height: 100%">
            <MudText Typo="Typo.h2" Class="media-item-title">@_movie.Title</MudText>
            <MudText Typo="Typo.subtitle1" Class="media-item-subtitle mb-6 mud-text-secondary">@_movie.Year</MudText>
            @if (!string.IsNullOrWhiteSpace(_movie.Plot))
            {
                <MudCard Elevation="2" Class="mb-6">
                    <MudCardContent Class="mx-3 my-3" Style="height: 100%">
                        <MudText Style="flex-grow: 1">@_movie.Plot</MudText>
                    </MudCardContent>
                </MudCard>
            }
            <div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@AddToCollection">
                    Add To Collection
                </MudButton>
            </div>
        </div>
    </div>
    <MudCard Class="mb-6">
        <MudCardContent>
            @if (_sortedLanguages.Any())
            {
                <div style="display: flex; flex-direction: row; flex-wrap: wrap">
                    <MudText GutterBottom="true">Languages:&nbsp;</MudText>
                    <MudLink Href="@($"/search?query=language%3a%22{Uri.EscapeDataString(_sortedLanguages.Head().EnglishName.ToLowerInvariant())}%22")">@_sortedLanguages.Head().EnglishName</MudLink>
                    @foreach (CultureInfo language in _sortedLanguages.Skip(1))
                    {
                        <MudText>,&nbsp;</MudText>
                        <MudLink Href="@($"/search?query=language%3a%22{Uri.EscapeDataString(language.EnglishName.ToLowerInvariant())}%22")">@language.EnglishName</MudLink>
                    }
                </div>
            }
            @if (_sortedStudios.Any())
            {
                <div style="display: flex; flex-direction: row; flex-wrap: wrap">
                    <MudText GutterBottom="true">Studios:&nbsp;</MudText>
                    <MudLink Href="@($"/search?query=studio%3a%22{Uri.EscapeDataString(_sortedStudios.Head())}%22")">@_sortedStudios.Head()</MudLink>
                    @foreach (string studio in _sortedStudios.Skip(1))
                    {
                        <MudText>,&nbsp;</MudText>
                        <MudLink Href="@($"/search?query=studio%3a%22{Uri.EscapeDataString(studio)}%22")">@studio</MudLink>
                    }
                </div>
            }
            @if (_sortedGenres.Any())
            {
                <div style="display: flex; flex-direction: row; flex-wrap: wrap">
                    <MudText GutterBottom="true">Genres:&nbsp;</MudText>
                    <MudLink Href="@($"/search?query=genre%3a%22{Uri.EscapeDataString(_sortedGenres.Head())}%22")">@_sortedGenres.Head()</MudLink>
                    @foreach (string genre in _sortedGenres.Skip(1))
                    {
                        <MudText>,&nbsp;</MudText>
                        <MudLink Href="@($"/search?query=genre%3a%22{Uri.EscapeDataString(genre)}%22")">@genre</MudLink>
                    }
                </div>
            }
            @if (_sortedTags.Any())
            {
                <div style="display: flex; flex-direction: row; flex-wrap: wrap">
                    <MudText GutterBottom="true">Tags:&nbsp;</MudText>
                    <MudLink Href="@($"/search?query=tag%3a%22{Uri.EscapeDataString(_sortedTags.Head())}%22")">@_sortedTags.Head()</MudLink>
                    @foreach (string tag in _sortedTags.Skip(1))
                    {
                        <MudText>,&nbsp;</MudText>
                        <MudLink Href="@($"/search?query=tag%3a%22{Uri.EscapeDataString(tag)}%22")">@tag</MudLink>
                    }
                </div>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>
@if (_movie.Actors.Any())
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudText Class="mb-4">Actors</MudText>
    </MudContainer>
    <MudContainer MaxWidth="MaxWidth.Large" Class="media-card-grid">
        @foreach (ActorCardViewModel actor in _movie.Actors)
        {
            <MediaCard Data="@actor"
                       Link="@($"/search?query=actor%3a%22{Uri.EscapeDataString(actor.Name.ToLowerInvariant())}%22")"
                       IsRemoteArtwork="true"
                       ArtworkKind="ArtworkKind.Thumbnail"/>
        }
    </MudContainer>
}

@code {

    [Parameter]
    public int MovieId { get; set; }

    private MovieViewModel _movie;
    private List<CultureInfo> _sortedLanguages = new();
    private List<string> _sortedStudios = new();
    private List<string> _sortedGenres = new();
    private List<string> _sortedTags = new();

    protected override Task OnParametersSetAsync() => RefreshData();

    private Task RefreshData() =>
        Mediator.Send(new GetMovieById(MovieId)).IfSomeAsync(vm =>
        {
            _movie = vm;
            _sortedLanguages = _movie.Languages.OrderBy(ci => ci.EnglishName).ToList();
            _sortedStudios = _movie.Studios.OrderBy(s => s).ToList();
            _sortedGenres = _movie.Genres.OrderBy(g => g).ToList();
            _sortedTags = _movie.Tags.OrderBy(t => t).ToList();
        });

    private async Task AddToCollection()
    {
        var parameters = new DialogParameters { { "EntityType", "movie" }, { "EntityName", _movie.Title } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
        {
            await Mediator.Send(new AddMovieToCollection(collection.Id, MovieId));
            NavigationManager.NavigateTo($"/media/collections/{collection.Id}");
        }
    }

}