@page "/media/movies"
@page "/media/movies/page/{PageNumber:int}"
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using Unit = LanguageExt.Unit
@inject ILogger<MovieList> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService Dialog
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small" Class="mb-6" Style="max-width: 300px">
    <MudPaper Style="align-items: center; display: flex; justify-content: center;">
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronLeft"
                       OnClick="@PrevPage"
                       Disabled="@(PageNumber <= 1)">
        </MudIconButton>
        <MudText Style="flex-grow: 1"
                 Align="Align.Center">
            @Math.Min((PageNumber - 1) * PageSize + 1, _data.Count)-@Math.Min(_data.Count, PageNumber * PageSize) of @_data.Count
        </MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronRight"
                       OnClick="@NextPage" Disabled="@(PageNumber * PageSize >= _data.Count)">
        </MudIconButton>
    </MudPaper>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
    @foreach (MovieCardViewModel card in _data.Cards.Where(d => !string.IsNullOrWhiteSpace(d.Title)))
    {
        <MediaCard Data="@card"
                   Link="@($"/media/movies/{card.MovieId}")"
                   AddToCollectionClicked="@AddToCollection"/>
    }
</MudContainer>

@code {
    private static int PageSize => 100;

    [Parameter]
    public int PageNumber { get; set; }

    private MovieCardResultsViewModel _data;

    protected override Task OnParametersSetAsync()
    {
        if (PageNumber == 0)
        {
            PageNumber = 1;
        }

        return RefreshData();
    }

    private async Task RefreshData() =>
        _data = await Mediator.Send(new GetMovieCards(PageNumber, PageSize));

    private void PrevPage() => NavigationManager.NavigateTo($"/media/movies/page/{PageNumber - 1}");

    private void NextPage() => NavigationManager.NavigateTo($"/media/movies/page/{PageNumber + 1}");

    private async Task AddToCollection(MediaCardViewModel card)
    {
        if (card is MovieCardViewModel movie)
        {
            var parameters = new DialogParameters { { "EntityType", "movie" }, { "EntityName", movie.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddMovieToCollection(collection.Id, movie.MovieId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding movie to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding movie to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {movie.Title} to collection {collection.Name}", Severity.Success));
            }
        }
    }

}