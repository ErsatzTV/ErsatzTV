@page "/media/multi-collections/{Id:int}/edit"
@page "/media/multi-collections/add"
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using ErsatzTV.Application.MediaCollections.Queries
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar
@inject ILogger<MultiCollectionEditor> _logger

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <div style="max-width: 400px;">
        <MudText Typo="Typo.h4" Class="mb-4">@(IsEdit ? "Edit Multi Collection" : "Add Multi Collection")</MudText>

        <EditForm EditContext="_editContext" OnSubmit="@HandleSubmitAsync">
            <FluentValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Class="mt-3" Label="Name" @bind-Value="_model.Name" For="@(() => _model.Name)"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                        @(IsEdit ? "Save Changes" : "Add Multi Collection")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }

    private readonly MultiCollectionEditViewModel _model = new();
    private EditContext _editContext;
    private ValidationMessageStore _messageStore;
    private List<MediaCollectionViewModel> _collections;
    
    protected override async Task OnParametersSetAsync()
    {
        _collections = await _mediator.Send(new GetAllCollections())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());

        if (IsEdit)
        {
            Option<MultiCollectionViewModel> maybeCollection = await _mediator.Send(new GetMultiCollectionById(Id));
            maybeCollection.IfSome(collection =>
            {
                _model.Id = collection.Id;
                _model.Name = collection.Name;
                _model.Items = collection.Items.Map(item =>
                    new MultiCollectionItemEditViewModel
                    {
                        Collection = item.Collection,
                        ScheduleAsGroup = item.ScheduleAsGroup
                    }).ToList();
            });
        }
        else
        {
            _model.Name = "New Multi Collection";
            _model.Items = new List<MultiCollectionItemEditViewModel>();
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private bool IsEdit => Id != 0;

    private async Task HandleSubmitAsync()
    {
        _messageStore.Clear();
        if (_editContext.Validate())
        {
            Seq<BaseError> errorMessage = IsEdit ?
                (await _mediator.Send(new UpdateMultiCollection(Id, _model.Name, _model.Items.Map(i => new UpdateMultiCollectionItem(i.Collection.Id, i.ScheduleAsGroup)).ToList()))).LeftToSeq() :
                (await _mediator.Send(new CreateMultiCollection(_model.Name, _model.Items.Map(i => new CreateMultiCollectionItem(i.Collection.Id, i.ScheduleAsGroup)).ToList()))).LeftToSeq();

            errorMessage.HeadOrNone().Match(
                error =>
                {
                    _snackbar.Add(error.Value, Severity.Error);
                    _logger.LogError("Error saving collection: {Error}", error.Value);
                },
                () => _navigationManager.NavigateTo("/media/collections"));
        }
    }

}