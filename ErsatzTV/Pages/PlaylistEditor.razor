@page "/media/playlists/{Id:int}"
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.Scheduling
@using ErsatzTV.Application.Search
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<PlaylistEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudForm Style="max-height: 100%">
<MudPaper Square="true" Style="display: flex; height: 64px; min-height: 64px; width: 100%; z-index: 100; align-items: center">
    <div style="display: flex; flex-direction: row; margin-bottom: auto; margin-top: auto; width: 100%; align-items: center" class="ml-6 mr-6">
        <div class="d-none d-md-flex">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveChanges" StartIcon="@Icons.Material.Filled.Save" Disabled="@(_playlist.IsSystem)">
                Save Playlist
            </MudButton>
            <MudButton Class="ml-3" Variant="Variant.Filled" Color="Color.Default" OnClick="@AddPlaylistItem" StartIcon="@Icons.Material.Filled.PlaylistAdd" Disabled="@(_playlist.IsSystem)">
                Add Playlist Item
            </MudButton>
            <MudButton Class="ml-3" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@PreviewPlayout" StartIcon="@Icons.Material.Filled.Preview">
                Preview Playlist Playout
            </MudButton>
        </div>
        <div style="align-items: center; display: flex; margin-left: auto;" class="d-md-none">
            <div class="flex-grow-1"></div>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem Icon="@Icons.Material.Filled.Save" Label="Save Playlist" OnClick="@SaveChanges" Disabled="@(_playlist.IsSystem)"/>
                <MudMenuItem Icon="@Icons.Material.Filled.PlaylistAdd" Label="Add Playlist Item" OnClick="@AddPlaylistItem" Disabled="@(_playlist.IsSystem)"/>
                <MudMenuItem Icon="@Icons.Material.Filled.Preview" Label="Preview Playlist Playout" OnClick="@PreviewPlayout"/>
            </MudMenu>
        </div>
    </div>
</MudPaper>
<div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
<MudText Typo="Typo.h5" Class="mb-2">Playlist</MudText>
<MudDivider Class="mb-6"/>
<MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
    <div class="d-flex">
        <MudText>Name</MudText>
    </div>
    <MudTextField @bind-Value="_playlist.Name" For="@(() => _playlist.Name)" Disabled="@(_playlist.IsSystem)"/>
</MudStack>
<MudText Typo="Typo.h5" Class="mt-10 mb-2">Playlist Items</MudText>
<MudDivider Class="mb-6"/>
<MudTable Hover="true" Items="_playlist.Items.OrderBy(i => i.Index)" Dense="true" @bind-SelectedItem="_selectedItem" RowClassFunc="@SelectedRowClassFunc">
    <ColGroup>
        <MudHidden Breakpoint="Breakpoint.Xs">
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col/>
            <col style="width: 240px;"/>
        </MudHidden>
    </ColGroup>
    <HeaderContent>
        <MudTh>Item Type</MudTh>
        <MudTh>Item</MudTh>
        <MudTh>Playback Order</MudTh>
        <MudTh>Count</MudTh>
        <MudTh>Play All</MudTh>
        <MudTh>Show In EPG</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Item Type">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @context.ItemType
            </MudText>
        </MudTd>
        <MudTd DataLabel="Item">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @context.ItemName
            </MudText>
        </MudTd>
        <MudTd DataLabel="Playback Order">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @(context.PlaybackOrder > 0 ? context.PlaybackOrder : string.Empty)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Count">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @(context.Count is not null ? context.Count : (context.PlayAll ? string.Empty : "1"))
            </MudText>
        </MudTd>
        <MudTd DataLabel="Play All">
            <MudCheckBox T="bool" Value="@context.PlayAll" ValueChanged="@(e => UpdatePlayAll(context, e))" Disabled="@(_playlist.IsSystem)"/>
        </MudTd>
        <MudTd DataLabel="Show In EPG">
            <MudCheckBox T="bool" Value="@context.IncludeInProgramGuide" ValueChanged="@(e => UpdateEPG(context, e))" Disabled="@(_playlist.IsSystem)"/>
        </MudTd>
        <MudTd>
            <div class="d-flex">
                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                               OnClick="@(_ => CopyItem(context))"
                               Disabled="@(_playlist.IsSystem)">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               OnClick="@(_ => MoveItemUp(context))"
                               Disabled="@(_playlist.IsSystem || _playlist.Items.All(x => x.Index >= context.Index))">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               OnClick="@(_ => MoveItemDown(context))"
                               Disabled="@(_playlist.IsSystem || _playlist.Items.All(x => x.Index <= context.Index))">
                </MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               OnClick="@(_ => RemovePlaylistItem(context))"
                               Disabled="@(_playlist.IsSystem)">
                </MudIconButton>
            </div>
        </MudTd>
    </RowTemplate>
</MudTable>
@if (!_playlist.IsSystem && _selectedItem is not null)
{
    <MudText Typo="Typo.h5" Class="mt-10 mb-2">Playlist Item</MudText>
    <MudDivider Class="mb-6"/>
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Collection Type</MudText>
        </div>
        <MudSelect @bind-Value="_selectedItem.CollectionType" For="@(() => _selectedItem.CollectionType)">
            <MudSelectItem Value="CollectionType.Collection">Collection</MudSelectItem>
            <MudSelectItem Value="CollectionType.TelevisionShow">Television Show</MudSelectItem>
            <MudSelectItem Value="CollectionType.TelevisionSeason">Television Season</MudSelectItem>
            <MudSelectItem Value="CollectionType.Artist">Artist</MudSelectItem>
            <MudSelectItem Value="CollectionType.MultiCollection">Multi Collection</MudSelectItem>
            <MudSelectItem Value="CollectionType.SmartCollection">Smart Collection</MudSelectItem>
            <MudSelectItem Value="CollectionType.Movie">Movie</MudSelectItem>
            <MudSelectItem Value="CollectionType.Episode">Episode</MudSelectItem>
            <MudSelectItem Value="CollectionType.MusicVideo">Music Video</MudSelectItem>
            <MudSelectItem Value="CollectionType.OtherVideo">Other Video</MudSelectItem>
            <MudSelectItem Value="CollectionType.Song">Song</MudSelectItem>
            <MudSelectItem Value="CollectionType.Image">Image</MudSelectItem>
        </MudSelect>
    </MudStack>
    @if (_selectedItem.CollectionType == CollectionType.Collection)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Collection</MudText>
            </div>
            <MudAutocomplete T="MediaCollectionViewModel"
                             @bind-Value="_selectedItem.Collection" SearchFunc="@SearchCollections"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search...">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.MultiCollection)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Multi Collection</MudText>
            </div>
            <MudAutocomplete T="MultiCollectionViewModel"
                             @bind-Value="_selectedItem.MultiCollection" SearchFunc="@SearchMultiCollections"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search...">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.SmartCollection)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Smart Collection</MudText>
            </div>
            <MudAutocomplete T="SmartCollectionViewModel"
                             @bind-Value="_selectedItem.SmartCollection" SearchFunc="@SearchSmartCollections"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search...">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.TelevisionShow)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Television Show</MudText>
            </div>
            <MudAutocomplete T="NamedMediaItemViewModel"
                             @bind-Value="_selectedItem.MediaItem" SearchFunc="@SearchTelevisionShows"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search...">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.TelevisionSeason)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Television Season</MudText>
            </div>
            <MudAutocomplete T="NamedMediaItemViewModel"
                             @bind-Value="_selectedItem.MediaItem" SearchFunc="@SearchTelevisionSeasons"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search..."
                             MaxItems="20">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 20 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.Artist)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Artist</MudText>
            </div>
            <MudAutocomplete T="NamedMediaItemViewModel"
                             @bind-Value="_selectedItem.MediaItem" SearchFunc="@SearchArtists"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search..."
                             MaxItems="10">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    @if (_selectedItem.CollectionType == CollectionType.Movie)
    {
        <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
            <div class="d-flex">
                <MudText>Movie</MudText>
            </div>
            <MudAutocomplete T="NamedMediaItemViewModel"
                             @bind-Value="_selectedItem.MediaItem" SearchFunc="@SearchMovies"
                             ToStringFunc="@(c => c?.Name)" Placeholder="Type to search..."
                             MaxItems="10">
                <MoreItemsTemplate>
                    <MudText Align="Align.Center" Class="px-4 py-1">
                        Only the first 10 items are shown
                    </MudText>
                </MoreItemsTemplate>
            </MudAutocomplete>
        </MudStack>
    }

    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Playback Order</MudText>
        </div>
        <MudSelect @bind-Value="@_selectedItem.PlaybackOrder"
                   For="@(() => _selectedItem.PlaybackOrder)"
                   Disabled="@(_selectedItem.CollectionType is CollectionType.Movie or CollectionType.Episode or CollectionType.MusicVideo or CollectionType.OtherVideo or CollectionType.Song or CollectionType.Image)">
            @switch (_selectedItem.CollectionType)
            {
                case CollectionType.MultiCollection:
                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                    @* <MudSelectItem Value="PlaybackOrder.ShuffleInOrder">Shuffle In Order</MudSelectItem> *@
                    break;
                case CollectionType.Collection:
                case CollectionType.SmartCollection:
                    <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.ShuffleInOrder">Shuffle In Order</MudSelectItem>
                    break;
                case CollectionType.TelevisionShow:
                    <MudSelectItem Value="PlaybackOrder.SeasonEpisode">Season, Episode</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem>
                    @* <MudSelectItem Value="PlaybackOrder.MultiEpisodeShuffle">Multi-Episode Shuffle</MudSelectItem> *@
                    break;
                case CollectionType.TelevisionSeason:
                case CollectionType.Artist:
                case CollectionType.FakeCollection:
                default:
                    <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                    <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem>
                    break;
            }
        </MudSelect>
    </MudStack>
    <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
        <div class="d-flex">
            <MudText>Count</MudText>
        </div>
        <MudTextField @bind-Value="@_selectedItem.Count" For="@(() => _selectedItem.Count)"/>
    </MudStack>
}
else if (_previewItems is not null)
{
    <MudText Typo="Typo.h5" Class="mt-10 mb-2">Preview</MudText>
    <MudDivider Class="mb-6"/>
    <MudTable Hover="true"
              Dense="true"
              Items="_previewItems">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Playlist Playout Preview</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Start</MudTh>
            <MudTh>Finish</MudTh>
            <MudTh>Media Item</MudTh>
            <MudTh>Duration</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Start">@context.Start.ToString(@"hh\:mm\:ss")</MudTd>
            <MudTd DataLabel="Finish">@context.Finish.ToString(@"hh\:mm\:ss")</MudTd>
            <MudTd DataLabel="Media Item">@context.Title</MudTd>
            <MudTd DataLabel="Duration">@context.Duration</MudTd>
        </RowTemplate>
    </MudTable>
}
</MudContainer>
</div>
</MudForm>

@code {
    private CancellationTokenSource _cts;

    [Parameter]
    public int Id { get; set; }

    private PlaylistItemsEditViewModel _playlist = new() { Items = [] };
    private PlaylistItemEditViewModel _selectedItem;
    private List<PlayoutItemPreviewViewModel> _previewItems;

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            Option<PlaylistViewModel> maybePlaylist = await Mediator.Send(new GetPlaylistById(Id), token);
            if (maybePlaylist.IsNone)
            {
                NavigationManager.NavigateTo("media/playlists");
                return;
            }

            foreach (PlaylistViewModel playlist in maybePlaylist)
            {
                _playlist = new PlaylistItemsEditViewModel
                {
                    Name = playlist.Name,
                    IsSystem = playlist.IsSystem,
                    Items = []
                };
            }

            Option<IEnumerable<PlaylistItemViewModel>> maybeResults = await Mediator.Send(new GetPlaylistItems(Id), token);
            foreach (IEnumerable<PlaylistItemViewModel> items in maybeResults)
            {
                _playlist.Items.AddRange(items.Map(ProjectToEditViewModel));
                if (_playlist.Items.Count == 1)
                {
                    _selectedItem = _playlist.Items.Head();
                }
            }
        }
        catch (OperationCanceledException)
        {
            // do nothing
        }
    }

    private async Task<IEnumerable<MediaCollectionViewModel>> SearchCollections(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<MediaCollectionViewModel>();
        }

        return await Mediator.Send(new SearchCollections(value), _cts.Token);
    }

    private async Task<IEnumerable<MultiCollectionViewModel>> SearchMultiCollections(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<MultiCollectionViewModel>();
        }

        return await Mediator.Send(new SearchMultiCollections(value), _cts.Token);
    }

    private async Task<IEnumerable<SmartCollectionViewModel>> SearchSmartCollections(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<SmartCollectionViewModel>();
        }

        return await Mediator.Send(new SearchSmartCollections(value), _cts.Token);
    }

    private async Task<IEnumerable<NamedMediaItemViewModel>> SearchTelevisionShows(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<NamedMediaItemViewModel>();
        }

        return await Mediator.Send(new SearchTelevisionShows(value), _cts.Token);
    }

    private async Task<IEnumerable<NamedMediaItemViewModel>> SearchTelevisionSeasons(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<NamedMediaItemViewModel>();
        }

        return await Mediator.Send(new SearchTelevisionSeasons(value), _cts.Token);
    }

    private async Task<IEnumerable<NamedMediaItemViewModel>> SearchArtists(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<NamedMediaItemViewModel>();
        }

        return await Mediator.Send(new SearchArtists(value), _cts.Token);
    }

    private async Task<IEnumerable<NamedMediaItemViewModel>> SearchMovies(string value, CancellationToken cancellationToken)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return new List<NamedMediaItemViewModel>();
        }

        return await Mediator.Send(new SearchMovies(value), _cts.Token);
    }

    private static PlaylistItemEditViewModel ProjectToEditViewModel(PlaylistItemViewModel item) =>
        new()
        {
            Id = item.Id,
            Index = item.Index,
            CollectionType = item.CollectionType,
            Collection = item.Collection,
            MultiCollection = item.MultiCollection,
            SmartCollection = item.SmartCollection,
            MediaItem = item.MediaItem,
            PlaybackOrder = item.PlaybackOrder,
            Count = item.Count,
            PlayAll = item.PlayAll,
            IncludeInProgramGuide = item.IncludeInProgramGuide
        };

    private void AddPlaylistItem()
    {
        var item = new PlaylistItemEditViewModel
        {
            Index = _playlist.Items.Map(i => i.Index).DefaultIfEmpty().Max() + 1,
            PlaybackOrder = PlaybackOrder.Chronological,
            CollectionType = CollectionType.Collection
        };

        _playlist.Items.Add(item);
        _selectedItem = item;
    }

    private void CopyItem(PlaylistItemEditViewModel item)
    {
        var newItem = new PlaylistItemEditViewModel
        {
            Index = item.Index + 1,
            PlaybackOrder = item.PlaybackOrder,
            CollectionType = item.CollectionType,
            Collection = item.Collection,
            MultiCollection = item.MultiCollection,
            SmartCollection = item.SmartCollection,
            MediaItem = item.MediaItem,
            Count = item.Count,
            PlayAll = item.PlayAll,
            IncludeInProgramGuide = item.IncludeInProgramGuide
        };

        foreach (PlaylistItemEditViewModel i in _playlist.Items.Filter(bi => bi.Index >= newItem.Index))
        {
            i.Index += 1;
        }

        _playlist.Items.Add(newItem);
        _selectedItem = newItem;
    }

    private void RemovePlaylistItem(PlaylistItemEditViewModel item)
    {
        _selectedItem = null;
        _playlist.Items.Remove(item);
    }

    private void MoveItemUp(PlaylistItemEditViewModel item)
    {
        // swap with lower index
        PlaylistItemEditViewModel toSwap = _playlist.Items.OrderByDescending(x => x.Index).First(x => x.Index < item.Index);
        (toSwap.Index, item.Index) = (item.Index, toSwap.Index);
    }

    private void MoveItemDown(PlaylistItemEditViewModel item)
    {
        // swap with higher index
        PlaylistItemEditViewModel toSwap = _playlist.Items.OrderBy(x => x.Index).First(x => x.Index > item.Index);
        (toSwap.Index, item.Index) = (item.Index, toSwap.Index);
    }

    private async Task SaveChanges()
    {
        Seq<BaseError> errorMessages = await Mediator
            .Send(GenerateReplaceRequest(), _cts.Token)
            .Map(e => e.LeftToSeq());

        errorMessages.HeadOrNone().Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving playlist: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving playlist: {Error}", error.Value);
            },
            () => NavigationManager.NavigateTo("media/playlists"));
    }

    private ReplacePlaylistItems GenerateReplaceRequest()
    {
        var items = _playlist.Items.Map(item => new ReplacePlaylistItem(
            item.Index,
            item.CollectionType,
            item.Collection?.Id,
            item.MultiCollection?.Id,
            item.SmartCollection?.Id,
            item.MediaItem?.MediaItemId,
            item.PlaybackOrder,
            item.Count,
            item.PlayAll,
            item.IncludeInProgramGuide)).ToList();

        return new ReplacePlaylistItems(Id, _playlist.Name, items);
    }

    private async Task PreviewPlayout()
    {
        _selectedItem = null;
        _previewItems = await Mediator.Send(new PreviewPlaylistPlayout(GenerateReplaceRequest()), _cts.Token);
    }

    private static void UpdateEPG(PlaylistItemEditViewModel context, bool includeInProgramGuide) => context.IncludeInProgramGuide = includeInProgramGuide;

    private static void UpdatePlayAll(PlaylistItemEditViewModel context, bool playAll) => context.PlayAll = playAll;

    private string SelectedRowClassFunc(PlaylistItemEditViewModel element, int rowNumber) => _selectedItem != null && _selectedItem == element ? "selected" : string.Empty;
}
