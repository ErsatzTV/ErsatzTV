@page "/playouts/{Id:int}/alternate-schedules"
@using ErsatzTV.Application.ProgramSchedules
@using ErsatzTV.Application.Playouts
@using Microsoft.AspNetCore.Components
@using ErsatzTV.Application.Channels
@using System.Text
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<ScheduleItemsEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
<MudTable Hover="true" Items="_items.OrderBy(i => i.Index)" Dense="true" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@_channelName Alternate Schedules</MudText>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col/>
        <col/>
        <col style="width: 60px;"/>
        <col style="width: 60px;"/>
        <col style="width: 60px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Schedule</MudTh>
        <MudTh>Days of the Week</MudTh>
        <MudTh>Days of the Month</MudTh>
        <MudTh>Months</MudTh>
        <MudTh/>
        <MudTh/>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Schedule">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @context.ProgramSchedule.Name
            </MudText>
        </MudTd>
        <MudTd DataLabel="Days of the Week">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @string.Join(", ", context.DaysOfWeek)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Days of the Month">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @ToRangeString(context.DaysOfMonth)
            </MudText>
        </MudTd>
        <MudTd DataLabel="Months">
            <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                @ToRangeString(context.MonthsOfYear)
            </MudText>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                           OnClick="@(_ => MoveItemUp(context))"
                           Disabled="@(_items.All(x => x.Index >= context.Index))">
            </MudIconButton>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                           OnClick="@(_ => MoveItemDown(context))"
                           Disabled="@(_items.All(x => x.Index <= context.Index))">
            </MudIconButton>
        </MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           OnClick="@(_ => RemoveAlternateSchedule(context))"
                           Disabled="@(_items.Count == 1)">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>
<MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(_ => AddAlternateSchedule())" Class="mt-4">
    Add Alternate Schedule
</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => SaveChanges())" Class="mt-4 ml-4">
    Save Changes
</MudButton>

@* @if (_selectedItem is not null) *@
@* { *@
@*     <EditForm Model="_selectedItem"> *@
@*     <FluentValidator/> *@
@*     <div style="display: flex; flex-direction: row;" class="mt-6"> *@
@*     <div style="flex-grow: 1; max-width: 400px;" class="mr-6"> *@
@*         <MudCard> *@
@*             <MudCardContent> *@
@*                 <MudSelect Label="Start Type" @bind-Value="_selectedItem.StartType" For="@(() => _selectedItem.StartType)"> *@
@*                     <MudSelectItem Value="StartType.Dynamic">Dynamic</MudSelectItem> *@
@*                     @if (!_schedule.ShuffleScheduleItems) *@
@*                     { *@
@*                         <MudSelectItem Value="StartType.Fixed">Fixed</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudTimePicker Class="mt-3" Label="Start Time" @bind-Time="@_selectedItem.StartTime" For="@(() => _selectedItem.StartTime)" Disabled="@(_selectedItem.StartType == StartType.Dynamic)"/> *@
@*                 <MudSelect Class="mt-3" Label="Collection Type" @bind-Value="_selectedItem.CollectionType" For="@(() => _selectedItem.CollectionType)"> *@
@*                     @foreach (ProgramScheduleItemCollectionType collectionType in Enum.GetValues<ProgramScheduleItemCollectionType>()) *@
@*                     { *@
@*                         <MudSelectItem Value="@collectionType">@collectionType</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.Collection) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="MediaCollectionViewModel" *@
@*                                Label="Collection" *@
@*                                @bind-value="_selectedItem.Collection"> *@
@*                         @foreach (MediaCollectionViewModel collection in _mediaCollections) *@
@*                         { *@
@*                             <MudSelectItem Value="@collection">@collection.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.MultiCollection) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="MultiCollectionViewModel" *@
@*                                Label="Multi Collection" *@
@*                                @bind-value="_selectedItem.MultiCollection"> *@
@*                         @foreach (MultiCollectionViewModel collection in _multiCollections) *@
@*                         { *@
@*                             <MudSelectItem Value="@collection">@collection.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.SmartCollection) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="SmartCollectionViewModel" *@
@*                                Label="Smart Collection" *@
@*                                @bind-value="_selectedItem.SmartCollection"> *@
@*                         @foreach (SmartCollectionViewModel collection in _smartCollections) *@
@*                         { *@
@*                             <MudSelectItem Value="@collection">@collection.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.TelevisionShow) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="NamedMediaItemViewModel" *@
@*                                Label="Television Show" *@
@*                                @bind-value="_selectedItem.MediaItem"> *@
@*                         @foreach (NamedMediaItemViewModel show in _televisionShows) *@
@*                         { *@
@*                             <MudSelectItem Value="@show">@show.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.TelevisionSeason) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="NamedMediaItemViewModel" *@
@*                                Label="Television Season" *@
@*                                @bind-value="_selectedItem.MediaItem"> *@
@*                         @foreach (NamedMediaItemViewModel season in _televisionSeasons) *@
@*                         { *@
@*                             <MudSelectItem Value="@season">@season.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.Artist) *@
@*                 { *@
@*                     <MudSelect Class="mt-3" *@
@*                                T="NamedMediaItemViewModel" *@
@*                                Label="Artist" *@
@*                                @bind-value="_selectedItem.MediaItem"> *@
@*                         @foreach (NamedMediaItemViewModel artist in _artists) *@
@*                         { *@
@*                             <MudSelectItem Value="@artist">@artist.Name</MudSelectItem> *@
@*                         } *@
@*                     </MudSelect> *@
@*                 } *@
@*                 <MudSelect Class="mt-3" Label="Playback Order" @bind-Value="@_selectedItem.PlaybackOrder" For="@(() => _selectedItem.PlaybackOrder)"> *@
@*                     @switch (_selectedItem.CollectionType) *@
@*                     { *@
@*                         case ProgramScheduleItemCollectionType.MultiCollection: *@
@*                             <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.ShuffleInOrder">Shuffle In Order</MudSelectItem> *@
@*                             break; *@
@*                         case ProgramScheduleItemCollectionType.Collection: *@
@*                         case ProgramScheduleItemCollectionType.SmartCollection: *@
@*                             <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.ShuffleInOrder">Shuffle In Order</MudSelectItem> *@
@*                             break; *@
@*                         case ProgramScheduleItemCollectionType.TelevisionShow: *@
@*                             <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.MultiEpisodeShuffle">Multi-Episode Shuffle</MudSelectItem> *@
@*                             break; *@
@*                         default: *@
@*                             <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem> *@
@*                             <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem> *@
@*                             break; *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" Label="Playout Mode" @bind-Value="@_selectedItem.PlayoutMode" For="@(() => _selectedItem.PlayoutMode)"> *@
@*                     @if (!_schedule.ShuffleScheduleItems) *@
@*                     { *@
@*                         <MudSelectItem Value="PlayoutMode.Flood">Flood</MudSelectItem> *@
@*                     } *@
@*                     <MudSelectItem Value="PlayoutMode.One">One</MudSelectItem> *@
@*                     <MudSelectItem Value="PlayoutMode.Multiple">Multiple</MudSelectItem> *@
@*                     <MudSelectItem Value="PlayoutMode.Duration">Duration</MudSelectItem> *@
@*                 </MudSelect> *@
@*                 <MudTextField Class="mt-3" Label="Multiple Count" @bind-Value="@_selectedItem.MultipleCount" For="@(() => _selectedItem.MultipleCount)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Multiple)"/> *@
@*                 <MudTimePicker Class="mt-3" Label="Playout Duration" @bind-Time="@_selectedItem.PlayoutDuration" For="@(() => _selectedItem.PlayoutDuration)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Duration)"/> *@
@*                 <MudSelect Class="mt-3" Label="Tail Mode" @bind-Value="@_selectedItem.TailMode" For="@(() => _selectedItem.TailMode)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Duration)"> *@
@*                     <MudSelectItem Value="@TailMode.None">(none)</MudSelectItem> *@
@*                     <MudSelectItem Value="@TailMode.Offline">Offline</MudSelectItem> *@
@*                     <MudSelectItem Value="@TailMode.Filler">Filler</MudSelectItem> *@
@*                 </MudSelect> *@
@*                 <MudTextField Class="mt-3" Label="Custom Title" @bind-Value="@_selectedItem.CustomTitle" For="@(() => _selectedItem.CustomTitle)"/> *@
@*                 <MudSelect Class="mt-3" Label="Guide Mode" @bind-Value="@_selectedItem.GuideMode" For="@(() => _selectedItem.GuideMode)"> *@
@*                     <MudSelectItem Value="@GuideMode.Normal">Normal</MudSelectItem> *@
@*                     <MudSelectItem Value="@GuideMode.Filler">Filler</MudSelectItem> *@
@*                 </MudSelect> *@
@*             </MudCardContent> *@
@*         </MudCard> *@
@*     </div> *@
@*     <div style="flex-grow: 1; max-width: 400px;"> *@
@*         <MudCard> *@
@*             <MudCardContent> *@
@*                 <MudSelect T="FillerPresetViewModel" *@
@*                            Label="Pre-Roll Filler" *@
@*                            @bind-value="_selectedItem.PreRollFiller" *@
@*                            Clearable="true"> *@
@*                     @foreach (FillerPresetViewModel filler in _fillerPresets.Where(f => f.FillerKind == FillerKind.PreRoll)) *@
@*                     { *@
@*                         <MudSelectItem Value="@filler">@filler.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" *@
@*                            T="FillerPresetViewModel" *@
@*                            Label="Mid-Roll Filler" *@
@*                            @bind-value="_selectedItem.MidRollFiller" *@
@*                            Clearable="true"> *@
@*                     @foreach (FillerPresetViewModel filler in _fillerPresets.Where(f => f.FillerKind == FillerKind.MidRoll)) *@
@*                     { *@
@*                         <MudSelectItem Value="@filler">@filler.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" *@
@*                            T="FillerPresetViewModel" *@
@*                            Label="Post-Roll Filler" *@
@*                            @bind-value="_selectedItem.PostRollFiller" *@
@*                            Clearable="true"> *@
@*                     @foreach (FillerPresetViewModel filler in _fillerPresets.Where(f => f.FillerKind == FillerKind.PostRoll)) *@
@*                     { *@
@*                         <MudSelectItem Value="@filler">@filler.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" *@
@*                            T="FillerPresetViewModel" *@
@*                            Label="Tail Filler" *@
@*                            @bind-value="_selectedItem.TailFiller" *@
@*                            Clearable="true"> *@
@*                     @foreach (FillerPresetViewModel filler in _fillerPresets.Where(f => f.FillerKind == FillerKind.Tail)) *@
@*                     { *@
@*                         <MudSelectItem Value="@filler">@filler.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" *@
@*                            T="FillerPresetViewModel" *@
@*                            Label="Fallback Filler" *@
@*                            @bind-value="_selectedItem.FallbackFiller" *@
@*                            Clearable="true"> *@
@*                     @foreach (FillerPresetViewModel filler in _fillerPresets.Where(f => f.FillerKind == FillerKind.Fallback)) *@
@*                     { *@
@*                         <MudSelectItem Value="@filler">@filler.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*             </MudCardContent> *@
@*         </MudCard> *@
@*         <MudCard Class="mt-4"> *@
@*             <MudCardContent> *@
@*                 <MudSelect Label="Watermark" @bind-Value="@_selectedItem.Watermark" For="@(() => _selectedItem.Watermark)" Clearable="true"> *@
@*                     @foreach (WatermarkViewModel watermark in _watermarks) *@
@*                     { *@
@*                         <MudSelectItem Value="@watermark">@watermark.Name</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect Class="mt-3" *@
@*                            Label="Preferred Audio Language" *@
@*                            @bind-Value="_selectedItem.PreferredAudioLanguageCode" *@
@*                            For="@(() => _selectedItem.PreferredAudioLanguageCode)" *@
@*                            Clearable="true"> *@
@*                     <MudSelectItem Value="@((string)null)">(none)</MudSelectItem> *@
@*                     @foreach (CultureInfo culture in _availableCultures) *@
@*                     { *@
@*                         <MudSelectItem Value="@culture.ThreeLetterISOLanguageName">@culture.EnglishName</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudTextField Class="mt-3" Label="Preferred Audio Title" @bind-Value="@_selectedItem.PreferredAudioTitle" For="@(() => _selectedItem.PreferredAudioTitle)"/> *@
@*                 <MudSelect Class="mt-3" *@
@*                            Label="Preferred Subtitle Language" *@
@*                            @bind-Value="_selectedItem.PreferredSubtitleLanguageCode" *@
@*                            For="@(() => _selectedItem.PreferredSubtitleLanguageCode)" *@
@*                            Clearable="true"> *@
@*                     <MudSelectItem Value="@((string)null)">(none)</MudSelectItem> *@
@*                     @foreach (CultureInfo culture in _availableCultures) *@
@*                     { *@
@*                         <MudSelectItem Value="@culture.ThreeLetterISOLanguageName">@culture.EnglishName</MudSelectItem> *@
@*                     } *@
@*                 </MudSelect> *@
@*                 <MudSelect T="ChannelSubtitleMode?" Class="mt-3" Label="Subtitle Mode" @bind-Value="_selectedItem.SubtitleMode" For="@(() => _selectedItem.SubtitleMode)" Clearable="true"> *@
@*                     <MudSelectItem T="ChannelSubtitleMode?" Value="@(ChannelSubtitleMode.None)">None</MudSelectItem> *@
@*                     <MudSelectItem T="ChannelSubtitleMode?" Value="@(ChannelSubtitleMode.Forced)">Forced</MudSelectItem> *@
@*                     <MudSelectItem T="ChannelSubtitleMode?" Value="@(ChannelSubtitleMode.Default)">Default</MudSelectItem> *@
@*                     <MudSelectItem T="ChannelSubtitleMode?" Value="@(ChannelSubtitleMode.Any)">Any</MudSelectItem> *@
@*                 </MudSelect> *@
@*             </MudCardContent> *@
@*         </MudCard> *@
@*     </div> *@
@*     </div> *@
@*     </EditForm> *@
@* } *@
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int Id { get; set; }

    private string _channelName;
    private List<PlayoutAlternateScheduleEditViewModel> _items;
    private List<ProgramScheduleViewModel> _schedules;

    private PlayoutAlternateScheduleEditViewModel _selectedItem;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync() => await LoadScheduleItems();

    private async Task LoadScheduleItems()
    {
        _schedules = await Mediator.Send(new GetAllProgramSchedules(), _cts.Token)
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());

        _channelName = (await Mediator.Send(new GetChannelNameByPlayoutId(Id), _cts.Token)).IfNone(string.Empty);

        List<PlayoutAlternateScheduleViewModel> results = await Mediator.Send(new GetPlayoutAlternateSchedules(Id), _cts.Token);
        _items = results.Map(ProjectToEditViewModel).ToList();
        if (_items.Count == 1)
        {
            _selectedItem = _items.Head();
        }
    }

    private PlayoutAlternateScheduleEditViewModel ProjectToEditViewModel(PlayoutAlternateScheduleViewModel item) =>
        new()
        {
            Id = item.Id,
            Index = item.Index,
            ProgramSchedule = _schedules.Find(vm => vm.Id == item.ProgramScheduleId),
            DaysOfWeek = item.DaysOfWeek.ToList(),
            DaysOfMonth = item.DaysOfMonth.ToList(),
            MonthsOfYear = item.MonthsOfYear.ToList()
        };

    private void AddAlternateSchedule()
    {
        var item = new PlayoutAlternateScheduleEditViewModel
        {
            Index = _items.Map(i => i.Index).DefaultIfEmpty().Max() + 1,
            ProgramSchedule = _schedules.Head(),
            DaysOfWeek = ProgramScheduleAlternate.AllDaysOfWeek(),
            DaysOfMonth = ProgramScheduleAlternate.AllDaysOfMonth(),
            MonthsOfYear = ProgramScheduleAlternate.AllMonthsOfYear()
        };

        _items.Add(item);
        _selectedItem = item;
    }

    private void RemoveAlternateSchedule(PlayoutAlternateScheduleEditViewModel item)
    {
        _selectedItem = null;
        _items.Remove(item);
    }

    private void MoveItemUp(PlayoutAlternateScheduleEditViewModel item)
    {
        // swap with lower index
        PlayoutAlternateScheduleEditViewModel toSwap = _items.OrderByDescending(x => x.Index).First(x => x.Index < item.Index);
        (toSwap.Index, item.Index) = (item.Index, toSwap.Index);
    }

    private void MoveItemDown(PlayoutAlternateScheduleEditViewModel item)
    {
        // swap with higher index
        PlayoutAlternateScheduleEditViewModel toSwap = _items.OrderBy(x => x.Index).First(x => x.Index > item.Index);
        (toSwap.Index, item.Index) = (item.Index, toSwap.Index);
    }

    private async Task SaveChanges()
    {
        var items = _items.Map(item => new ReplacePlayoutAlternateSchedule(
            item.Id,
            item.Index,
            item.ProgramSchedule.Id,
            item.DaysOfWeek,
            item.DaysOfMonth,
            item.MonthsOfYear)).ToList();

        Seq<BaseError> errorMessages = await Mediator.Send(new ReplacePlayoutAlternateScheduleItems(Id, items), _cts.Token)
            .Map(e => e.LeftToSeq());

        errorMessages.HeadOrNone().Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving alternate schedules: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving alternate schedules: {Error}", error.Value);
            },
            () => NavigationManager.NavigateTo("/playouts"));
    }

    private string ToRangeString(List<int> list)
    {
        list = list.Distinct().ToList();
        list.Sort();

        var result = new StringBuilder();
        for (var i = 0; i < list.Count; i++)
        {
            int temp = list[i];

            //add a number
            result.Append(list[i]);

            //skip number(s) between a range
            while (i < list.Count - 1 && list[i + 1] == list[i] + 1)
            {
                i++;
            }

            //add the range
            if (temp != list[i])
            {
                result.Append("-").Append(list[i]);
            }

            //add comma
            if (i != list.Count - 1)
            {
                result.Append(", ");
            }

        }

        return result.ToString();
    }

}