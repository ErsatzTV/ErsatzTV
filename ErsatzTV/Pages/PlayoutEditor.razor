@page "/playouts/add"
@page "/playouts/add/{kind}"
@using ErsatzTV.Application.Channels
@using ErsatzTV.Application.ProgramSchedules
@implements IDisposable
@inject NavigationManager _navigationManager
@inject ILogger<PlayoutEditor> _logger
@inject ISnackbar _snackbar
@inject IMediator _mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudText Typo="Typo.h4" Class="mb-4">
        @if (Kind == "externaljson")
        {
            <span>Add External Json Playout</span>
        }
        else
        {
            <span>Add Playout</span>
        }
    </MudText>
    <div style="max-width: 400px;">
        <EditForm EditContext="_editContext" OnSubmit="@HandleSubmitAsync">
            <FluentValidationValidator/>
            <MudCard>
                <MudCardContent>
                    <MudSelect T="ChannelViewModel"
                               Label="Channel"
                               @bind-value="_model.Channel"
                               HelperText="Disabled channels already have a playout">
                        @foreach (ChannelViewModel channel in _channels)
                        {
                            <MudSelectItem Disabled="@(channel.PlayoutCount > 0)" Value="@channel">
                                @($"{channel.Number} - {channel.Name}")
                            </MudSelectItem>
                        }
                    </MudSelect>
                    @if (Kind == "externaljson")
                    {
                        <MudTextField Label="External Json File" @bind-Value="_model.ExternalJsonFile" For="@(() => _model.ExternalJsonFile)" />
                    }
                    else
                    {
                        <MudSelect Class="mt-3"
                                   T="ProgramScheduleViewModel"
                                   Label="Schedule"
                                   @bind-value="_model.ProgramSchedule">
                            @foreach (ProgramScheduleViewModel schedule in _programSchedules)
                            {
                                <MudSelectItem Value="@schedule">@schedule.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                        Add Playout
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </div>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    private readonly PlayoutEditViewModel _model = new();
    private List<ChannelViewModel> _channels = [];
    private List<ProgramScheduleViewModel> _programSchedules = [];

    private EditContext _editContext;
    private ValidationMessageStore _messageStore;
    
    [Parameter]
    public string Kind { get; set; }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _model.Kind = Kind;
        
        _channels = await _mediator.Send(new GetAllChannels(), _cts.Token)
            .Map(list => list.OrderBy(vm => decimal.Parse(vm.Number)).ToList());

        if (Kind != "externaljson")
        {
            _programSchedules = await _mediator.Send(new GetAllProgramSchedules(), _cts.Token)
                .Map(list => list.OrderBy(vm => vm.Name).ToList());
        }
    }

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_model);
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private async Task HandleSubmitAsync()
    {
        _messageStore.Clear();
        if (_editContext.Validate())
        {
            Seq<BaseError> errorMessage = (await _mediator.Send(_model.ToCreate(), _cts.Token)).LeftToSeq();

            errorMessage.HeadOrNone().Match(
                error =>
                {
                    _snackbar.Add(error.Value, Severity.Error);
                    _logger.LogError("Unexpected error saving playout: {Error}", error.Value);
                },
                () => _navigationManager.NavigateTo("/playouts"));
        }
    }

}