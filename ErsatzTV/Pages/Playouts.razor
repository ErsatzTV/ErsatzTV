@page "/playouts"
@using ErsatzTV.Application.Playouts
@using ErsatzTV.Application.Playouts.Commands
@using ErsatzTV.Application.Playouts.Queries
@inject IDialogService Dialog
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudTable Hover="true" Dense="true" Items="_playouts" SelectedItemChanged="@(async (PlayoutViewModel x) => await PlayoutSelected(x))">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Playouts</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col style="width: 60px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Channel</MudTh>
            <MudTh>Schedule</MudTh>
            @* <MudTh>Playout Type</MudTh> *@
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Channel">@context.Channel.Number - @context.Channel.Name</MudTd>
            <MudTd DataLabel="Schedule">@context.ProgramSchedule.Name</MudTd>
            @* <MudTd DataLabel="Playout Type">@context.ProgramSchedulePlayoutType</MudTd> *@
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(_ => DeletePlayout(context))"></MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/playouts/add" Class="mt-4">
        Add Playout
    </MudButton>

    @if (_selectedPlayoutItems != null)
    {
        <MudTable Hover="true" Dense="true" Items="_selectedPlayoutItems.OrderBy(i => i.Start)" Class="mt-8">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Playout Detail</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Start</MudTh>
                <MudTh>Media Item</MudTh>
                <MudTh>Duration</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Start">@context.Start.ToString("G")</MudTd>
                <MudTd DataLabel="Media Item">@context.Title</MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private List<PlayoutViewModel> _playouts;
    private List<PlayoutItemViewModel> _selectedPlayoutItems;

    protected override Task OnParametersSetAsync() =>
        LoadAllPlayouts();

    private async Task PlayoutSelected(PlayoutViewModel playout) =>
        _selectedPlayoutItems = await Mediator.Send(new GetPlayoutItemsById(playout.Id));

    private async Task DeletePlayout(PlayoutViewModel playout)
    {
        var parameters = new DialogParameters { { "EntityType", "playout" }, { "EntityName", $"{playout.ProgramSchedule.Name} on {playout.Channel.Number} - {playout.Channel.Name}" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<DeleteDialog>("Delete Playout", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Mediator.Send(new DeletePlayout(playout.Id));
            await LoadAllPlayouts();
        }
    }

    private async Task LoadAllPlayouts() =>
        _playouts = await Mediator.Send(new GetAllPlayouts());


}