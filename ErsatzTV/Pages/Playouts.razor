@page "/playouts"
@using ErsatzTV.Application.Playouts
@using ErsatzTV.Application.Playouts.Commands
@using ErsatzTV.Application.Playouts.Queries
@using ErsatzTV.Application.Configuration.Commands
@using ErsatzTV.Application.Configuration.Queries
@inject IDialogService _dialog
@inject IMediator _mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true"
              Dense="true"
              SelectedItemChanged="@(async (PlayoutNameViewModel x) => await PlayoutSelected(x))"
              @bind-RowsPerPage="@_rowsPerPage"
              ServerData="@(new Func<TableState, Task<TableData<PlayoutNameViewModel>>>(ServerReload))"
              @ref="_table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Playouts</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayoutViewModel, object>(x => decimal.Parse(x.Channel.Number))">
                    Channel
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<PlayoutViewModel, object>(x => x.ProgramSchedule.Name)">
                    Schedule
                </MudTableSortLabel>
            </MudTh>
            @* <MudTh>Playout Type</MudTh> *@
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Channel">@context.ChannelNumber - @context.ChannelName</MudTd>
            <MudTd DataLabel="Schedule">@context.ScheduleName</MudTd>
            @* <MudTd DataLabel="Playout Type">@context.ProgramSchedulePlayoutType</MudTd> *@
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Rebuild Playout">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       OnClick="@(_ => RebuildPlayout(context))">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Playout">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeletePlayout(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/playouts/add" Class="mt-4">
        Add Playout
    </MudButton>

    @if (_selectedPlayoutItems != null)
    {
        <MudTable Hover="true" Dense="true" Items="_selectedPlayoutItems.OrderBy(i => i.Start)" Class="mt-8">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Playout Detail</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Start</MudTh>
                <MudTh>Media Item</MudTh>
                <MudTh>Duration</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Start">@context.Start.ToString("G")</MudTd>
                <MudTd DataLabel="Media Item">@context.Title</MudTd>
                <MudTd DataLabel="Duration">@context.Duration</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private MudTable<PlayoutNameViewModel> _table;
    private int _rowsPerPage;
    private List<PlayoutItemViewModel> _selectedPlayoutItems;
    private int? _selectedPlayoutId;

    protected override async Task OnParametersSetAsync()
    {
        _rowsPerPage = await _mediator.Send(new GetConfigElementByKey(ConfigElementKey.PlayoutsPageSize))
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
    }

    private async Task PlayoutSelected(PlayoutNameViewModel playout)
    {
        _selectedPlayoutId = playout.PlayoutId;
        _selectedPlayoutItems = await _mediator.Send(new GetPlayoutItemsById(playout.PlayoutId));
    }

    private async Task DeletePlayout(PlayoutNameViewModel playout)
    {
        var parameters = new DialogParameters { { "EntityType", "playout" }, { "EntityName", $"{playout.ScheduleName} on {playout.ChannelNumber} - {playout.ChannelName}" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = _dialog.Show<DeleteDialog>("Delete Playout", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _mediator.Send(new DeletePlayout(playout.PlayoutId));
            await _table.ReloadServerData();
        }
    }

    private async Task RebuildPlayout(PlayoutNameViewModel playout)
    {
        await _mediator.Send(new BuildPlayout(playout.PlayoutId, true));
        await _table.ReloadServerData();
        if (_selectedPlayoutId == playout.PlayoutId)
        {
            await PlayoutSelected(playout);
        }
    }

    private async Task<TableData<PlayoutNameViewModel>> ServerReload(TableState state)
    {
        await _mediator.Send(new SaveConfigElementByKey(ConfigElementKey.PlayoutsPageSize, state.PageSize.ToString()));

        List<PlayoutNameViewModel> playouts = await _mediator.Send(new GetAllPlayouts());
        IOrderedEnumerable<PlayoutNameViewModel> sorted = playouts.OrderBy(p => decimal.Parse(p.ChannelNumber));

        // TODO: properly page this data
        return new TableData<PlayoutNameViewModel>
        {
            TotalItems = playouts.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize)
        };
    }

}