@page "/media/sources/plex"
@using ErsatzTV.Application.Plex
@using ErsatzTV.Core.Interfaces.Plex
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator
@inject IEntityLocker Locker
@inject ISnackbar Snackbar
@inject ILogger<PlexMediaSources> Logger
@inject IJSRuntime JsRuntime
@inject IPlexSecretStore PlexSecretStore
@inject ChannelWriter<IScannerBackgroundServiceRequest> ScannerWorkerChannel

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable T="PlexMediaSourceViewModel" Hover="true" Dense="true" Items="_mediaSources">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Plex Media Sources</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Address</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Refresh Libraries">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       Disabled="@(Locker.IsPlexLocked())"
                                       OnClick="@(_ => RefreshLibraries(context.Id))">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Edit Libraries">
                        <MudIconButton Icon="@Icons.Material.Filled.VideoLibrary"
                                       Href="@($"media/sources/plex/{context.Id}/libraries")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Edit Path Replacements">
                        <MudIconButton Icon="@Icons.Material.Filled.Folder"
                                       Href="@($"media/sources/plex/{context.Id}/paths")">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @if (_mediaSources.Any())
    {
        <MudButton Variant="Variant.Filled"
                   Color="Color.Error"
                   OnClick="@(_ => SignOutOfPlex())"
                   Disabled="@Locker.IsPlexLocked()"
                   Class="mt-4">
            Sign out of plex
        </MudButton>
    }
    else
    {
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="@(_ => AddPlexMediaSource())"
                   Disabled="@Locker.IsPlexLocked()"
                   Class="mt-4">
            Sign in to plex
        </MudButton>
    }

    @if (_mediaSources.Any() && !_isAuthorized)
    {
        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   OnClick="@(_ => AddPlexMediaSource())"
                   Disabled="@Locker.IsPlexLocked()"
                   Class="ml-4 mt-4">
            Fix Plex Credentials
        </MudButton>
    }

</MudContainer>

@code {
    private List<PlexMediaSourceViewModel> _mediaSources = new();

    private bool _isAuthorized;

    protected override async Task OnParametersSetAsync() => await LoadMediaSources();

    protected override void OnInitialized() =>
        Locker.OnPlexChanged += PlexChanged;

    private async Task LoadMediaSources()
    {
        _isAuthorized = await PlexSecretStore.GetUserAuthTokens().Map(list => Optional(list).Flatten().Any());
        _mediaSources = await Mediator.Send(new GetAllPlexMediaSources());
    }

    private async Task SignOutOfPlex()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        IDialogReference dialog = await Dialog.ShowAsync<SignOutOfPlexDialog>("Sign out of Plex", options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            if (Locker.LockPlex())
            {
                await Mediator.Send(new SignOutOfPlex());
                await LoadMediaSources();
            }
        }
    }

    private async Task AddPlexMediaSource()
    {
        if (Locker.LockPlex())
        {
            Either<BaseError, string> maybeUrl = await Mediator.Send(new StartPlexPinFlow());
            await maybeUrl.Match(
                async url =>
                {
                    try
                    {
                        await JsRuntime.InvokeAsync<object>("open", new object[] { url, "_blank" });
                    }
                    catch (Exception)
                    {
                        // ignored
                    }
                },
                error =>
                {
                    Locker.UnlockPlex();
                    Snackbar.Add(error.Value, Severity.Error);
                    Logger.LogError("Unexpected error generating plex auth app url: {Error}", error.Value);
                    return Task.CompletedTask;
                });
        }
    }

    private async void PlexChanged(object sender, EventArgs e)
    {
        await InvokeAsync(LoadMediaSources);
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshLibraries(int mediaSourceId) =>
        await ScannerWorkerChannel.WriteAsync(new SynchronizePlexLibraries(mediaSourceId));

    void IDisposable.Dispose() => Locker.OnPlexChanged -= PlexChanged;

}