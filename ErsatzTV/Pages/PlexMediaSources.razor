@page "/media/plex"
@using ErsatzTV.Application.Plex
@using ErsatzTV.Application.Plex.Commands
@using ErsatzTV.Application.Plex.Queries
@inject IDialogService Dialog
@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject ILogger<PlexMediaSources> Logger
@inject IJSRuntime JsRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudTable Hover="true" Dense="true" Items="_mediaSources">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Plex Media Sources</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col style="width: 120px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Address</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.Address</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Libraries">
                        <MudIconButton Icon="@Icons.Material.Filled.VideoLibrary"
                                       Link="@($"/media/sources/plex/{context.Id}/libraries")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Edit Path Replacements">
                        <MudIconButton Icon="@Icons.Material.Filled.Folder"
                                       Link="@($"/media/sources/plex/{context.Id}/paths")">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddPlexMediaSource())" Class="mt-4"> *@
    @*     Add Plex Media Source *@
    @* </MudButton> *@
</MudContainer>

@code {
    private List<PlexMediaSourceViewModel> _mediaSources;

    protected override async Task OnParametersSetAsync() => await LoadMediaSources();

    private async Task LoadMediaSources() =>
        _mediaSources = await Mediator.Send(new GetAllPlexMediaSources());

    // private async Task DeleteMediaSource(PlexMediaSourceViewModel mediaSource)
    // {
    //     int count = await Mediator.Send(new CountMediaItemsById(mediaSource.Id));
    //
    //     var parameters = new DialogParameters
    //     {
    //         { "EntityType", "media source" },
    //         { "EntityName", mediaSource.Name },
    //         { "DetailText", $"This media source contains {count} media items." },
    //         { "DetailHighlight", count.ToString() }
    //     };
    //     var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
    //
    //     IDialogReference dialog = Dialog.Show<DeleteDialog>("Delete Media Source", parameters, options);
    //     DialogResult result = await dialog.Result;
    //     if (!result.Cancelled)
    //     {
    //         await Mediator.Send(new DeleteLocalMediaSource(mediaSource.Id));
    //         await LoadMediaSources();
    //     }
    // }

    // edit media source
    // - manage libraries to include in smart collections
    // - manage list of path replacements

    private async Task AddPlexMediaSource()
    {
        Either<BaseError, string> maybeUrl = await Mediator.Send(new StartPlexPinFlow());
        await maybeUrl.Match(
            async url => await JsRuntime.InvokeAsync<object>("open", new object[] { url, "_blank" }),
            error =>
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error generating plex auth app url: {Error}", error.Value);
                return Task.CompletedTask;
            });
    }

}