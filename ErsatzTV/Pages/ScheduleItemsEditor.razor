@page "/schedules/{Id:int}/items"
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Queries
@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.ProgramSchedules
@using ErsatzTV.Application.ProgramSchedules.Commands
@using ErsatzTV.Application.ProgramSchedules.Queries
@using ErsatzTV.Application.Television.Queries
@using ErsatzTV.Application.Artists.Queries
@inject NavigationManager _navigationManager
@inject ILogger<ScheduleItemsEditor> _logger
@inject ISnackbar _snackbar
@inject IMediator _mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true" Items="_schedule.Items.OrderBy(i => i.Index)" Dense="true" @bind-SelectedItem="_selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@_schedule.Name Items</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col/>
            <col style="width: 60px;"/>
            <col style="width: 60px;"/>
            <col style="width: 60px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>Start Time</MudTh>
            <MudTh>Collection</MudTh>
            <MudTh>Playout Mode</MudTh>
            <MudTh/>
            <MudTh/>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Start Time">
                <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                    @(context.StartType == StartType.Fixed ? context.StartTime?.ToString(@"hh\:mm") ?? string.Empty : "Dynamic")
                </MudText>
            </MudTd>
            <MudTd DataLabel="Collection">
                <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                    @context.CollectionName
                </MudText>
            </MudTd>
            <MudTd DataLabel="Playout Mode">
                <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                    @context.PlayoutMode
                    @if (context.PlayoutMode == PlayoutMode.Multiple && context.MultipleCount.HasValue)
                    {
                        @($" ({context.MultipleCount})")
                    }
                </MudText>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                               OnClick="@(_ => MoveItemUp(context))"
                               Disabled="@(_schedule.Items.All(x => x.Index >= context.Index))">
                </MudIconButton>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward"
                               OnClick="@(_ => MoveItemDown(context))"
                               Disabled="@(_schedule.Items.All(x => x.Index <= context.Index))">
                </MudIconButton>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               OnClick="@(_ => RemoveScheduleItem(context))">
                </MudIconButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(_ => AddScheduleItem())" Class="mt-4">
        Add Schedule Item
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => SaveChanges())" Class="mt-4 ml-4">
        Save Changes
    </MudButton>

    @if (_selectedItem is not null)
    {
        <div style="display: flex; flex-direction: row;" class="mt-6">
            <div style="flex-grow: 1; max-width: 400px;">
                <EditForm Model="_selectedItem">
                    <FluentValidator/>
                    <MudCard>
                        <MudCardContent>
                            <MudSelect Label="Start Type" @bind-Value="_selectedItem.StartType" For="@(() => _selectedItem.StartType)">
                                @foreach (StartType startType in Enum.GetValues<StartType>())
                                {
                                    <MudSelectItem Value="@startType">@startType</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTimePicker Class="mt-3" Label="Start Time" @bind-Time="@_selectedItem.StartTime" For="@(() => _selectedItem.StartTime)" Disabled="@(_selectedItem.StartType == StartType.Dynamic)"/>
                            <MudSelect Label="Collection Type" @bind-Value="_selectedItem.CollectionType" For="@(() => _selectedItem.CollectionType)">
                                @foreach (ProgramScheduleItemCollectionType collectionType in Enum.GetValues<ProgramScheduleItemCollectionType>())
                                {
                                    <MudSelectItem Value="@collectionType">@collectionType</MudSelectItem>
                                }
                            </MudSelect>
                            @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.Collection)
                            {
                                <MudAutocomplete Class="mt-3"
                                                 T="MediaCollectionViewModel"
                                                 Label="Collection"
                                                 @bind-value="_selectedItem.Collection"
                                                 SearchFunc="@SearchMediaCollections"
                                                 ToStringFunc="@(c => c?.Name)"/>
                            }
                            @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.MultiCollection)
                            {
                                <MudAutocomplete Class="mt-3"
                                                 T="MultiCollectionViewModel"
                                                 Label="Multi Collection"
                                                 @bind-value="_selectedItem.MultiCollection"
                                                 SearchFunc="@SearchMultiCollections"
                                                 ToStringFunc="@(c => c?.Name)"/>
                            }
                            @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.TelevisionShow)
                            {
                                <MudAutocomplete Class="mt-3"
                                                 T="NamedMediaItemViewModel"
                                                 Label="Television Show"
                                                 @bind-value="_selectedItem.MediaItem"
                                                 SearchFunc="@SearchTelevisionShows"
                                                 ToStringFunc="@(s => s?.Name)"/>
                            }
                            @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.TelevisionSeason)
                            {
                                <MudAutocomplete Class="mt-3"
                                                 T="NamedMediaItemViewModel"
                                                 Label="Television Season"
                                                 @bind-value="_selectedItem.MediaItem"
                                                 SearchFunc="@SearchTelevisionSeasons"
                                                 ToStringFunc="@(s => s?.Name)"/>
                            }
                            @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.Artist)
                            {
                                <MudAutocomplete Class="mt-3"
                                                 T="NamedMediaItemViewModel"
                                                 Label="Artist"
                                                 @bind-value="_selectedItem.MediaItem"
                                                 SearchFunc="@SearchArtists"
                                                 ToStringFunc="@(s => s?.Name)"/>
                            }
                            <MudSelect Class="mt-3" Label="Playback Order" @bind-Value="@_selectedItem.PlaybackOrder" For="@(() => _selectedItem.PlaybackOrder)">
                                @if (_selectedItem.CollectionType == ProgramScheduleItemCollectionType.MultiCollection)
                                {
                                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                                    <MudSelectItem Value="PlaybackOrder.ShuffleInOrder">Shuffle In Order</MudSelectItem>
                                }
                                else
                                {
                                    <MudSelectItem Value="PlaybackOrder.Chronological">Chronological</MudSelectItem>
                                    <MudSelectItem Value="PlaybackOrder.Random">Random</MudSelectItem>
                                    <MudSelectItem Value="PlaybackOrder.Shuffle">Shuffle</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect Class="mt-3" Label="Playout Mode" @bind-Value="@_selectedItem.PlayoutMode" For="@(() => _selectedItem.PlayoutMode)">
                                @foreach (PlayoutMode playoutMode in Enum.GetValues<PlayoutMode>())
                                {
                                    <MudSelectItem Value="@playoutMode">@playoutMode</MudSelectItem>
                                }
                            </MudSelect>
                            <MudTextField Class="mt-3" Label="Multiple Count" @bind-Value="@_selectedItem.MultipleCount" For="@(() => _selectedItem.MultipleCount)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Multiple)"/>
                            <MudTimePicker Class="mt-3" Label="Playout Duration" @bind-Time="@_selectedItem.PlayoutDuration" For="@(() => _selectedItem.PlayoutDuration)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Duration)"/>
                            <MudElement HtmlTag="div" Class="mt-3">
                                <MudSwitch Label="Offline Tail" @bind-Checked="@_selectedItem.OfflineTail" For="@(() => _selectedItem.OfflineTail)" Disabled="@(_selectedItem.PlayoutMode != PlayoutMode.Duration)"/>
                            </MudElement>
                            <MudTextField Class="mt-3" Label="Custom Title" @bind-Value="@_selectedItem.CustomTitle" For="@(() => _selectedItem.CustomTitle)"/>
                        </MudCardContent>
                    </MudCard>
                </EditForm>
            </div>
            <div style="max-width: 600px;" class="ml-6">
                <MudCard>
                    <MudCardContent>
                        <MudText Class="mt-3" Typo="Typo.h6">
                            Start Type
                        </MudText>
                        <MudText Class="mt-3">
                            A <b>fixed</b> start type requires a <b>start time</b>, while a <b>dynamic</b> start type means the schedule item will start immediately after the preceding schedule item.
                        </MudText>
                        <MudText Class="mt-3 mb-2" Typo="Typo.h6">Playout Mode</MudText>
                        <ul class="mud-typography-body1">
                            <li><b>One</b> - to play one media item from the collection before advancing to the next schedule item.</li>
                            <li><b>Multiple</b> - to play a specified <b>count</b> of media items from the collection before advancing to the next schedule item. A count of <b>0</b> is a special case that will automatically and always equal the number of items in the collection, so each item from the collection will be played once before advancing.</li>
                            <li><b>Duration</b> - to play the maximum number of complete media items that will fit in the specified <b>playout duration</b>, before either going offline for the remainder of the <b>playout duration</b> (an <b>offline tail</b>), or immediately advancing to the next schedule item.</li>
                            <li><b>Flood</b> - to play media items from the collection forever, or until the next schedule item's <b>start time</b> if one exists.</li>
                        </ul>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>
    }
</MudContainer>

@code {

    [Parameter]
    public int Id { get; set; }

    private ProgramScheduleItemsEditViewModel _schedule;
    private List<MediaCollectionViewModel> _mediaCollections;
    private List<MultiCollectionViewModel> _multiCollections;
    private List<NamedMediaItemViewModel> _televisionShows;
    private List<NamedMediaItemViewModel> _televisionSeasons;
    private List<NamedMediaItemViewModel> _artists;

    private ProgramScheduleItemEditViewModel _selectedItem;

    protected override Task OnParametersSetAsync() => LoadScheduleItems();

    private async Task LoadScheduleItems()
    {
    // TODO: fix performance
        _mediaCollections = await _mediator.Send(new GetAllCollections())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
        _multiCollections = await _mediator.Send(new GetAllMultiCollections())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
        _televisionShows = await _mediator.Send(new GetAllTelevisionShows())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
        _televisionSeasons = await _mediator.Send(new GetAllTelevisionSeasons())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());
        _artists = await _mediator.Send(new GetAllArtists())
            .Map(list => list.OrderBy(vm => vm.Name, StringComparer.CurrentCultureIgnoreCase).ToList());

        string name = string.Empty;
        Option<ProgramScheduleViewModel> maybeSchedule = await _mediator.Send(new GetProgramScheduleById(Id));
        maybeSchedule.IfSome(vm => name = vm.Name);

        Option<IEnumerable<ProgramScheduleItemViewModel>> maybeResults = await _mediator.Send(new GetProgramScheduleItems(Id));
        maybeResults.IfSome(items => _schedule = new ProgramScheduleItemsEditViewModel
        {
            Name = name,
            Items = items.Map(ProjectToEditViewModel).ToList()
        });
    }

    private ProgramScheduleItemEditViewModel ProjectToEditViewModel(ProgramScheduleItemViewModel item)
    {
        var result = new ProgramScheduleItemEditViewModel
        {
            Id = item.Id,
            Index = item.Index,
            StartType = item.StartType,
            StartTime = item.StartTime,
            PlayoutMode = item.PlayoutMode,
            CollectionType = item.CollectionType,
            Collection = item.Collection,
            MultiCollection = item.MultiCollection,
            MediaItem = item.MediaItem,
            PlaybackOrder = item.PlaybackOrder,
            CustomTitle = item.CustomTitle
        };

        switch (item)
        {
            case ProgramScheduleItemMultipleViewModel multiple:
                result.MultipleCount = multiple.Count;
                break;
            case ProgramScheduleItemDurationViewModel duration:
                result.PlayoutDuration = duration.PlayoutDuration;
                result.OfflineTail = duration.OfflineTail;
                break;
        }

        return result;
    }

    private void AddScheduleItem()
    {
        var item = new ProgramScheduleItemEditViewModel
        {
            Index = _schedule.Items.Map(i => i.Index).DefaultIfEmpty().Max() + 1,
            StartType = StartType.Dynamic,
            PlayoutMode = PlayoutMode.One,
            PlaybackOrder = PlaybackOrder.Shuffle,
            CollectionType = ProgramScheduleItemCollectionType.Collection
        };

        _schedule.Items.Add(item);
        _selectedItem = item;
    }

    private void RemoveScheduleItem(ProgramScheduleItemEditViewModel item)
    {
        _selectedItem = null;
        _schedule.Items.Remove(item);
    }

    private void MoveItemUp(ProgramScheduleItemEditViewModel item)
    {
    // swap with lower index
        ProgramScheduleItemEditViewModel toSwap = _schedule.Items.OrderByDescending(x => x.Index).First(x => x.Index < item.Index);
        int temp = toSwap.Index;
        toSwap.Index = item.Index;
        item.Index = temp;
    }

    private void MoveItemDown(ProgramScheduleItemEditViewModel item)
    {
    // swap with higher index
        ProgramScheduleItemEditViewModel toSwap = _schedule.Items.OrderBy(x => x.Index).First(x => x.Index > item.Index);
        int temp = toSwap.Index;
        toSwap.Index = item.Index;
        item.Index = temp;
    }

    private Task<IEnumerable<MediaCollectionViewModel>> SearchMediaCollections(string value) =>
        _mediaCollections.Filter(c => c.Name.Contains(value ?? string.Empty, StringComparison.OrdinalIgnoreCase)).AsTask();

    private Task<IEnumerable<MultiCollectionViewModel>> SearchMultiCollections(string value) =>
        _multiCollections.Filter(c => c.Name.Contains(value ?? string.Empty, StringComparison.OrdinalIgnoreCase)).AsTask();

    private Task<IEnumerable<NamedMediaItemViewModel>> SearchTelevisionShows(string value) =>
        _televisionShows.Filter(s => s.Name.Contains(value ?? string.Empty, StringComparison.OrdinalIgnoreCase)).AsTask();

    private Task<IEnumerable<NamedMediaItemViewModel>> SearchTelevisionSeasons(string value) =>
        _televisionSeasons.Filter(s => s.Name.Contains(value ?? string.Empty, StringComparison.OrdinalIgnoreCase)).AsTask();

    private Task<IEnumerable<NamedMediaItemViewModel>> SearchArtists(string value) =>
        _artists.Filter(s => s.Name.Contains(value ?? string.Empty, StringComparison.OrdinalIgnoreCase)).AsTask();

    private async Task SaveChanges()
    {
        var items = _schedule.Items.Map(item => new ReplaceProgramScheduleItem(
            item.Index,
            item.StartType,
            item.StartTime,
            item.PlayoutMode,
            item.CollectionType,
            item.Collection?.Id,
            item.MultiCollection?.Id,
            item.MediaItem?.MediaItemId,
            item.PlaybackOrder,
            item.MultipleCount,
            item.PlayoutDuration,
            item.PlayoutMode == PlayoutMode.Duration ? item.OfflineTail.IfNone(false) : null,
            item.CustomTitle)).ToList();

        Seq<BaseError> errorMessages = await _mediator.Send(new ReplaceProgramScheduleItems(Id, items)).Map(e => e.LeftToSeq());

        errorMessages.HeadOrNone().Match(
            error =>
            {
                _snackbar.Add($"Unexpected error saving schedule: {error.Value}", Severity.Error);
                _logger.LogError("Unexpected error saving schedule: {Error}", error.Value);
            },
            () => _navigationManager.NavigateTo("/schedules"));
    }

}