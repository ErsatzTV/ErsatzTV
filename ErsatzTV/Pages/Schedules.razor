@page "/schedules"
@using ErsatzTV.Application.Configuration
@using ErsatzTV.Application.ProgramSchedules
@using NaturalSort.Extension
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true"
              Dense="true"
              SelectedItemChanged="@(async (ProgramScheduleViewModel x) => await ScheduleSelected(x))"
              @bind-RowsPerPage="@_rowsPerPage"
              ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProgramScheduleViewModel>>>(ServerReload))"
              @ref="_table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Schedules</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col style="width: 240px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ProgramScheduleViewModel, object>(x => x.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Properties">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Href="@($"schedules/{context.Id}")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Edit Schedule Items">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered"
                                       Href="@($"schedules/{context.Id}/items")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Copy Schedule">
                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy"
                                       OnClick="@(_ => CopySchedule(context))">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Schedule">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteSchedule(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="schedules/add" Class="mt-4">
        Add Schedule
    </MudButton>

    @if (_selectedSchedule != null)
    {
        <MudTable Hover="true"
                  Class="mt-8"
                  @bind-RowsPerPage="@_detailRowsPerPage"
                  ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProgramScheduleItemViewModel>>>(DetailServerReload))"
                  @ref="_detailTable">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@_selectedSchedule.Name Items</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Start Time</MudTh>
                <MudTh>Collection</MudTh>
                <MudTh>Playout Mode</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Start Time">
                    @(context.StartType == StartType.Fixed ? context.StartTime == null ? string.Empty : DateTime.Today.Add(context.StartTime.Value).ToShortTimeString() : "Dynamic")
                </MudTd>
                <MudTd DataLabel="Collection">@context.Name</MudTd>
                <MudTd DataLabel="Playout Mode">@context.PlayoutMode</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    private MudTable<ProgramScheduleViewModel> _table;
    private MudTable<ProgramScheduleItemViewModel> _detailTable;
    private int _rowsPerPage = 10;
    private int _detailRowsPerPage = 10;
    private ProgramScheduleViewModel _selectedSchedule;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        _rowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.SchedulesPageSize), _cts.Token)
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
        _detailRowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.SchedulesDetailPageSize), _cts.Token)
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
    }

    private async Task ScheduleSelected(ProgramScheduleViewModel schedule)
    {
        _selectedSchedule = schedule;
        if (_selectedSchedule != null && _detailTable != null)
        {
            await _detailTable.ReloadServerData();
        }
    }

    private async Task DeleteSchedule(ProgramScheduleViewModel programSchedule)
    {
        var parameters = new DialogParameters { { "EntityType", "schedule" }, { "EntityName", programSchedule.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Schedule", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Canceled)
        {
            await Mediator.Send(new DeleteProgramSchedule(programSchedule.Id), _cts.Token);
            if (_table != null)
            {
                await _table.ReloadServerData();
            }

            if (_selectedSchedule == programSchedule)
            {
                _selectedSchedule = null;
            }
        }
    }

    private async Task CopySchedule(ProgramScheduleViewModel programSchedule)
    {
        var parameters = new DialogParameters { { "ProgramScheduleId", programSchedule.Id } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = await Dialog.ShowAsync<CopyScheduleDialog>("Copy Schedule", parameters, options);
        DialogResult dialogResult = await dialog.Result;
        if (!dialogResult.Canceled && dialogResult.Data is ProgramScheduleViewModel data)
        {
            NavigationManager.NavigateTo($"schedules/{data.Id}/items");
        }
    }

    private async Task<TableData<ProgramScheduleViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.SchedulesPageSize, state.PageSize.ToString()), _cts.Token);

        List<ProgramScheduleViewModel> schedules = await Mediator.Send(new GetAllProgramSchedules(), _cts.Token);
        IOrderedEnumerable<ProgramScheduleViewModel> sorted = schedules.OrderBy(s => s.Name, new NaturalSortComparer(StringComparison.CurrentCultureIgnoreCase));

        // TODO: properly page this data
        return new TableData<ProgramScheduleViewModel>
        {
            TotalItems = schedules.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize)
        };
    }

    private async Task<TableData<ProgramScheduleItemViewModel>> DetailServerReload(TableState state, CancellationToken cancellationToken)
    {
        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.SchedulesDetailPageSize, state.PageSize.ToString()), _cts.Token);

        List<ProgramScheduleItemViewModel> scheduleItems = await Mediator.Send(new GetProgramScheduleItems(_selectedSchedule.Id), _cts.Token);
        IOrderedEnumerable<ProgramScheduleItemViewModel> sorted = scheduleItems.OrderBy(s => s.Index);

        // TODO: properly page this data
        return new TableData<ProgramScheduleItemViewModel>
        {
            TotalItems = scheduleItems.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize)
        };
    }

}