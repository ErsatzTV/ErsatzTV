@page "/schedules"
@using ErsatzTV.Application.ProgramSchedules
@using ErsatzTV.Application.ProgramSchedules.Commands
@using ErsatzTV.Application.ProgramSchedules.Queries
@using ErsatzTV.Application.Configuration.Queries
@using ErsatzTV.Application.Configuration.Commands
@using NaturalSort.Extension
@inject IDialogService _dialog
@inject IMediator _mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true"
              Dense="true"
              SelectedItemChanged="@(async (ProgramScheduleViewModel x) => await ScheduleSelected(x))"
              @bind-RowsPerPage="@_rowsPerPage"
              ServerData="@(new Func<TableState, Task<TableData<ProgramScheduleViewModel>>>(ServerReload))"
              @ref="_table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Schedules</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col style="width: 180px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ProgramScheduleViewModel, object>(x => x.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd>
                <div style="align-items: center; display: flex;">
                    <MudTooltip Text="Edit Properties">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Link="@($"/schedules/{context.Id}")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Edit Schedule Items">
                        <MudIconButton Icon="@Icons.Material.Filled.FormatListNumbered"
                                       Link="@($"/schedules/{context.Id}/items")">
                        </MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Delete Schedule">
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       OnClick="@(_ => DeleteSchedule(context))">
                        </MudIconButton>
                    </MudTooltip>
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/schedules/add" Class="mt-4">
        Add Schedule
    </MudButton>

    @if (_selectedSchedule != null)
    {
        <MudTable Hover="true"
                  Class="mt-8"
                  @bind-RowsPerPage="@_detailRowsPerPage"
                  ServerData="@(new Func<TableState, Task<TableData<ProgramScheduleItemViewModel>>>(DetailServerReload))"
                  @ref="_detailTable">
            <ToolBarContent>
                <MudText Typo="Typo.h6">@_selectedSchedule.Name Items</MudText>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Start Time</MudTh>
                <MudTh>Collection</MudTh>
                <MudTh>Playout Mode</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Start Time">
                    @(context.StartType == StartType.Fixed ? context.StartTime?.ToString(@"hh\:mm") ?? string.Empty : "Dynamic")
                </MudTd>
                <MudTd DataLabel="Collection">@context.Name</MudTd>
                <MudTd DataLabel="Playout Mode">@context.PlayoutMode</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private MudTable<ProgramScheduleViewModel> _table;
    private MudTable<ProgramScheduleItemViewModel> _detailTable;
    private int _rowsPerPage;
    private int _detailRowsPerPage;
    private ProgramScheduleViewModel _selectedSchedule;

    protected override async Task OnParametersSetAsync()
    {
        _rowsPerPage = await _mediator.Send(new GetConfigElementByKey(ConfigElementKey.SchedulesPageSize))
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
        _detailRowsPerPage = await _mediator.Send(new GetConfigElementByKey(ConfigElementKey.SchedulesDetailPageSize))
            .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
    }

    private async Task ScheduleSelected(ProgramScheduleViewModel schedule)
    {
        _selectedSchedule = schedule;
        await _detailTable.ReloadServerData();
    }

    private async Task DeleteSchedule(ProgramScheduleViewModel programSchedule)
    {
        var parameters = new DialogParameters { { "EntityType", "schedule" }, { "EntityName", programSchedule.Name } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = _dialog.Show<DeleteDialog>("Delete Schedule", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await _mediator.Send(new DeleteProgramSchedule(programSchedule.Id));
            await _table.ReloadServerData();
            if (_selectedSchedule == programSchedule)
            {
                _selectedSchedule = null;
            }
        }
    }
    
    private async Task<TableData<ProgramScheduleViewModel>> ServerReload(TableState state)
    {
        await _mediator.Send(new SaveConfigElementByKey(ConfigElementKey.SchedulesPageSize, state.PageSize.ToString()));

        List<ProgramScheduleViewModel> schedules = await _mediator.Send(new GetAllProgramSchedules());
        IOrderedEnumerable<ProgramScheduleViewModel> sorted = schedules.OrderBy(s => s.Name, new NaturalSortComparer(StringComparison.CurrentCultureIgnoreCase));

        // TODO: properly page this data
        return new TableData<ProgramScheduleViewModel>
        {
            TotalItems = schedules.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize)
        };
    }

    private async Task<TableData<ProgramScheduleItemViewModel>> DetailServerReload(TableState state)
    {
        await _mediator.Send(new SaveConfigElementByKey(ConfigElementKey.SchedulesDetailPageSize, state.PageSize.ToString()));

        List<ProgramScheduleItemViewModel> scheduleItems = await _mediator.Send(new GetProgramScheduleItems(_selectedSchedule.Id));
        IOrderedEnumerable<ProgramScheduleItemViewModel> sorted = scheduleItems.OrderBy(s => s.Index);

        // TODO: properly page this data
        return new TableData<ProgramScheduleItemViewModel>
        {
            TotalItems = scheduleItems.Count,
            Items = sorted.Skip(state.Page * state.PageSize).Take(state.PageSize)
        };
    }

}