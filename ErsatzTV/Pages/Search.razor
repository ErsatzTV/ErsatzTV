@page "/search"
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Unit = LanguageExt.Unit
@inherits FragmentNavigationBase
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject ILogger<Search> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<MudPaper Square="true" Style="padding: 0; position: fixed; left: 240px; right: 0; z-index: 100; height: 64px; display: flex">
    <div style="display: flex; flex-direction: row; margin-top: auto; margin-bottom: auto; width: 100%" class="ml-6 mr-6">
        @if (_selectedCards.Any())
        {
            <MudText Typo="Typo.h6" Color="Color.Primary">@_selectedCards.Count @(_selectedCards.Count == 1 ? "Item" : "Items") Selected</MudText>
            <div style="margin-left: auto">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add">
                    Add To Collection
                </MudButton>
                <MudButton Class="ml-3"
                           Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.Check"
                           OnClick="@(_ => ClearSelection())">
                    Clear Selection
                </MudButton>
            </div>
        }
        else
        {
            <MudText>@_query</MudText>
            <MudLink Class="ml-4" Href="@(NavigationManager.Uri.Split("#").Head() + "#movies")">@_data.MovieCards.Count Movies</MudLink>
            <MudLink Class="ml-4" Href="@(NavigationManager.Uri.Split("#").Head() + "#shows")">@_data.ShowCards.Count Shows</MudLink>
        }
    </div>
</MudPaper>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Style="margin-top: 96px">
    @if (_data?.MovieCards.Any() == true)
    {
        <MudText GutterBottom="true"
                 Typo="Typo.h4"
                 Style="scroll-margin-top: 160px"
                 UserAttributes="@(new Dictionary<string, object> { { "id", "movies" } })">
            Movies
        </MudText>

        <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
            @foreach (MovieCardViewModel card in _data.MovieCards.OrderBy(m => m.SortTitle))
            {
                <MediaCard Data="@card"
                           Link="@($"/media/movies/{card.MovieId}")"
                           AddToCollectionClicked="@AddToCollection"
                           SelectClicked="@(e => SelectClicked(card, e))"
                           IsSelected="@_selectedCards.Contains(card)"
                           IsSelectMode="@_selectedCards.Any()"/>
            }
        </MudContainer>
    }

    @if (_data?.ShowCards.Any() == true)
    {
        <MudText GutterBottom="true"
                 Typo="Typo.h4"
                 Style="scroll-margin-top: 160px"
                 UserAttributes="@(new Dictionary<string, object> { { "id", "shows" } })">
            Shows
        </MudText>

        <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
            @foreach (TelevisionShowCardViewModel card in _data.ShowCards.OrderBy(s => s.SortTitle))
            {
                <MediaCard Data="@card"
                           Link="@($"/media/tv/shows/{card.TelevisionShowId}")"
                           AddToCollectionClicked="@AddToCollection"
                           SelectClicked="@(e => SelectClicked(card, e))"
                           IsSelected="@_selectedCards.Contains(card)"
                           IsSelectMode="@_selectedCards.Any()"/>
            }
        </MudContainer>
    }
</MudContainer>

@code {
    private string _query;
    private SearchCardResultsViewModel _data;
    private System.Collections.Generic.HashSet<MediaCardViewModel> _selectedCards;
    private MediaCardViewModel _selectedLast;

    protected override async Task OnInitializedAsync()
    {
        string query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("query", out StringValues value))
        {
            _query = value;
            Either<BaseError, SearchCardResultsViewModel> maybeResults = await Mediator.Send(new GetSearchCards(_query));
            maybeResults.IfRight(results => _data = results);
        }

        _selectedCards = new System.Collections.Generic.HashSet<MediaCardViewModel>();
    }

    private void ClearSelection() => _selectedCards.Clear();

    private void SelectClicked(MediaCardViewModel card, MouseEventArgs e)
    {
        if (_selectedCards.Contains(card))
        {
            _selectedCards.Remove(card);
        }
        else
        {
            if (e.ShiftKey && _selectedLast != null)
            {
                var sorted = _data.MovieCards.OrderBy(m => m.SortTitle)
                    .Append<MediaCardViewModel>(_data.ShowCards.OrderBy(s => s.SortTitle))
                    .ToList();

                int start = sorted.IndexOf(_selectedLast);
                int finish = sorted.IndexOf(card);
                if (start > finish)
                {
                    int temp = start;
                    start = finish;
                    finish = temp;
                }

                for (int i = start; i < finish; i++)
                {
                    _selectedCards.Add(sorted[i]);
                }
            }

            _selectedLast = card;
            _selectedCards.Add(card);
        }
    }

    private async Task AddToCollection(MediaCardViewModel card)
    {
        if (card is MovieCardViewModel movie)
        {
            var parameters = new DialogParameters { { "EntityType", "movie" }, { "EntityName", movie.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddMovieToCollection(collection.Id, movie.MovieId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding movie to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding movie to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {movie.Title} to collection {collection.Name}", Severity.Success));
            }
        }

        if (card is TelevisionShowCardViewModel show)
        {
            var parameters = new DialogParameters { { "EntityType", "show" }, { "EntityName", show.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddShowToCollection(collection.Id, show.TelevisionShowId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding show to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding show to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {show.Title} to collection {collection.Name}", Severity.Success));
            }
        }
    }

}