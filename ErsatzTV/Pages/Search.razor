@page "/search"
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using Unit = LanguageExt.Unit
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject ILogger<Search> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <div class="mb-6" style="display: flex; flex-direction: row;">
        <MudText GutterBottom="true" Typo="Typo.h4">Search Results: "@_query"</MudText>
    </div>

    @if (_data?.MovieCards.Any() == true)
    {
        <MudText GutterBottom="true" Typo="Typo.h4">Movies</MudText>

        <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
            @foreach (MovieCardViewModel card in _data.MovieCards.OrderBy(m => m.SortTitle))
            {
                <MediaCard Data="@card"
                           Link="@($"/media/movies/{card.MovieId}")"
                           AddToCollectionClicked="@AddToCollection"/>
            }
        </MudContainer>
    }

    @if (_data?.ShowCards.Any() == true)
    {
        <MudText GutterBottom="true" Typo="Typo.h4">Television Shows</MudText>

        <MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
            @foreach (TelevisionShowCardViewModel card in _data.ShowCards.OrderBy(s => s.SortTitle))
            {
                <MediaCard Data="@card"
                           Link="@($"/media/tv/shows/{card.TelevisionShowId}")"
                           AddToCollectionClicked="@AddToCollection"/>
            }
        </MudContainer>
    }
</MudContainer>

@code {
    private string _query;
    private SearchCardResultsViewModel _data;

    protected override async Task OnInitializedAsync()
    {
        string query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("query", out StringValues value))
        {
            _query = value;
            Either<BaseError, SearchCardResultsViewModel> maybeResults = await Mediator.Send(new GetSearchCards(_query));
            maybeResults.IfRight(results => _data = results);
        }
    }

    private async Task AddToCollection(MediaCardViewModel card)
    {
        if (card is MovieCardViewModel movie)
        {
            var parameters = new DialogParameters { { "EntityType", "movie" }, { "EntityName", movie.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddMovieToCollection(collection.Id, movie.MovieId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding movie to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding movie to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {movie.Title} to collection {collection.Name}", Severity.Success));
            }
        }

        if (card is TelevisionShowCardViewModel show)
        {
            var parameters = new DialogParameters { { "EntityType", "show" }, { "EntityName", show.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddShowToCollection(collection.Id, show.TelevisionShowId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding show to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding show to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {show.Title} to collection {collection.Name}", Severity.Success));
            }
        }
    }

}