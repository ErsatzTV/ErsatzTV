@page "/media/tv/seasons/{SeasonId:int}"
@using ErsatzTV.Application.Television
@using ErsatzTV.Application.Television.Queries
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using ErsatzTV.Application.ProgramSchedules
@using ErsatzTV.Application.ProgramSchedules.Commands
@using Unit = LanguageExt.Unit
@inject IMediator Mediator
@inject ILogger<TelevisionEpisodeList> Logger
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<MudContainer MaxWidth="MaxWidth.False" Style="padding: 0" Class="fanart-container">
    <div class="fanart-tint"></div>
    @if (!string.IsNullOrWhiteSpace(_season.FanArt))
    {
        <img src="@($"/artwork/fanart/{_season.FanArt}")" alt="fan art"/>
    }
</MudContainer>
<MudContainer MaxWidth="MaxWidth.Large" Style="margin-top: 200px">
    <div style="display: flex; flex-direction: row;">
        @if (!string.IsNullOrWhiteSpace(_season.Poster))
        {
            <img class="mud-elevation-2 mr-6"
                 style="border-radius: 4px; max-height: 440px"
                 src="@($"/artwork/posters/{_season.Poster}")" alt="show poster"/>
        }
        <div style="display: flex; flex-direction: column; height: 100%">
            <MudLink Href="@($"/media/tv/shows/{_season.ShowId}")">
                <MudText Typo="Typo.h2" Class="media-item-title">@_season.Title</MudText>
            </MudLink>
            <MudText Typo="Typo.subtitle1" Class="media-item-subtitle mb-6 mud-text-secondary">@_season.Name</MudText>
            <div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="@AddToCollection">
                    Add To Collection
                </MudButton>
                <MudButton Class="ml-3"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Schedule"
                           OnClick="@AddToSchedule">
                    Add To Schedule
                </MudButton>
            </div>
        </div>
    </div>
</MudContainer>
<MudContainer MaxWidth="MaxWidth.Large" Class="media-card-grid mt-8">
    @foreach (TelevisionEpisodeCardViewModel card in _data.Cards)
    {
        <MediaCard Data="@card"
                   Placeholder="@card.Placeholder"
                   Link="@($"/media/tv/episodes/{card.EpisodeId}")"
                   AddToCollectionClicked="@AddEpisodeToCollection"
                   ContainerClass="media-card-episode-container mx-2"
                   CardClass="media-card-episode"
                   ArtworkKind="@ArtworkKind.Thumbnail"/>
    }
</MudContainer>

@code {

    [Parameter]
    public int SeasonId { get; set; }

    private TelevisionSeasonViewModel _season;

    private int _pageSize => 100;
    private readonly int _pageNumber = 1;

    private TelevisionEpisodeCardResultsViewModel _data;

    private List<BreadcrumbItem> _breadcrumbs;

    protected override Task OnParametersSetAsync() => RefreshData();

    private async Task RefreshData()
    {
        await Mediator.Send(new GetTelevisionSeasonById(SeasonId))
            .IfSomeAsync(vm => _season = vm);

        _data = await Mediator.Send(new GetTelevisionEpisodeCards(SeasonId, _pageNumber, _pageSize));

        // _breadcrumbs = new List<BreadcrumbItem>
        // {
        //     new("TV Shows", "/media/tv/shows"),
        //     new($"{_season.Title} ({_season.Year})", ),
        //     new(_season.Name, null, true)
        // };
    }

    private async Task AddToCollection()
    {
        var parameters = new DialogParameters { { "EntityType", "season" }, { "EntityName", $"{_season.Title} - {_season.Name}" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
        {
            await Mediator.Send(new AddSeasonToCollection(collection.Id, SeasonId));
            NavigationManager.NavigateTo($"/media/collections/{collection.Id}");
        }
    }


    private async Task AddToSchedule()
    {
        var parameters = new DialogParameters { { "EntityType", "season" }, { "EntityName", $"{_season.Title} - {_season.Name}" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<AddToScheduleDialog>("Add To Schedule", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled && result.Data is ProgramScheduleViewModel schedule)
        {
            await Mediator.Send(new AddProgramScheduleItem(schedule.Id, StartType.Dynamic, null, PlayoutMode.One, ProgramScheduleItemCollectionType.TelevisionSeason, null, SeasonId, null, null, null));
            NavigationManager.NavigateTo($"/schedules/{schedule.Id}/items");
        }
    }

    private async Task AddEpisodeToCollection(MediaCardViewModel card)
    {
        if (card is TelevisionEpisodeCardViewModel episode)
        {
            var parameters = new DialogParameters { { "EntityType", "episode" }, { "EntityName", episode.Title } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
            DialogResult result = await dialog.Result;
            if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
            {
                var request = new AddEpisodeToCollection(collection.Id, episode.EpisodeId);
                Either<BaseError, Unit> addResult = await Mediator.Send(request);
                addResult.Match(
                    Left: error =>
                    {
                        Snackbar.Add($"Unexpected error adding episode to collection: {error.Value}");
                        Logger.LogError("Unexpected error adding episode to collection: {Error}", error.Value);
                    },
                    Right: _ => Snackbar.Add($"Added {episode.Title} to collection {collection.Name}", Severity.Success));
            }
        }
    }

}