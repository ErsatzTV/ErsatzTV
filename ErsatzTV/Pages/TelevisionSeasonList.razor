@page "/media/tv/shows/{ShowId:int}"
@using ErsatzTV.Application.Television
@using ErsatzTV.Application.Television.Queries
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@using ErsatzTV.Application.MediaCollections
@using ErsatzTV.Application.MediaCollections.Commands
@using ErsatzTV.Application.ProgramSchedules
@using ErsatzTV.Application.ProgramSchedules.Commands
@inject IMediator Mediator
@inject IDialogService Dialog
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large">
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-6"></MudBreadcrumbs>
    <MudCard Class="mb-6">
        <div style="display: flex; flex-direction: row;">
            @if (!string.IsNullOrWhiteSpace(_show.Poster))
            {
                <MudPaper Style="flex-shrink: 0;">
                    <MudCardMedia Image="@($"/posters/{_show.Poster}")" Style="height: 440px; width: 304px;"/>
                </MudPaper>
            }
            <MudCardContent Class="mx-3 my-3">
                <div style="display: flex; flex-direction: column; height: 100%">
                    <MudText Typo="Typo.h3">@_show.Title</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mb-6 mud-text-secondary">@_show.Year</MudText>
                    <MudText Style="flex-grow: 1">@_show.Plot</MudText>
                    <div>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="@AddToCollection">
                            Add To Collection
                        </MudButton>
                        <MudButton Class="ml-3"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Schedule"
                                   OnClick="@AddToSchedule">
                            Add To Schedule
                        </MudButton>
                    </div>
                </div>
            </MudCardContent>
        </div>
    </MudCard>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="media-card-grid">
    @foreach (TelevisionSeasonCardViewModel card in _data.Cards)
    {
        <MediaCard Data="@card" Placeholder="@card.Placeholder"
                   Link="@($"/media/tv/seasons/{card.TelevisionSeasonId}")"
                   DataRefreshed="@(() => RefreshData())"/>
    }
</MudContainer>

@code {

    [Parameter]
    public int ShowId { get; set; }

    private TelevisionShowViewModel _show;

    private int _pageSize => 100;
    private readonly int _pageNumber = 1;

    private TelevisionSeasonCardResultsViewModel _data;

    private List<BreadcrumbItem> _breadcrumbs;

    protected override Task OnParametersSetAsync() => RefreshData();

    private async Task RefreshData()
    {
        await Mediator.Send(new GetTelevisionShowById(ShowId))
            .IfSomeAsync(vm => _show = vm);

        _data = await Mediator.Send(new GetTelevisionSeasonCards(ShowId, _pageNumber, _pageSize));

        _breadcrumbs = new List<BreadcrumbItem>
        {
            new("TV Shows", "/media/tv/shows"),
            new($"{_show.Title} ({_show.Year})", null, true)
        };
    }

    private async Task AddToCollection()
    {
        var parameters = new DialogParameters { { "EntityType", "show" }, { "EntityName", _show.Title } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<AddToCollectionDialog>("Add To Collection", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled && result.Data is MediaCollectionViewModel collection)
        {
            await Mediator.Send(new AddTelevisionShowToSimpleMediaCollection(collection.Id, ShowId));
            NavigationManager.NavigateTo($"/media/collections/{collection.Id}");
        }
    }

    private async Task AddToSchedule()
    {
        var parameters = new DialogParameters { { "EntityType", "show" }, { "EntityName", _show.Title } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<AddToScheduleDialog>("Add To Schedule", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled && result.Data is ProgramScheduleViewModel schedule)
        {
            await Mediator.Send(new AddProgramScheduleItem(schedule.Id, StartType.Dynamic, null, PlayoutMode.One, ProgramScheduleItemCollectionType.TelevisionShow, null, ShowId, null, null, null, null));
            NavigationManager.NavigateTo($"/schedules/{schedule.Id}/items");
        }
    }

}