@page "/media/tv/shows/{ShowId:int}"
@using static LanguageExt.Prelude
@using ErsatzTV.Application.Television
@using ErsatzTV.Application.Television.Queries
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.Large">
    <MudCard Class="mb-6">
        <div style="display: flex; flex-direction: row;">
            <MudPaper Style="flex-shrink: 0;">
                <MudCardMedia Image="@($"/posters/{_show.Poster}")" Style="height: 440px; width: 304px;"/>
            </MudPaper>
            <MudCardContent>
                <div style="display: flex; flex-direction: column; height: 100%">
                    <MudText Typo="Typo.h3">@_show.Title</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mb-6 mud-text-secondary">@_show.Year</MudText>
                    <MudText Style="flex-grow: 1">@_show.Plot</MudText>
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Disabled="true">
                            Add To Schedule
                        </MudButton>
                    </div>
                </div>
            </MudCardContent>
        </div>
    </MudCard>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.Large" Class="media-card-grid">
    @foreach (TelevisionSeasonCardViewModel card in _data.Cards)
    {
        <MediaCard Data="@card" CustomPlaceholder="@SeasonPlaceholder" Link="@($"/media/tv/shows/{ShowId}/seasons/{card.TelevisionSeasonId}")" DataRefreshed="@(() => RefreshData())"/>
    }
</MudContainer>

@code {

    [Parameter]
    public int ShowId { get; set; }

    private TelevisionShowViewModel _show;

    private int _pageSize => 100;
    private readonly int _pageNumber = 1;

    private TelevisionSeasonCardResultsViewModel _data;

    protected override Task OnParametersSetAsync() => RefreshData();

    private async Task RefreshData()
    {
        await Mediator.Send(new GetTelevisionShowById(ShowId))
            .IfSomeAsync(vm => _show = vm);

        _data = await Mediator.Send(new GetTelevisionSeasonCards(ShowId, _pageNumber, _pageSize));
    }

    private string SeasonPlaceholder(string sortTitle) =>
        Optional(_data.Cards.SingleOrDefault(d => d.SortTitle == sortTitle))
            .Match(vm => vm.Placeholder, () => sortTitle.Substring(0, 1).ToUpperInvariant());

}