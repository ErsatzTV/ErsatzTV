@page "/media/tv/shows"
@using ErsatzTV.Application.MediaCards
@using ErsatzTV.Application.MediaCards.Queries
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.Small" Class="mb-6" Style="max-width: 300px">
    <MudPaper Style="align-items: center; display: flex; justify-content: center;">
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronLeft"
                       OnClick="@(() => PrevPage())"
                       Disabled="@(_pageNumber <= 1)">
        </MudIconButton>
        <MudText Style="flex-grow: 1"
                 Align="Align.Center">
            @Math.Min((_pageNumber - 1) * _pageSize + 1, _data.Count)-@Math.Min(_data.Count, _pageNumber * _pageSize) of @_data.Count
        </MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronRight"
                       OnClick="@(() => NextPage())" Disabled="@(_pageNumber * _pageSize >= _data.Count)">
        </MudIconButton>
    </MudPaper>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
    @foreach (TelevisionShowCardViewModel card in _data.Cards)
    {
        <MediaCard Data="@card" Link="@($"/media/tv/shows/{card.TelevisionShowId}")" DataRefreshed="@(() => RefreshData())"/>
    }
</MudContainer>

@code {
    private int _pageSize => 100;
    private int _pageNumber = 1;

    private TelevisionShowCardResultsViewModel _data;

    protected override Task OnParametersSetAsync() => RefreshData();

    private async Task RefreshData() =>
        _data = await Mediator.Send(new GetTelevisionShowCards(_pageNumber, _pageSize));

    private async Task PrevPage()
    {
        _pageNumber -= 1;
        await RefreshData();
    }

    private async Task NextPage()
    {
        _pageNumber += 1;
        await RefreshData();
    }

}