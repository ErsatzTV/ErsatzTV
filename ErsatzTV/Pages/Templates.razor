@page "/templates"
@using ErsatzTV.Application.Scheduling
@using ErsatzTV.Application.Tree
@implements IDisposable
@inject ILogger<Templates> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator
@inject IDialogService Dialog

<MudForm Style="max-height: 100%">
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">Template Groups</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Template Group Name</MudText>
                </div>
                <MudTextField @bind-Value="_templateGroupName" For="@(() => _templateGroupName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddTemplateGroup())" StartIcon="@Icons.Material.Filled.Add">
                    Add Template Group
                </MudButton>
            </MudStack>
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">Templates</MudText>
            <MudDivider Class="mb-6"/>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Template Group</MudText>
                </div>
                <MudSelect @bind-Value="_selectedTemplateGroup">
                    @foreach (TemplateGroupViewModel templateGroup in _templateGroups)
                    {
                        <MudSelectItem Value="@templateGroup">@templateGroup.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex">
                    <MudText>Template Name</MudText>
                </div>
                <MudTextField @bind-Value="_templateName" For="@(() => _templateName)"/>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => AddTemplate())" StartIcon="@Icons.Material.Filled.Add">
                    Add Template
                </MudButton>
            </MudStack>
            <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                <div class="d-flex"></div>
                <MudTreeView T="TemplateTreeItemViewModel" Items="@_treeItems" Hover="true" Style="width: 100%">
                    <ItemTemplate Context="item">
                        <MudTreeViewItem T="TemplateTreeItemViewModel" Items="@item.Value!.TreeItems" Icon="@item.Value.Icon" Value="@item.Value">
                            <BodyContent>
                                <div style="display: grid; grid-template-columns: 1fr auto; align-items: center; width: 100%">
                                    <MudGrid Justify="Justify.FlexStart">
                                        <MudItem xs="5">
                                            <MudText>@item.Value.Text</MudText>
                                        </MudItem>
                                    </MudGrid>
                                    <div style="justify-self: end;">
                                        @foreach (int templateId in Optional(item.Value.TemplateId))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" Color="Color.Inherit" Href="@($"templates/{templateId}")"/>
                                        }
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Medium" Color="Color.Inherit" OnClick="@(_ => DeleteItem(item.Value))"/>
                                    </div>
                                </div>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </MudStack>
        </MudContainer>
    </div>
</MudForm>

@code {
    private readonly CancellationTokenSource _cts = new();
    private readonly List<TreeItemData<TemplateTreeItemViewModel>> _treeItems = [];
    private List<TemplateGroupViewModel> _templateGroups = [];
    private TemplateGroupViewModel _selectedTemplateGroup;
    private string _templateGroupName;
    private string _templateName;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        await ReloadTemplateTree();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ReloadTemplateTree()
    {
        _templateGroups = await Mediator.Send(new GetAllTemplateGroups(), _cts.Token);

        _treeItems.Clear();
        TreeViewModel tree = await Mediator.Send(new GetTemplateTree(), _cts.Token);
        foreach (TreeGroupViewModel group in tree.Groups)
        {
            _treeItems.Add(new TreeItemData<TemplateTreeItemViewModel> { Value = new TemplateTreeItemViewModel(group) });
        }
    }

    private async Task AddTemplateGroup()
    {
        if (!string.IsNullOrWhiteSpace(_templateGroupName))
        {
            Either<BaseError, TemplateGroupViewModel> result = await Mediator.Send(new CreateTemplateGroup(_templateGroupName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding template group: {Error}", error.Value);
            }

            foreach (TemplateGroupViewModel templateGroup in result.RightToSeq())
            {
                _treeItems.Add(new TreeItemData<TemplateTreeItemViewModel> { Value = new TemplateTreeItemViewModel(templateGroup) });
                _templateGroupName = null;

                _templateGroups = await Mediator.Send(new GetAllTemplateGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task AddTemplate()
    {
        if (_selectedTemplateGroup is not null && !string.IsNullOrWhiteSpace(_templateName))
        {
            Either<BaseError, TemplateViewModel> result = await Mediator.Send(new CreateTemplate(_selectedTemplateGroup.Id, _templateName), _cts.Token);

            foreach (BaseError error in result.LeftToSeq())
            {
                Snackbar.Add(error.Value, Severity.Error);
                Logger.LogError("Unexpected error adding template: {Error}", error.Value);
            }

            foreach (TemplateViewModel template in result.RightToSeq())
            {
                foreach (TemplateTreeItemViewModel item in _treeItems.Map(i => i.Value).Where(item => item.TemplateGroupId == _selectedTemplateGroup.Id))
                {
                    item.TreeItems.Add(new TreeItemData<TemplateTreeItemViewModel> { Value = new TemplateTreeItemViewModel(template) });
                }

                _templateName = null;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task DeleteItem(TemplateTreeItemViewModel treeItem)
    {
        foreach (int templateGroupId in Optional(treeItem.TemplateGroupId))
        {
            var parameters = new DialogParameters { { "EntityType", "template group" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Template Group", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteTemplateGroup(templateGroupId), _cts.Token);
                _treeItems.RemoveAll(i => i.Value?.TemplateGroupId == templateGroupId);
                if (_selectedTemplateGroup?.Id == templateGroupId)
                {
                    _selectedTemplateGroup = null;
                }

                _templateGroups = await Mediator.Send(new GetAllTemplateGroups(), _cts.Token);
                await InvokeAsync(StateHasChanged);
            }
        }

        foreach (int templateId in Optional(treeItem.TemplateId))
        {
            var parameters = new DialogParameters { { "EntityType", "template" }, { "EntityName", treeItem.Text } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Template", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is not null && !result.Canceled)
            {
                await Mediator.Send(new DeleteTemplate(templateId), _cts.Token);
                foreach (TemplateTreeItemViewModel parent in _treeItems.Map(i => i.Value))
                {
                    parent.TreeItems.RemoveAll(i => i.Value == treeItem);
                }

                await InvokeAsync(StateHasChanged);
            }
        }
    }

}