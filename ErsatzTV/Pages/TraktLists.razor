@page "/media/trakt/lists"
@using ErsatzTV.Application.Configuration
@using ErsatzTV.Application.MediaCollections
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator
@inject IEntityLocker Locker
@inject ChannelWriter<IBackgroundServiceRequest> WorkerChannel

<MudForm Style="max-height: 100%">
    <MudPaper Square="true" Style="display: flex; height: 64px; min-height: 64px; width: 100%; z-index: 100; align-items: center">
        <MudButton Class="ml-8"
                   StartIcon="@Icons.Material.Filled.Add"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="@Locker.IsTraktLocked()"
                   OnClick="@(_ => AddTraktList())">
            Add Trakt List
        </MudButton>
    </MudPaper>
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">Trakt Lists</MudText>
            <MudDivider Class="mb-6"/>
            <MudTable Hover="true"
                      @bind-RowsPerPage="@_traktListsRowsPerPage"
                      ServerData="@(new Func<TableState, CancellationToken, Task<TableData<TraktListViewModel>>>(ServerReloadTraktLists))"
                      Dense="true"
                      @ref="_traktListsTable">
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col/>
                        <col/>
                        <col/>
                        <col style="width: 240px;"/>
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Match Status</MudTh>
                    <MudTh/>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Slug</MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.MatchCount of @context.ItemCount</MudTd>
                    <MudTd>
                        <div style="align-items: center; display: flex;">
                            <MudTooltip Text="Edit Trakt List Properties">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Disabled="@Locker.IsTraktLocked()"
                                               Href="@($"media/trakt/lists/{context.Id}")">
                                </MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="Search Trakt List">
                                <MudIconButton Icon="@Icons.Material.Filled.Search"
                                               Disabled="@Locker.IsTraktLocked()"
                                               Href="@($"search?query=trakt_list%3a{context.TraktId}")">
                                </MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="Match Trakt List Items">
                                <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                               Disabled="@Locker.IsTraktLocked()"
                                               OnClick="@(_ => MatchListItems(context))">
                                </MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="Delete Trakt List">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Disabled="@Locker.IsTraktLocked()"
                                               OnClick="@(_ => DeleteTraktList(context))">
                                </MudIconButton>
                            </MudTooltip>
                        </div>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
        </MudContainer>
    </div>
</MudForm>

@code {
    private CancellationTokenSource _cts;

    private MudTable<TraktListViewModel> _traktListsTable;

    private int _traktListsRowsPerPage = 10;

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    protected override void OnInitialized() => Locker.OnTraktChanged += LockChanged;

    protected override async Task OnParametersSetAsync()
    {
        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            _traktListsRowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.TraktListsPageSize), token)
                .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
        }
        catch (OperationCanceledException)
        {
            // do nothing
        }
    }

    private void LockChanged(object sender, EventArgs e) =>
        InvokeAsync(async () =>
        {
            StateHasChanged();
            if (_traktListsTable != null && !Locker.IsTraktLocked())
            {
                await _traktListsTable.ReloadServerData();
            }
        });

    private async Task MatchListItems(TraktListViewModel traktList)
    {
        if (Locker.LockTrakt())
        {
            await WorkerChannel.WriteAsync(new MatchTraktListItems(traktList.Id), _cts.Token);
        }
    }

    private async Task DeleteTraktList(TraktListViewModel traktList)
    {
        if (Locker.LockTrakt())
        {
            var parameters = new DialogParameters { { "EntityType", "Trakt List" }, { "EntityName", traktList.Name } };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

            IDialogReference dialog = await Dialog.ShowAsync<DeleteDialog>("Delete Trakt List", parameters, options);
            DialogResult result = await dialog.Result;
            if (result is { Canceled: false })
            {
                await WorkerChannel.WriteAsync(new DeleteTraktList(traktList.Id), _cts.Token);
            }
            else
            {
                Locker.UnlockTrakt();
            }
        }
    }

    private async Task<TableData<TraktListViewModel>> ServerReloadTraktLists(TableState state, CancellationToken cancellationToken)
    {
        try
        {
            await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.TraktListsPageSize, state.PageSize.ToString()), cancellationToken);

            PagedTraktListsViewModel data = await Mediator.Send(new GetPagedTraktLists(state.Page, state.PageSize), cancellationToken);
            return new TableData<TraktListViewModel> { TotalItems = data.TotalCount, Items = data.Page };
        }
        catch (Exception)
        {
            return new TableData<TraktListViewModel>
            {
                TotalItems = 0,
                Items = []
            };
        }
    }

    private async Task AddTraktList()
    {
        if (Locker.LockTrakt())
        {
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
            IDialogReference dialog = await Dialog.ShowAsync<AddTraktListDialog>("Add Trakt List", options);
            DialogResult result = await dialog.Result;
            if (result is { Canceled: false, Data: string url })
            {
                await WorkerChannel.WriteAsync(Application.MediaCollections.AddTraktList.FromUrl(url), _cts.Token);
            }
            else
            {
                Locker.UnlockTrakt();
            }
        }
    }

}
