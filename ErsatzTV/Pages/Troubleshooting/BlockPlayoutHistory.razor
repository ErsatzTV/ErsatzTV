@page "/system/troubleshooting/block-playout/history"
@using System.Globalization
@using ErsatzTV.Application.Configuration
@using ErsatzTV.Application.Playouts
@using ErsatzTV.Application.Troubleshooting
@using ErsatzTV.Application.Troubleshooting.Queries
@implements IDisposable
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<MudForm Style="max-height: 100%">
    <div class="d-flex flex-column" style="height: 100vh; overflow-x: auto">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
            <MudText Typo="Typo.h5" Class="mb-2">Block Playout History</MudText>
            <MudDivider Class="mb-6"/>
            <MudTable Hover="true"
                      Dense="true"
                      Class="mt-8"
                      SelectedItemChanged="@(async (PlayoutHistoryViewModel x) => await PlayoutHistorySelected(x))"
                      @bind-RowsPerPage="@_rowsPerPage"
                      ServerData="@(new Func<TableState, CancellationToken, Task<TableData<PlayoutHistoryViewModel>>>(ServerReload))"
                      RowClassFunc="@SelectedRowClassFunc">
                <ColGroup>
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <col/>
                        <col/>
                        <col/>
                        <col/>
                    </MudHidden>
                </ColGroup>
                <HeaderContent>
                    <MudTh>Start</MudTh>
                    <MudTh>Finish</MudTh>
                    <MudTh>Key</MudTh>
                    <MudTh>Details</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.When.ToString("G", _dtf)</MudTd>
                    <MudTd>@context.Finish.ToString("G", _dtf)</MudTd>
                    <MudTd>@context.Key</MudTd>
                    <MudTd>@context.Details</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager/>
                </PagerContent>
            </MudTable>
            <MudText Typo="Typo.h5" Class="mt-10 mb-2">History Details</MudText>
            <MudDivider Class="mb-6"/>
            @if (_decodedHistory != null)
            {
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Playback Order</MudText>
                    </div>
                    <MudTextField Value="@_decodedHistory.PlaybackOrder.ToString()" ReadOnly="true" />
                </MudStack>
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Collection Type</MudText>
                    </div>
                    <MudTextField Value="@_decodedHistory.CollectionType.ToString()" ReadOnly="true" />
                </MudStack>
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Collection Name</MudText>
                    </div>
                    <MudTextField Value="@_decodedHistory.Name" ReadOnly="true" />
                </MudStack>
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Media Item Type</MudText>
                    </div>
                    <MudTextField Value="@_decodedHistory.MediaItemType" ReadOnly="true" />
                </MudStack>
                <MudStack Row="true" Breakpoint="Breakpoint.SmAndDown" Class="form-field-stack gap-md-8 mb-5">
                    <div class="d-flex">
                        <MudText>Media Item Title</MudText>
                    </div>
                    <MudTextField Value="@_decodedHistory.MediaItemTitle" ReadOnly="true" />
                </MudStack>
            }
        </MudContainer>
    </div>
</MudForm>

@code {
    [SupplyParameterFromQuery(Name = "playoutId")]
    public int? PlayoutId { get; set; }

    [SupplyParameterFromQuery(Name = "blockId")]
    public int? BlockId { get; set; }

    private CancellationTokenSource _cts;
    private readonly DateTimeFormatInfo _dtf = CultureInfo.CurrentUICulture.DateTimeFormat;
    private int _rowsPerPage = 10;
    private int? _selectedPlayoutHistoryId;
    private PlayoutHistoryDetailsViewModel _decodedHistory;

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PlayoutId is null || BlockId is null)
        {
            NavigationManager.NavigateTo("system/troubleshooting");
        }

        _cts?.Cancel();
        _cts?.Dispose();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        try
        {
            _rowsPerPage = await Mediator.Send(new GetConfigElementByKey(ConfigElementKey.TroubleshootingBlockPlayoutHistoryPageSize), token)
                .Map(maybeRows => maybeRows.Match(ce => int.TryParse(ce.Value, out int rows) ? rows : 10, () => 10));
        }
        catch (OperationCanceledException)
        {
            // do nothing
        }
    }

    private async Task<TableData<PlayoutHistoryViewModel>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        _selectedPlayoutHistoryId = null;
        _decodedHistory = null;
        await InvokeAsync(StateHasChanged);

        await Mediator.Send(new SaveConfigElementByKey(ConfigElementKey.TroubleshootingBlockPlayoutHistoryPageSize, state.PageSize.ToString()), cancellationToken);

        PagedPlayoutHistoryViewModel data = await Mediator.Send(new GetBlockPlayoutHistory(PlayoutId!.Value, BlockId!.Value, state.Page, state.PageSize), cancellationToken);
        return new TableData<PlayoutHistoryViewModel> { TotalItems = data.TotalCount, Items = data.Page };
    }

    private async Task PlayoutHistorySelected(PlayoutHistoryViewModel playoutHistory)
    {
        _selectedPlayoutHistoryId = playoutHistory.Id;

        await Task.Delay(100);

        _decodedHistory = await Mediator.Send(new DecodePlayoutHistory(playoutHistory), _cts?.Token ?? CancellationToken.None);
        await InvokeAsync(StateHasChanged);
    }

    private string SelectedRowClassFunc(PlayoutHistoryViewModel element, int rowNumber)
    {
        if (_selectedPlayoutHistoryId != null && _selectedPlayoutHistoryId == element.Id)
        {
            return "selected";
        }

        return string.Empty;
    }
}
