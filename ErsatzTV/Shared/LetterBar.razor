@using ErsatzTV.Extensions
@using ErsatzTV.Core.Search
<div class="letter-bar-container">
    <div class="letter-bar">
        <MudLink Href="@GetLinkForLetter('#')">#</MudLink>
        <MudLink Href="@GetLinkForLetter('a')">A</MudLink>
        <MudLink Href="@GetLinkForLetter('b')">B</MudLink>
        <MudLink Href="@GetLinkForLetter('c')">C</MudLink>
        <MudLink Href="@GetLinkForLetter('d')">D</MudLink>
        <MudLink Href="@GetLinkForLetter('e')">E</MudLink>
        <MudLink Href="@GetLinkForLetter('f')">F</MudLink>
        <MudLink Href="@GetLinkForLetter('g')">G</MudLink>
        <MudLink Href="@GetLinkForLetter('h')">H</MudLink>
        <MudLink Href="@GetLinkForLetter('i')">I</MudLink>
        <MudLink Href="@GetLinkForLetter('j')">J</MudLink>
        <MudLink Href="@GetLinkForLetter('k')">K</MudLink>
        <MudLink Href="@GetLinkForLetter('l')">L</MudLink>
        <MudLink Href="@GetLinkForLetter('m')">M</MudLink>
        <MudLink Href="@GetLinkForLetter('n')">N</MudLink>
        <MudLink Href="@GetLinkForLetter('o')">O</MudLink>
        <MudLink Href="@GetLinkForLetter('p')">P</MudLink>
        <MudLink Href="@GetLinkForLetter('q')">Q</MudLink>
        <MudLink Href="@GetLinkForLetter('r')">R</MudLink>
        <MudLink Href="@GetLinkForLetter('s')">S</MudLink>
        <MudLink Href="@GetLinkForLetter('t')">T</MudLink>
        <MudLink Href="@GetLinkForLetter('u')">U</MudLink>
        <MudLink Href="@GetLinkForLetter('v')">V</MudLink>
        <MudLink Href="@GetLinkForLetter('w')">W</MudLink>
        <MudLink Href="@GetLinkForLetter('x')">X</MudLink>
        <MudLink Href="@GetLinkForLetter('y')">Y</MudLink>
        <MudLink Href="@GetLinkForLetter('z')">Z</MudLink>
    </div>
</div>

@code {

    [Parameter]
    public SearchPageMap PageMap { get; set; }

    [Parameter]
    public string BaseUri { get; set; }

    [Parameter]
    public string Query { get; set; }

    private string GetLinkForLetter(char letter)
    {
        var uri = $"{BaseUri}/page/{PageMap.PageMap[letter]}";
        if (!string.IsNullOrWhiteSpace(Query))
        {
            (string key, string value) = Query.EncodeQuery();
            uri = $"{uri}?{key}={value}";
        }

        return uri + $"#letter-{letter}";
    }

}