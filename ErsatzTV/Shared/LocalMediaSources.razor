@using ErsatzTV.Application.MediaSources
@using ErsatzTV.Application.MediaSources.Commands
@using ErsatzTV.Application.MediaSources.Queries
@implements IDisposable
@inject IDialogService Dialog
@inject IMediator Mediator
@inject IEntityLocker Locker
@inject ChannelWriter<IBackgroundServiceRequest> Channel

<MudTable Hover="true" Items="_mediaSources" Dense="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Local Media Sources</MudText>
    </ToolBarContent>
    <ColGroup>
        <col/>
        <col style="width: 120px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Folder</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Folder">@context.Folder</MudTd>
        <MudTd>
            <div style="align-items: center; display: flex;">
                @if (Locker.IsMediaSourceLocked(context.Id))
                {
                    <div style="align-items: center; display: flex; height: 48px; justify-content: center; width: 48px;">
                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/>
                    </div>
                }
                else
                {
                    <MudTooltip Text="Scan Media Source">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       Disabled="@Locker.IsMediaSourceLocked(context.Id)"
                                       OnClick="@(_ => RefreshAllMetadata(context))">
                        </MudIconButton>
                    </MudTooltip>
                }
                <MudTooltip Text="Delete Media Source">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   Disabled="@Locker.IsMediaSourceLocked(context.Id)"
                                   OnClick="@(_ => DeleteMediaSource(context))">
                    </MudIconButton>
                </MudTooltip>
            </div>
        </MudTd>
    </RowTemplate>
</MudTable>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Link="/media/sources/local/add" Class="mt-4">
    Add Local Media Source
</MudButton>

@code {
    private IList<LocalMediaSourceViewModel> _mediaSources;

    protected override void OnInitialized() =>
        Locker.OnMediaSourceChanged += LockChanged;

    protected override async Task OnParametersSetAsync() => await LoadMediaSources();

    private async Task LoadMediaSources() =>
        _mediaSources = await Mediator.Send(new GetAllMediaSources()).Map(list => list.OfType<LocalMediaSourceViewModel>().ToList());

    private async Task DeleteMediaSource(LocalMediaSourceViewModel mediaSource)
    {
        int count = await Mediator.Send(new CountMediaItemsById(mediaSource.Id));

        var parameters = new DialogParameters
        {
            { "EntityType", "media source" },
            { "EntityName", mediaSource.Folder },
            { "DetailText", $"This media source contains {count} media items." },
            { "DetailHighlight", count.ToString() }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        IDialogReference dialog = Dialog.Show<DeleteDialog>("Delete Media Source", parameters, options);
        DialogResult result = await dialog.Result;
        if (!result.Cancelled)
        {
            await Mediator.Send(new DeleteLocalMediaSource(mediaSource.Id));
            await LoadMediaSources();
        }
    }

    private async Task RefreshAllMetadata(LocalMediaSourceViewModel mediaSource)
    {
        if (Locker.LockMediaSource(mediaSource.Id))
        {
            await Channel.WriteAsync(new ScanLocalMediaSource(mediaSource.Id));
            StateHasChanged();
        }
    }

    private void LockChanged(object sender, EventArgs e) =>
        InvokeAsync(StateHasChanged);

    void IDisposable.Dispose() => Locker.OnMediaSourceChanged -= LockChanged;

}