@inherits LayoutComponentBase
@using System.Reflection
@using ErsatzTV.Application.Search
@using ErsatzTV.Core.Interfaces.Search
@using ErsatzTV.Extensions
@using MudBlazor 
@implements IDisposable
@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject SystemStartup SystemStartup
@inject ISearchTargets SearchTargets

<MudThemeProvider Theme="ErsatzTvTheme"/>
<MudDialogProvider BackdropClick="false"/>
<MudSnackbarProvider/>
<MudPopoverProvider />

<MudLayout @onclick="@(() => _isOpen = false)">
    <MudAppBar Elevation="1" Class="app-bar">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        
        <!-- Desktop Logo: Visible on MD and up -->
        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
            <div style="min-width: 240px" class="ml-3">
                <a href="">
                    <img src="images/ersatztv.png" alt="ErsatzTV"/>
                </a>
            </div>
        </MudHidden>

        @if (SystemStartup.IsDatabaseReady && SystemStartup.IsSearchIndexReady)
        {
            <!-- Mobile Search Toggle Button: Visible on SM and XS, only if mobile search is NOT active -->
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true" Hidden="@_mobileSearchActive">
                <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Inherit" OnClick="@ToggleMobileSearch"/>
            </MudHidden>

            <!-- Desktop Search Bar: Visible on MD and up -->
            <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                <div class="search-form">
                    @SearchFieldContentProperty(false)
                </div>
            </MudHidden>

            <!-- Mobile Search Bar: Visible on SM and XS, only if mobile search IS active -->
            <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true" Hidden="@(!_mobileSearchActive)">
                <div class="search-form" style="flex-grow: 1; margin-left: 8px; margin-right: 8px;">
                    @SearchFieldContentProperty(true)
                </div>
            </MudHidden>
        }

        <!-- Spacer: Takes up remaining space. Hidden on mobile if search is active. -->
        @if (!_mobileSearchActive)
        {
            <div class="flex-grow-1"></div>
        }
        
        <div style="align-items: center; display: flex;" class="d-none d-md-flex">
            @if (SystemStartup.IsDatabaseReady && SystemStartup.IsSearchIndexReady)
            {
                <MudLink Color="Color.Inherit" Href="@IptvUrl("channels.m3u")" Target="_blank" Underline="Underline.None">M3U</MudLink>
                <MudLink Color="Color.Inherit" Href="@IptvUrl("xmltv.xml")" Target="_blank" Class="mx-4" Underline="Underline.None">XMLTV</MudLink>
            }
            <MudTooltip Text="Documentation">
                <MudIconButton Icon="@Icons.Material.Filled.Help" Color="Color.Inherit" Href="https://ersatztv.org" Target="_blank"/>
            </MudTooltip>
            <MudTooltip Text="Discord">
                <MudIconButton Icon="fab fa-discord" Color="Color.Inherit" Href="https://discord.gg/hHaJm3yGy6" Target="_blank"/>
            </MudTooltip>
            <MudTooltip Text="GitHub">
                <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/ErsatzTV/ErsatzTV" Target="_blank"/>
            </MudTooltip>
            <AuthorizeView>
                <form action="/account/logout" method="post">
                    <MudTooltip Text="Logout">
                        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" ButtonType="ButtonType.Submit"/>
                    </MudTooltip>
                </form>
            </AuthorizeView>
        </div>
    </MudAppBar>
    @if (SystemStartup.IsDatabaseReady && SystemStartup.IsSearchIndexReady)
    {
        <MudDrawer @bind-Open="@_drawerIsOpen" Elevation="1" ClipMode="DrawerClipMode.Always" Variant="DrawerVariant.Responsive">
            <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary">
                <MudNavLink Href="channels">Channels</MudNavLink>
                <MudNavLink Href="ffmpeg">FFmpeg Profiles</MudNavLink>
                <MudNavLink Href="watermarks">Watermarks</MudNavLink>
                <MudNavGroup Title="Media Sources">
                    <MudNavLink Href="media/sources/local">Local</MudNavLink>
                    <MudNavLink Href="media/sources/emby">Emby</MudNavLink>
                    <MudNavLink Href="media/sources/jellyfin">Jellyfin</MudNavLink>
                    <MudNavLink Href="media/sources/plex">Plex</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Media">
                    <MudNavLink Href="media/libraries">Libraries</MudNavLink>
                    <MudNavLink Href="media/trash">Trash</MudNavLink>
                    <MudNavLink Href="media/tv/shows">TV Shows</MudNavLink>
                    <MudNavLink Href="media/movies">Movies</MudNavLink>
                    <MudNavLink Href="media/music/artists">Music</MudNavLink>
                    <MudNavLink Href="media/other/videos">Other Videos</MudNavLink>
                    <MudNavLink Href="media/music/songs">Songs</MudNavLink>
                    <MudNavLink Href="media/browser/images">Images</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Lists">
                    <MudNavLink Href="media/collections">Collections</MudNavLink>
                    <MudNavLink Href="media/playlists">Playlists</MudNavLink>
                    <MudNavLink Href="media/trakt/lists">Trakt Lists</MudNavLink>
                    <MudNavLink Href="media/filler/presets">Filler Presets</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="Scheduling">
                    <MudNavLink Href="schedules">Schedules</MudNavLink>
                    <MudNavLink Href="blocks">Blocks</MudNavLink>
                    <MudNavLink Href="templates">Templates</MudNavLink>
                    <MudNavLink Href="decos">Decos</MudNavLink>
                    <MudNavLink Href="deco-templates">Deco Templates</MudNavLink>
                    <MudNavLink Href="playouts">Playouts</MudNavLink>
                </MudNavGroup>
                <MudNavLink Href="settings">Settings</MudNavLink>
                <MudNavGroup Title="Support" Expanded="true">
                    <MudNavLink Href="system/health">Health Checks</MudNavLink>
                    <MudNavLink Href="system/logs">Logs</MudNavLink>
                    <MudNavLink Href="system/troubleshooting">Troubleshooting</MudNavLink>
                </MudNavGroup>
                <MudDivider Class="my-6" DividerType="DividerType.Middle"/>
                <MudContainer Style="text-align: right" Class="mr-6">
                    <MudText Typo="Typo.body2">ErsatzTV Version</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@InfoVersion</MudText> 
                </MudContainer>
            </MudNavMenu>
        </MudDrawer>
    }
    <MudMainContent Class="pt-16 px-4" Style="background-color: var(--mud-palette-background);"> 
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private static readonly string InfoVersion = Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion ?? "unknown";

    private readonly CancellationTokenSource _cts = new();

    private string _query;

    private record SearchModel;

    private readonly SearchModel _dummyModel = new();
    private bool _drawerIsOpen = true;
    private bool _isOpen; // For search popover
    private List<SearchTargetViewModel> _searchTargets;
    
    private bool _mobileSearchActive = false;

    protected override void OnInitialized() 
    {
        SystemStartup.OnDatabaseReady += OnStartupProgress;
        SystemStartup.OnSearchIndexReady += OnStartupProgress;
        SearchTargets.OnSearchTargetsChanged += OnSearchTargetsChanged;
    }

    public void Dispose()
    {
        SystemStartup.OnDatabaseReady -= OnStartupProgress;
        SystemStartup.OnSearchIndexReady -= OnStartupProgress;
        SearchTargets.OnSearchTargetsChanged -= OnSearchTargetsChanged;
        _cts.Cancel();
        _cts.Dispose();
    }

    private static MudTheme ErsatzTvTheme => new()
    {
        PaletteLight = new MudBlazor.PaletteLight() 
        {
            Primary = "#1976D2",
            Secondary = "#FFC107",
            Background = "#FFFFFF", 
            Surface = "#F5F5F5", 
            
            AppbarBackground = "#1976D2", 
            AppbarText = MudBlazor.Colors.Shades.White, 
            
            DrawerBackground = "#F5F5F5", 
            DrawerText = "rgba(0,0,0, 0.87)", 
            DrawerIcon = "rgba(0,0,0, 0.54)",

            TextPrimary = "rgba(0,0,0, 0.87)",
            TextSecondary = "rgba(0,0,0, 0.60)",
            TextDisabled = "rgba(0,0,0, 0.38)",
            
            ActionDefault = "rgba(0,0,0, 0.54)",
            ActionDisabled = "rgba(0,0,0, 0.26)",
            ActionDisabledBackground = "rgba(0,0,0, 0.12)",

            LinesDefault = "rgba(0,0,0, 0.12)",
            LinesInputs = "rgba(0,0,0, 0.42)",

            TableLines = "rgba(0,0,0, 0.12)",
            TableStriped = "rgba(0,0,0, 0.02)", 
            TableHover = "rgba(0,0,0, 0.04)",
            
            Divider = "rgba(0,0,0, 0.12)",
            
            Info = "#2196F3", 
            Success = "#4CAF50",
            Warning = "#FB8C00",
            Error = "#F44336",
            Dark = "#27272f", 

            White = MudBlazor.Colors.Shades.White 
        },
        LayoutProperties = new MudBlazor.LayoutProperties()
        {
            DefaultBorderRadius = "6px",
            AppbarHeight = "64px" 
        },
        Typography = new MudBlazor.Typography()
        {
            Default = new MudBlazor.DefaultTypography()
            {
                FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
                FontSize = ".875rem", 
                // FontWeight = global::System.Convert.ToInt32(400), // REMOVED
                // LineHeight = global::System.Convert.ToDouble(1.43), // REMOVED
                LetterSpacing = ".01071em"
            },
            H6 = new MudBlazor.H6Typography() { FontSize = "1.1rem" }, 
        }
    };

    private string Query
    {
        get => _query;
        set
        {
            if (_query == value)
            {
                return;
            }

            _query = value;
            _isOpen = true; 
            StateHasChanged();
        }
    }
    
    private void ToggleMobileSearch()
    {
        _mobileSearchActive = !_mobileSearchActive;
        if (!_mobileSearchActive) 
        {
            Query = string.Empty; 
            _isOpen = false;      
        }
        StateHasChanged();
    }

    private RenderFragment<bool> SearchFieldContentProperty => (isMobile) =>@<EditForm Model="@_dummyModel" OnSubmit="@(_ => PerformSearch())">
        <MudTextField T="string"
                      @bind-Value="@Query"
                      AdornmentIcon="@(isMobile && _mobileSearchActive ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.Search)"
                      OnAdornmentClick="@(isMobile && _mobileSearchActive ? (Action)ToggleMobileSearch : null)"
                      Adornment="Adornment.Start"
                      Placeholder="Search..."
                      Variant="Variant.Outlined"
                      Immediate="true"
                      Margin="Margin.Dense" 
                      Class="search-bar">
        </MudTextField>
        <MudPopover Open="@_isOpen" MaxHeight="300" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" RelativeWidth="DropdownWidth.Relative">
            @if (!string.IsNullOrWhiteSpace(_query) && _query.Length >= 3)
            {
                var matches = _searchTargets?.Where(s => s.Name.Contains(_query, StringComparison.CurrentCultureIgnoreCase)).ToList();
                if (matches != null && matches.Any())
                {
                    <MudList T="SearchTargetViewModel" ReadOnly="false" Dense="true">
                        @foreach (SearchTargetViewModel searchTarget in matches)
                        {
                            <MudListItem @key="@searchTarget" OnClick="@(() => NavigateTo(searchTarget))">
                                <MudText Typo="Typo.body1">@searchTarget.Name</MudText>
                                <MudText Typo="Typo.subtitle1" Class="mud-text-disabled">
                                    @(
                                    searchTarget.Kind switch
                                    {
                                        SearchTargetKind.Channel => "Channel",
                                        SearchTargetKind.FFmpegProfile => "FFmpeg Profile",
                                        SearchTargetKind.ChannelWatermark => "Channel Watermark",
                                        SearchTargetKind.Collection => "Collection",
                                        SearchTargetKind.MultiCollection => "Multi Collection",
                                        SearchTargetKind.SmartCollection => "Smart Collection",
                                        SearchTargetKind.Schedule => "Schedule",
                                        SearchTargetKind.ScheduleItems => "Schedule Items",
                                        _ => string.Empty
                                    })
                                </MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
            }
        </MudPopover>
    </EditForm>;

    private async void OnStartupProgress(object sender, EventArgs e)
    {
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // do nothing
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _query = NavigationManager.Uri.GetSearchQuery();

        if (SystemStartup.IsDatabaseReady && _searchTargets is null)
        {
            _searchTargets = await Mediator.Send(new QuerySearchTargets(), _cts.Token);
        }
    }

    protected async void OnSearchTargetsChanged(object sender, EventArgs e) => _searchTargets = await Mediator.Send(new QuerySearchTargets(), _cts.Token);

    private void PerformSearch()
    {
        NavigationManager.NavigateTo(_query.GetRelativeSearchQuery(), true);
        _isOpen = false; 
        if(_mobileSearchActive)
        {
            _mobileSearchActive = false;
        }
        StateHasChanged();
    }

    private void OnKeyUp(KeyboardEventArgs args)
    {
        switch (args.Key)
        {
            case "Enter":
            case "NumpadEnter":
                PerformSearch(); 
                break;
            case "Escape":
                _isOpen = false;
                if (_mobileSearchActive)
                {
                    _mobileSearchActive = false; 
                    Query = string.Empty;
                }
                break;
        }
    }

    private void NavigateTo(SearchTargetViewModel searchTarget)
    {
        _isOpen = false; 
        if(_mobileSearchActive)
        {
            _mobileSearchActive = false; 
            Query = string.Empty;
        }
        NavigationManager.NavigateTo(UrlFor(searchTarget), searchTarget.Kind is SearchTargetKind.SmartCollection);
    }

    private string UrlFor(SearchTargetViewModel searchTarget) =>
        searchTarget.Kind switch
        {
            SearchTargetKind.Channel => $"channels/{searchTarget.Id}",
            SearchTargetKind.FFmpegProfile => $"ffmpeg/{searchTarget.Id}",
            SearchTargetKind.ChannelWatermark => $"watermarks/{searchTarget.Id}",
            SearchTargetKind.Collection => $"media/collections/{searchTarget.Id}",
            SearchTargetKind.MultiCollection => $"media/multi-collections/{searchTarget.Id}/edit",
            SearchTargetKind.SmartCollection when searchTarget is SmartCollectionSearchTargetViewModel sc =>
                sc.Query.GetRelativeSearchQuery(),
            SearchTargetKind.Schedule => $"schedules/{searchTarget.Id}",
            SearchTargetKind.ScheduleItems => $"schedules/{searchTarget.Id}/items",
            _ => null
        };

    private string IptvUrl(string path)
    {
        var uri = new Uri(NavigationManager.Uri);
        return $"{uri.Scheme}://{uri.Host}:{Settings.StreamingPort}/iptv/{path}";
    }

    private void ToggleDrawer()
    {
        _drawerIsOpen = !_drawerIsOpen;
    }
}