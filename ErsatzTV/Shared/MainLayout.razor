@using System.Reflection
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives
@using System.Web
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<MudThemeProvider Theme="_ersatzTvTheme"/>
<MudDialogProvider DisableBackdropClick="true"/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <div style="min-width: 240px">
            <a href="/">
                <img src="/images/ersatztv.png" alt="ErsatzTV"/>
            </a>
        </div>
        <MudTextField T="string"
                      @bind-Value="@_query"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Adornment="Adornment.Start"
                      Variant="Variant.Outlined"
                      Class="search-bar"
                      OnKeyDown="@OnSearchKeyDown"
                      Immediate="true">
        </MudTextField>
        <MudAppBarSpacer/>
        <MudLink Color="Color.Info" Href="/iptv/channels.m3u" Target="_blank" Underline="Underline.None">M3U</MudLink>
        <MudLink Color="Color.Info" Href="/iptv/xmltv.xml" Target="_blank" Class="mx-4" Underline="Underline.None">XMLTV</MudLink>
        <MudLink Color="Color.Info" Href="/swagger" Target="_blank" Class="mr-4" Underline="Underline.None">API</MudLink>
        <MudTooltip Text="Discord">
            <MudIconButton Icon="fab fa-discord" Color="Color.Primary" Link="https://discord.gg/hHaJm3yGy6" Target="_blank"/>
        </MudTooltip>
        <MudTooltip Text="GitHub">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Primary" Link="https://github.com/jasongdove/ErsatzTV" Target="_blank"/>
        </MudTooltip>
    </MudAppBar>
    <MudDrawer Open="true" Elevation="2" ClipMode="DrawerClipMode.Always">
        <MudNavMenu>
            <MudNavLink Href="/channels">Channels</MudNavLink>
            <MudNavLink Href="/ffmpeg">FFmpeg</MudNavLink>
            <MudNavGroup Title="Media Sources" Expanded="true">
                <MudNavLink Href="/media/plex">Plex</MudNavLink>
            </MudNavGroup>
            <MudNavGroup Title="Media" Expanded="true">
                <MudNavLink Href="/media/libraries">Libraries</MudNavLink>
                <MudNavLink Href="/media/tv/shows">TV Shows</MudNavLink>
                <MudNavLink Href="/media/movies">Movies</MudNavLink>
                <MudNavLink Href="/media/collections">Collections</MudNavLink>
            </MudNavGroup>
            <MudNavLink Href="/schedules">Schedules</MudNavLink>
            <MudNavLink Href="/playouts">Playouts</MudNavLink>
            <MudNavLink Href="/system/logs">Logs</MudNavLink>
            <MudDivider Class="my-6" DividerType="DividerType.Middle"/>
            <MudContainer Style="text-align: right" Class="mr-6">
                <MudText Typo="Typo.body2">ErsatzTV Version</MudText>
                <MudText Typo="Typo.body2" Color="Color.Info">@InfoVersion</MudText>
            </MudContainer>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private static readonly string InfoVersion = Assembly.GetEntryAssembly().GetCustomAttribute<AssemblyInformationalVersionAttribute>()?.InformationalVersion ?? "unknown";

    private string _query;

    private MudTheme _ersatzTvTheme => new()
    {
        Palette = new Palette
        {
            ActionDefault = "rgba(255,255,255, 0.80)",
            Primary = "#009000",
            Secondary = "#009090",
            AppbarBackground = "#121212",
            Background = "#272727",
            DrawerBackground = "#1f1f1f",
            Surface = "#1f1f1f",
            DrawerText = "rgba(255,255,255, 0.80)",
            TextPrimary = "rgba(255,255,255, 0.80)",
            TextSecondary = "rgba(255,255,255, 0.80)",
            TextDisabled = "rgba(255,255,255, 0.40)",
            ActionDisabled = "rgba(255,255,255, 0.40)",
            Info = "#00c0c0",
            Tertiary = "#00c000",
            White = Colors.Shades.White
        }
    };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        string query = new Uri(NavigationManager.Uri).Query;
        if (QueryHelpers.ParseQuery(query).TryGetValue("query", out StringValues value))
        {
            _query = value;
        }
        else
        {
            _query = string.Empty;
        }
    }

    private void OnSearchKeyDown(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
        {
            string query = HttpUtility.UrlEncode(_query);
            NavigationManager.NavigateTo($"/search?query={query}", true);
            StateHasChanged();
        }
    }

}