@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.MediaItems.Commands
@using Unit = LanguageExt.Unit
@inject IMediator Mediator

<div class="media-card-container mx-3 pb-3">
    <MudPaper Class="media-card" Style="@PosterForItem()">
        @if (string.IsNullOrWhiteSpace(Data.Poster))
        {
            <MudText Align="Align.Center" Typo="Typo.h1" Class="media-card-poster-placeholder mud-text-disabled">
                @Placeholder(Data.SortTitle)
            </MudText>
        }
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="@(() => RefreshMetadata())" Class="media-card-menu"></MudIconButton>
    </MudPaper>
    <MudText Align="Align.Center" Class="media-card-title" UserAttributes="@(new Dictionary<string, object> { { "title", Data.Title } })">
        @Data.Title
    </MudText>
    <MudText Typo="Typo.body2" Align="Align.Center" Class="mud-text-secondary">
        @Data.Subtitle
    </MudText>
</div>

@code {

    [Parameter]
    public AggregateMediaItemViewModel Data { get; set; }

    [Parameter]
    public EventCallback<Unit> DataRefreshed { get; set; }

    private string Placeholder(string sortTitle)
    {
        string first = sortTitle.Substring(0, 1).ToUpperInvariant();
        return int.TryParse(first, out _) ? "#" : first;
    }

    private string PosterForItem() => string.IsNullOrWhiteSpace(Data.Poster)
        ? "position: relative"
        : $"position: relative; background-image: url(/posters/{Data.Poster}); background-size: cover";

    private async Task RefreshMetadata()
    {
    // TODO: how should we refresh an entire television show?
        await Mediator.Send(new RefreshMediaItemMetadata(Data.MediaItemId));
        await Mediator.Send(new RefreshMediaItemCollections(Data.MediaItemId));
        await Mediator.Send(new RefreshMediaItemPoster(Data.MediaItemId));
        await DataRefreshed.InvokeAsync();
    }

}