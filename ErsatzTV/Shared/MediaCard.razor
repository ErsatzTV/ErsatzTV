@using ErsatzTV.Application.MediaCards
@using Unit = LanguageExt.Unit
@inject IMediator Mediator

<div class="@((ContainerClass ?? "media-card-container mr-6") + " pb-3")">
    @if (!string.IsNullOrWhiteSpace(Link))
    {
        <MudPaper>
            <MudButton Link="@Link" Class="@($"media-card {CardClass}")" Style="@PosterForItem()">
                @if (string.IsNullOrWhiteSpace(Data.Poster))
                {
                    <MudText Align="Align.Center" Typo="Typo.h1" Class="media-card-poster-placeholder mud-text-disabled">
                        @GetPlaceholder(Data.SortTitle)
                    </MudText>
                }
            </MudButton>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="@($"media-card {CardClass}")" Style="@PosterForItem()">
            @if (string.IsNullOrWhiteSpace(Data.Poster))
            {
                <MudText Align="Align.Center" Typo="Typo.h1" Class="media-card-poster-placeholder mud-text-disabled">
                    @GetPlaceholder(Data.SortTitle)
                </MudText>
            }
        </MudPaper>
    }
    <MudText Align="Align.Center" Class="media-card-title" UserAttributes="@(new Dictionary<string, object> { { "title", Data.Title } })">
        @(Title ?? Data.Title)
    </MudText>
    <MudText Typo="Typo.body2" Align="Align.Center" Class="mud-text-secondary">
        @(Subtitle ?? Data.Subtitle)
    </MudText>
</div>

@code {

    [Parameter]
    public MediaCardViewModel Data { get; set; }

    [Parameter]
    public string Link { get; set; }

    [Parameter]
    public EventCallback<Unit> DataRefreshed { get; set; }

    [Parameter]
    public string Placeholder { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Subtitle { get; set; }

    [Parameter]
    public string ContainerClass { get; set; }

    [Parameter]
    public string CardClass { get; set; }

    private string GetPlaceholder(string sortTitle)
    {
        if (Placeholder != null)
        {
            return Placeholder;
        }

        string first = sortTitle.Substring(0, 1).ToUpperInvariant();
        return int.TryParse(first, out _) ? "#" : first;
    }

    private string PosterForItem() => string.IsNullOrWhiteSpace(Data.Poster)
        ? "position: relative"
        : $"position: relative; background-image: url(/posters/{Data.Poster}); background-size: cover";

}