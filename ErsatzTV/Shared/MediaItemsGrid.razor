@using ErsatzTV.Application.MediaItems
@using ErsatzTV.Application.MediaItems.Queries
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.Small" Class="mb-6" Style="max-width: 300px">
    <MudPaper Style="align-items: center; display: flex; justify-content: center;">
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronLeft"
                       OnClick="@(() => PrevPage())"
                       Disabled="@(_pageNumber <= 1)">
        </MudIconButton>
        <MudText Style="flex-grow: 1"
                 Align="Align.Center">
            @Math.Min((_pageNumber - 1) * PageSize + 1, _data.Count)-@Math.Min(_data.Count, _pageNumber * PageSize) of @_data.Count
        </MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.ChevronRight"
                       OnClick="@(() => NextPage())" Disabled="@(_pageNumber * PageSize >= _data.Count)">
        </MudIconButton>
    </MudPaper>
</MudContainer>

<MudContainer MaxWidth="MaxWidth.False" Class="media-card-grid">
    @foreach (AggregateMediaItemViewModel item in _data.DataPage)
    {
        <MediaCard Data="@item"/>
    }
</MudContainer>

@code {

    [Parameter]
    public MediaType MediaType { get; set; }

    private int PageSize => 100;
    private int _pageNumber = 1;

    private AggregateMediaItemResults _data;

    protected override Task OnParametersSetAsync() => RefreshData();

    private async Task RefreshData() =>
        _data = await Mediator.Send(new GetAggregateMediaItems(MediaType, _pageNumber, PageSize));

    private async Task PrevPage()
    {
        _pageNumber -= 1;
        await RefreshData();
    }

    private async Task NextPage()
    {
        _pageNumber += 1;
        await RefreshData();
    }

}