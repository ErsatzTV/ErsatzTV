@using ErsatzTV.Application.MediaSources
@implements IDisposable
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject ILogger<RemoteMediaSourceLibrariesEditor> Logger
@inject ISnackbar Snackbar
@inject IEntityLocker Locker

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true" Items="_libraries" Dense="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6"><b>@_source.Name</b> Libraries</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col style="width: 100px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<RemoteMediaSourceLibraryEditViewModel, object>(x => x.Name)">
                    Name
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<RemoteMediaSourceLibraryEditViewModel, object>(x => x.MediaKind)">
                    Media Kind
                </MudTableSortLabel>
            </MudTh>
            <MudTh>Synchronize</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="MediaType">@context.MediaKind</MudTd>
            <MudTd DataLabel="Synchronize">
                <MudSwitch T="bool" @bind-Value="@context.ShouldSyncItems" Color="Color.Primary"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => SaveChanges())" Class="mt-4">
        Save Changes
    </MudButton>
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public Func<int, Task<Option<RemoteMediaSourceViewModel>>> GetMediaSourceById { get; set; }

    [Parameter]
    public Func<int, Task<List<RemoteMediaSourceLibraryEditViewModel>>> GetLibrariesBySourceId { get; set; }

    [Parameter]
    public Func<List<RemoteMediaSourceLibraryEditViewModel>, IRequest<Either<BaseError, Unit>>> GetUpdateLibraryRequest { get; set; }

    [Parameter]
    public Func<SynchronizeParameters, Task<Unit>> SynchronizeLibraryByIdIfNeeded { get; set; }

    private RemoteMediaSourceViewModel _source;
    private List<RemoteMediaSourceLibraryEditViewModel> _libraries;

    public record SynchronizeParameters(int LibraryId, int MediaSourceId);

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnParametersSetAsync() => LoadData();

    private async Task LoadData()
    {
        Option<RemoteMediaSourceViewModel> maybeSource = await GetMediaSourceById(Id);
        await maybeSource.Match(
            async source =>
            {
                _source = source;
                _libraries = await GetLibrariesBySourceId(Id);
            },
            () =>
            {
                NavigationManager.NavigateTo("404");
                return Task.CompletedTask;
            });
    }

    private async Task SaveChanges()
    {
        IRequest<Either<BaseError, Unit>> request = GetUpdateLibraryRequest(_libraries);
        Seq<BaseError> errorMessages = await Mediator.Send(request, _cts.Token).Map(e => e.LeftToSeq());

        await errorMessages.HeadOrNone().Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving {Name.ToLowerInvariant()} libraries: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving {MediaSource} libraries: {Error}", Name, error.Value);
                return Task.CompletedTask;
            },
            async () =>
            {
                foreach (int libraryId in _libraries.Filter(l => l.ShouldSyncItems).Map(l => l.Id))
                {
                    if (Locker.LockLibrary(libraryId))
                    {
                        await SynchronizeLibraryByIdIfNeeded(new SynchronizeParameters(libraryId, Id));
                    }
                }

                NavigationManager.NavigateTo($"media/sources/{Name.ToLowerInvariant()}");
            });
    }

}