@using ErsatzTV.Application.MediaSources
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<RemoteMediaSourcePathReplacementsEditor> Logger
@inject ISnackbar Snackbar
@inject IMediator Mediator

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-8">
    <MudTable Hover="true" Items="_pathReplacements.OrderBy(r => r.Id)" Dense="true" @bind-SelectedItem="_selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6"><b>@_source?.Name</b> Path Replacements</MudText>
        </ToolBarContent>
        <ColGroup>
            <col/>
            <col/>
            <col style="width: 60px;"/>
        </ColGroup>
        <HeaderContent>
            <MudTh>@Name Path</MudTh>
            <MudTh>Local Path</MudTh>
            <MudTh/>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@($"{Name} Path")">
                <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                    @context.RemotePath
                </MudText>
            </MudTd>
            <MudTd DataLabel="Local Path">
                <MudText Typo="@(context == _selectedItem ? Typo.subtitle2 : Typo.body2)">
                    @context.LocalPath
                </MudText>
            </MudTd>
            <MudTd>
                <MudTooltip Text="Delete Path Replacement">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                   OnClick="@(_ => RemovePathReplacement(context))">
                    </MudIconButton>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
    </MudTable>
    <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@(_ => AddPathReplacement())" Class="mt-4">
        Add Path Replacement
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(_ => SaveChanges())" Class="mt-4 ml-4">
        Save Changes
    </MudButton>

    @if (_selectedItem is not null)
    {
        <div style="max-width: 400px;">
            <EditForm Model="_selectedItem">
                <FluentValidationValidator/>
                <MudCard Class="mt-6">
                    <MudCardContent>
                        <MudTextField Label="@($"{Name} Path")"
                                      @bind-Value="@_selectedItem.RemotePath"
                                      For="@(() => _selectedItem.RemotePath)"/>
                        <MudTextField Class="mt-3"
                                      Label="Local Path"
                                      @bind-Value="@_selectedItem.LocalPath"
                                      For="@(() => _selectedItem.LocalPath)"/>
                    </MudCardContent>
                </MudCard>
            </EditForm>
        </div>
    }
</MudContainer>

@code {
    private readonly CancellationTokenSource _cts = new();

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public Func<int, Task<Option<RemoteMediaSourceViewModel>>> GetMediaSourceById { get; set; }

    [Parameter]
    public Func<int, Task<List<RemoteMediaSourcePathReplacementEditViewModel>>> GetPathReplacementsBySourceId { get; set; }

    [Parameter]
    public Func<List<RemoteMediaSourcePathReplacementEditViewModel>, IRequest<Either<BaseError, Unit>>> GetUpdatePathReplacementsRequest { get; set; }

    private RemoteMediaSourceViewModel _source;
    private List<RemoteMediaSourcePathReplacementEditViewModel> _pathReplacements = new();

    private RemoteMediaSourcePathReplacementEditViewModel _selectedItem;

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    protected override Task OnParametersSetAsync() => LoadData();

    private async Task LoadData()
    {
        Option<RemoteMediaSourceViewModel> maybeSource = await GetMediaSourceById(Id);
        await maybeSource.Match(
            async source =>
            {
                _source = source;
                _pathReplacements = await GetPathReplacementsBySourceId(Id);
            },
            () =>
            {
                NavigationManager.NavigateTo("404");
                return Task.CompletedTask;
            });
    }

    private void AddPathReplacement()
    {
        var item = new RemoteMediaSourcePathReplacementEditViewModel();
        _pathReplacements.Add(item);
        _selectedItem = item;
    }

    private void RemovePathReplacement(RemoteMediaSourcePathReplacementEditViewModel item)
    {
        _selectedItem = null;
        _pathReplacements.Remove(item);
    }

    private async Task SaveChanges()
    {
        Seq<BaseError> errorMessages = await Mediator.Send(GetUpdatePathReplacementsRequest(_pathReplacements), _cts.Token)
            .Map(e => e.LeftToSeq());

        errorMessages.HeadOrNone().Match(
            error =>
            {
                Snackbar.Add($"Unexpected error saving path replacements: {error.Value}", Severity.Error);
                Logger.LogError("Unexpected error saving path replacements: {Error}", error.Value);
            },
            () => NavigationManager.NavigateTo($"media/sources/{Name.ToLowerInvariant()}"));
    }

}